; file: species_general_additive_law.foc
; species: partially_ordered_additive_monoid
; property: add_absorbes_sup

; $goal
; (A. ((x) (A. ((y)
;   (Is_true (abst_order_sup (abst_plus x y) x))))))

; ; abst_plus_is_left_congruence
; (A. ((x) (A. ((y) (A. ((z)
;   (=> (Is_true (abst_equal x y))
;       (Is_true (abst_equal (abst_plus x z) (abst_plus y z))))))))))

; ; abst_equal_transitive
; (A. ((x) (A. ((y) (A. ((z)
;   (=> (Is_true (abst_equal x y))
;       (=> (Is_true (abst_equal y z))
;           (Is_true (abst_equal x z))))))))))

; ; abst_plus_is_regular
; (A. ((x) (A. ((y) (A. ((z)
;   (=> (Is_true (abst_equal (abst_plus x y) (abst_plus x z)))
;       (Is_true (abst_equal y z)))))))))

; ; abst_plus_commutes
; (A. ((x) (A. ((y)
;   (Is_true (abst_equal (abst_plus x y) (abst_plus y x)))))))

; ; abst_add_keeps_inf
; (A. ((x) (A. ((y) (Is_true (abst_order_inf x (abst_plus x y)))))))

; ; abst_inf_commutes
; (A. ((x "abst_T") (A. ((y "abst_T")
;      (Is_true (abst_equal (abst_inf x y) (abst_inf y x)))))))

; ; abst_sum_is_inf_plus_sup
; (A. ((x) (A. ((y)
;   (Is_true (abst_equal (abst_plus x y)
;                        (abst_plus (abst_inf x y) (abst_sup x y))))))))

; $def abst_order_inf (x y) (abst_equal x (abst_inf x y))
; $def abst_order_sup (x y) (abst_equal x (abst_sup x y))
