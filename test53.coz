; file: species_general_additive_law.foc
; species: partially_ordered_additive_monoid
; property: sup_idempotent / __goal_11

    (* to be proved *)
(Is_true ((abst_equal (abst_plus y x ) (abst_plus y (abst_sup x y ) ) ))
)
By
  abst_equal_transitive: (x: abst_T) (y: abst_T) (z: abst_T)
  ((Is_true ((abst_equal  x y)) ))-> 
    ((Is_true ((abst_equal  y z)) ))-> 
      (Is_true ((abst_equal  x z)) )
  abst_plus_is_left_congruence: (x: abst_T) (y: abst_T) (z: abst_T)
  ((Is_true ((abst_equal  x y)) ))-> 
    (Is_true ((abst_equal  (abst_plus  x z) (abst_plus  y z))) )
  __lemma_1_1_2: (Is_true ((abst_equal (abst_inf x y ) y )) ) __lemma_1_1_1:
  (Is_true
  ((abst_equal (abst_plus y x ) (abst_plus (abst_inf x y ) (abst_sup x y ) )
   ))
  )
By def 
(* Qed *).
