#!/bin/sh

#**********************************************************************#
#                                                                      #
#                        FoCaLize compiler                             #
#                                                                      #
#            François Pessaux                                          #
#            Pierre Weis                                               #
#            Damien Doligez                                            #
#                                                                      #
#                               LIP6  --  INRIA Rocquencourt           #
#                                                                      #
#  Copyright 2008 INRIA                                                #
#  Distributed only by permission.                                     #
#                                                                      #
#**********************************************************************#

# $Id: configure,v 1.51 2009-01-16 12:39:10 weis Exp $

# Fix the name and version of the software
PROJECT_NAME=zenon
MAIN_VERSION_NUMBER=0
SUB_VERSION_NUMBER=6
PATCH_VERSION_NUMBER=2
FULL_VERSION_NUMBER=${MAIN_VERSION_NUMBER}.${SUB_VERSION_NUMBER}.${PATCH_VERSION_NUMBER}
FULL_PROJECT_NAME=${PROJECT_NAME}-${FULL_VERSION_NUMBER}

# The list of internal tools for the project.
# (Also defined in ./Makefile.config if any.)
INTERNAL_TOOLS=""

# The absolute path of this set of source files.
ABSOLUTE_ROOT_DIR=`pwd`

# Checking if a string is a valid command name.
check () {
  type "$1" >/dev/null 2>&1
}

# Default settings.

#
# Finding acceptable defaults for various unusual commands
#
set_sum_default () {
  for i in sum md5 md5sum md5deep sha1deep sha256deep; do
    if check $i; then DEFAULT_SUM=$i; break; fi
  done
}

set_convert_default () {
  for i in convert; do
    if check $i; then DEFAULT_CONVERT=$i; break; fi
  done
}

set_gs_default () {
  for i in gs; do
    if check $i; then DEFAULT_GS=$i; break; fi
  done
}

set_xmlrpc_default () {
  for i in xmlrpc; do
    if check $i; then DEFAULT_XMLRPC=$i; break; fi
  done
}

set_command_defaults () {
  set_sum_default;
  set_convert_default;
  set_gs_default;
  set_xmlrpc_default;
}

#
# Defining all default variables
#

# The two root variables of the configuration are
# $(PREFIX) and $(SHARE_PREFIX).
#
# $(PREFIX) defines the root directory for the project installation after its
# proper configuration and compilation.
# This directory will contain
# - $(PREFIX)/bin for installation of the project binaries,
# - $(PREFIX)/lib for installation of the project library files,
# - $(PREFIX)/man for installation of the project manual pages,
# - $(PREFIX)/doc for installation of the project documentation.
#
# $(SHARE_PREFIX) defines the root directory for the installation of private
# versions of external tools, if necessary.
# This directory will contain
# - $(SHARE_PREFIX)/bin for installation of the project external tools binaries,
# - $(SHARE_PREFIX)/lib for installation of the project external tools library files,
# - $(SHARE_PREFIX)/man for installation of the project external tools manual pages,
# - $(SHARE_PREFIX)/doc for installation of the project external tools documentation.

# Default variable assigment

# Variable assigment

# Variables are divided into 3 groups:
# - intrinsic defaults, which are string constants,
# - prefix defaults, that depend on ${DEFAULT_PREFIX},
# - share prefix, that depend on ${DEFAULT_SHARE_PREFIX}.
#
# For those groups we define a procedure that sets the defaults,
# and a procedure that sets the variables after options have been processed.
#
# Then procedure set_defaults is called before parsing options, and
# set_variables is called after parsing options.

# Defining intrinsic defaults (default values for default values!).
set_intrinsic_defaults () {

  # Intrinsic defaults for the project.

  # Do we use debug mode ?
  DEFAULT_DEBUG=true

  # Intrinsic defaults for the project installation.
  DEFAULT_PREFIX="/usr/local"
  # Do we add the 'share' sub directory to ${SHARE_PREFIX} for the project ?
  DEFAULT_USE_SHARE_SUB_DIRECTORY=false
  # Do we use a 'full project name' private sub directory ${SHARE_PREFIX} for the project ?
  DEFAULT_USE_PROJECT_SUB_DIRECTORY=false

  # External tools
  # Do we use statically known external tools ?
  DEFAULT_STATIC_EXTERNAL=false
  # Do we make external tools ?
  DEFAULT_MAKE_EXTERNAL=false
  DEFAULT_MAGIC_MAKE_EXTERNAL=false

  # Intrinsic defaults for Caml
  DEFAULT_BYT_DEBUG_FLAGS="-g -dtypes"
  DEFAULT_BIN_DEBUG_FLAGS="-dtypes"

  # Intrinsic defaults for Coq.
  DEFAULT_COQ_RC="$HOME/.coqrc"
  DEFAULT_COQ_MAKE="gmake"

  # Intrinsic defaults for Zenon.
  DEFAULT_USE_COQ_COMPILER=false
  DEFAULT_SUM=:
  DEFAULT_CONVERT=:
  DEFAULT_GS=:

  # Intrinsic defaults for Zvtov.
  DEFAULT_USE_XMLRPC=false
  DEFAULT_XMLRPC=:
  DEFAULT_XMLRPC_MODULE="xmlrpc"
  DEFAULT_XMLRPC_FLAGS=""
  DEFAULT_XMLRPC_LINK=""

}

# Setting intrinsic values.
set_intrinsic () {

  # Intrinsic settings for the project.

  if test -z ${DEBUG}; then DEBUG=${DEFAULT_DEBUG}; fi

  # Intrinsic settings for the project installation.
  if test -z ${PREFIX}; then PREFIX=${DEFAULT_PREFIX}; fi
  if test -z "${USE_SHARE_SUB_DIRECTORY}"; then
    USE_SHARE_SUB_DIRECTORY="${DEFAULT_USE_SHARE_SUB_DIRECTORY}"; fi
  if test -z "${USE_PROJECT_SUB_DIRECTORY}"; then
    USE_PROJECT_SUB_DIRECTORY="${DEFAULT_USE_PROJECT_SUB_DIRECTORY}"; fi

  # External tools
  if test -z "${STATIC_EXTERNAL}"; then
    STATIC_EXTERNAL="${DEFAULT_STATIC_EXTERNAL}"; fi
  if test -z "${MAKE_EXTERNAL}"; then
    MAKE_EXTERNAL="${DEFAULT_MAKE_EXTERNAL}"; fi
  if test -z "${MAGIC_MAKE_EXTERNAL}"; then
    MAGIC_MAKE_EXTERNAL="${DEFAULT_MAGIC_MAKE_EXTERNAL}"; fi

  # Intrinsic settings for Caml.
  if test -z "${BYT_DEBUG_FLAGS}"; then
    BYT_DEBUG_FLAGS="${DEFAULT_BYT_DEBUG_FLAGS}"; fi
  if test -z "${BIN_DEBUG_FLAGS}"; then
    BIN_DEBUG_FLAGS="${DEFAULT_BIN_DEBUG_FLAGS}"; fi

  # Intrinsic settings for Coq.
  if test -z "${COQ_RC}"; then COQ_RC="${DEFAULT_COQ_RC}"; fi

  # Setting coq make command.
  if test -z "${COQ_MAKE}"; then
    # To compile Coq, prefer gmake, if GNU make is available with that name.
    if check "${DEFAULT_COQ_MAKE}"; then COQ_MAKE="${DEFAULT_COQ_MAKE}";
    # Otherwise, use make (which is GNU make anyway on
    # boxes with GNU make as default!).
    else COQ_MAKE="make";
    fi
  fi

  # Intrinsic settings for Zenon.
  if test -z "${USE_COQ_COMPILER}"; then USE_COQ_COMPILER="${DEFAULT_USE_COQ_COMPILER}"; fi
  if test -z "${SUM}"; then SUM="${DEFAULT_SUM}"; else
    if check "${SUM}"; then :; else
      abort_configuration "unavailable command ${SUM}.";
      abort_remedy "Choose an executable check sum command."
    fi
  fi
  if test -z "${CONVERT}"; then CONVERT="${DEFAULT_CONVERT}"; else
    if check "${CONVERT}"; then :; else
      abort_configuration "unavailable command ${CONVERT}.";
      abort_remedy "Choose an executable convert command."
    fi
  fi
  if test -z "${GS}"; then GS="${DEFAULT_GS}"; else
    if check ${GS}; then :; else
      abort_configuration "unavailable command ${GS}.";
      abort_remedy "Choose an executable gs command."
    fi
  fi

  # Intrinsic settings for Zvtov.
  if test -z "$USE_XMLRPC"; then USE_XMLRPC=${DEFAULT_USE_XMLRPC}; fi
  if test -z "${XMLRPC}"; then XMLRPC="${DEFAULT_XMLRPC}"; else
    if check "${XMLRPC}"; then :; else
      abort_configuration "unavailable command ${XMLRPC}.";
      abort_remedy "Choose an executable xmlrpc command."
    fi
  fi

  if ${USE_XMLRPC}; then
    # Check_XMLRPC;
    if check "${XMLRPC}"; then :; else
      abort_configuration "unavailable command ${XMLRPC}.";
      abort_remedy "Choose an executable xmlrpc command."
    fi
    # set_XMLRPC_MODULE;
    if ${USE_XMLRPC}; then
      if test -z "${XMLRPC_MODULE}"; then XMLRPC_MODULE="${DEFAULT_XMLRPC_MODULE}"; fi
    fi
    # set_XMLRPC_FLAGS;
    if test -z "$XMLRPC_FLAGS"; then
      if check "ocamlfind"; then
        XMLRPC_FLAGS="`ocamlfind query -r -i-format xmlrpc | tr '\012' ' '`"
      else
        XMLRPC_FLAGS="${DEFAULT_XMLRPC_FLAGS}"
      fi
    fi
    # set_XMLRPC_LINK;
    if test -z "$XMLRPC_LINK"; then
      if check "ocamlfind"; then
        XMLRPC_LINK="`ocamlfind query -r -predicates byte -a-format xmlrpc | tr '\012' ' '`"
      else
        XMLRPC_LINK="${DEFAULT_XMLRPC_LINK}"
      fi
    fi
  fi

}

# Setting (or defining) variables that depend upon ${DEFAULT_PREFIX}.
set_prefix_defaults () {

  DEFAULT_BIN_DIR="${DEFAULT_PREFIX}/bin"
  DEFAULT_LIB_DIR="${DEFAULT_PREFIX}/lib"
  DEFAULT_MAN_DIR="${DEFAULT_PREFIX}/man"
  DEFAULT_DOC_DIR="${DEFAULT_PREFIX}/doc"

}

# Setting variables that depend upon $PREFIX.
set_prefix () {

  if test -z "${PREFIX}"; then PREFIX="${DEFAULT_PREFIX}"; fi

  if test -z "${BIN_DIR}"; then BIN_DIR="${PREFIX}/bin"; fi
  if test -z "${LIB_DIR}"; then LIB_DIR="${PREFIX}/lib"; fi
  if test -z "${MAN_DIR}"; then MAN_DIR="${PREFIX}/man"; fi
  if test -z "${DOC_DIR}"; then DOC_DIR="${PREFIX}/doc"; fi

}

# Setting (or defining) variables that depend upon ${DEFAULT_SHARE_PREFIX}.
set_share_prefix_defaults () {

  # General defaults for the installation of the external tools of the project.
  # Normal setting is:
  # DEFAULT_SHARE_PREFIX="${DEFAULT_PREFIX}/share"
  # For Zenon the DEFAULT_SHARE_PREFIX should be the DEFAULT_PREFIX.
  if ${DEFAULT_USE_SHARE_SUB_DIRECTORY}; then
    DEFAULT_SHARE_PREFIX="${DEFAULT_PREFIX}/share"
  else
    DEFAULT_SHARE_PREFIX="${DEFAULT_PREFIX}"
  fi

  # The normal default binding is
  # DEFAULT_SHARE_PROJECT_DIR="${DEFAULT_SHARE_PREFIX}/${FULL_PROJECT_NAME}"
  # For traditional projects (e.g. zenon), there is no FULL_PROJECT_NAME sub directory,
  # we directly use the DEFAULT_SHARE_PREFIX.
  if ${DEFAULT_USE_PROJECT_SUB_DIRECTORY}; then
    DEFAULT_SHARE_PROJECT_DIR="${DEFAULT_SHARE_PREFIX}/${FULL_PROJECT_NAME}"
  else
    DEFAULT_SHARE_PROJECT_DIR="${DEFAULT_SHARE_PREFIX}"
  fi

  DEFAULT_SHARE_PROJECT_BIN_DIR="${DEFAULT_SHARE_PROJECT_DIR}/bin"
  DEFAULT_SHARE_PROJECT_LIB_DIR="${DEFAULT_SHARE_PROJECT_DIR}/lib"
  DEFAULT_SHARE_PROJECT_MAN_DIR="${DEFAULT_SHARE_PROJECT_DIR}/man"
  DEFAULT_SHARE_PROJECT_DOC_DIR="${DEFAULT_SHARE_PROJECT_DIR}/doc"

  # Defaults for Caml.
  DEFAULT_CAML_LIB_DIR="${DEFAULT_SHARE_PROJECT_LIB_DIR}/ocaml"
  DEFAULT_CAML_BIN_DIR="${DEFAULT_SHARE_PROJECT_BIN_DIR}"

  # The normal default binding for Caml command "com" is normally
  # "${DEFAULT_CAML_BIN_DIR}/com".
  # For traditional projects (e.g. zenon), there is no reasonable
  # value for ${DEFAULT_CAML_BIN_DIR} defined: we thus directly use
  # "com" as default.
  if ${DEFAULT_STATIC_EXTERNAL}; then
    DEFAULT_CAML_BYT_COMPILER="${DEFAULT_CAML_BIN_DIR}/ocamlc"
    DEFAULT_CAML_BIN_COMPILER="${DEFAULT_CAML_BIN_DIR}/ocamlopt"
    DEFAULT_CAML_YAC_COMPILER="${DEFAULT_CAML_BIN_DIR}/ocamlyacc"
    DEFAULT_CAML_LEX_COMPILER="${DEFAULT_CAML_BIN_DIR}/ocamllex"
    DEFAULT_CAML_DEP_COMPILER="${DEFAULT_CAML_BIN_DIR}/ocamldep"
    DEFAULT_CAML_DOC_COMPILER="${DEFAULT_CAML_BIN_DIR}/ocamldoc"
  else
    DEFAULT_CAML_BYT_COMPILER="ocamlc"
    DEFAULT_CAML_BIN_COMPILER="ocamlopt"
    DEFAULT_CAML_LEX_COMPILER="ocamllex"
    DEFAULT_CAML_YAC_COMPILER="ocamlyacc"
    DEFAULT_CAML_DEP_COMPILER="ocamldep"
    DEFAULT_CAML_DOC_COMPILER="ocamldoc"
  fi

  # Default for Camlp5
  DEFAULT_CAMLP5_LIB_DIR="${DEFAULT_CAML_LIB_DIR}/camlp5"

  # Defaults for Coq.
  DEFAULT_COQ_LIB_DIR="${DEFAULT_SHARE_PROJECT_LIB_DIR}/coq"
  DEFAULT_COQ_CAML_DIR="${DEFAULT_CAML_BIN_DIR}"

  # The normal default binding for coqc is
  # DEFAULT_COQ_COMPILER="${DEFAULT_SHARE_PROJECT_BIN_DIR}/coqc"
  # For traditional projects (e.g. zenon), there is no reasonable value for
  # ${DEFAULT_SHARE_PROJECT_BIN_DIR} defined: we thus directly use
  # "coqc" as default.
  if ${DEFAULT_STATIC_EXTERNAL}; then
    DEFAULT_COQ_COMPILER="${DEFAULT_SHARE_PROJECT_BIN_DIR}/coqc"
    DEFAULT_COQ_DEP_COMPILER="${DEFAULT_SHARE_PROJECT_BIN_DIR}/coqdep"
  else
    DEFAULT_COQ_COMPILER="coqc"
    DEFAULT_COQ_DEP_COMPILER="coqdep"
  fi

  # Defaults for Zenon.
  DEFAULT_ZENON_LIB_DIR="${DEFAULT_SHARE_PROJECT_LIB_DIR}/zenon"

  if ${DEFAULT_STATIC_EXTERNAL}; then
    DEFAULT_ZENON_COMPILER="${DEFAULT_SHARE_PROJECT_BIN_DIR}/zenon"
  else
    DEFAULT_ZENON_COMPILER="zenon"
  fi

  # Defaults for Zvtov.
  DEFAULT_ZVTOV_LIB_DIR="${DEFAULT_SHARE_PROJECT_LIB_DIR}/zvtov"

  if ${DEFAULT_STATIC_EXTERNAL}; then
    DEFAULT_ZVTOV_COMPILER="${DEFAULT_SHARE_PROJECT_BIN_DIR}/zvtov"
  else
    DEFAULT_ZVTOV_COMPILER="zvtov"
  fi

}

# Setting variables that depend upon ${SHARE_PREFIX}.
set_share_prefix () {

  if test -z "${SHARE_PREFIX}"; then
    SHARE_PREFIX="${DEFAULT_SHARE_PREFIX}"
  fi

  # The normal setting is:
  # SHARE_PROJECT_DIR="${SHARE_PREFIX}/${FULL_PROJECT_NAME}"
  # For traditional project (e.g. zenon) there is no ${FULL_PROJECT_NAME}
  # sub directory, and SHARE_PROJECT_DIR is just ${SHARE_PREFIX}.
  # SHARE_PROJECT_DIR="${SHARE_PREFIX}/${FULL_PROJECT_NAME}"
  if ${USE_PROJECT_SUB_DIRECTORY}; then
    SHARE_PROJECT_DIR="${SHARE_PREFIX}/${FULL_PROJECT_NAME}"
  else
    SHARE_PROJECT_DIR="${SHARE_PREFIX}"
  fi

  # The list of directories that must be installable during configuration.
  # The normal setting is:
  # CONFIGURATION_INSTALLABLE_DIRS="${SHARE_PROJECT_DIR)"
  if ${MAKE_EXTERNAL}; then
    CONFIGURATION_INSTALLABLE_DIRS="${SHARE_PROJECT_DIR}"
  else
    CONFIGURATION_INSTALLABLE_DIRS=""
  fi

  SHARE_PROJECT_BIN_DIR="${SHARE_PROJECT_DIR}/bin"
  SHARE_PROJECT_LIB_DIR="${SHARE_PROJECT_DIR}/lib"
  SHARE_PROJECT_MAN_DIR="${SHARE_PROJECT_DIR}/man"
  SHARE_PROJECT_DOC_DIR="${SHARE_PROJECT_DIR}/doc"

  # Settings for Caml.
  if test -z "${CAML_LIB_DIR}"; then
    CAML_LIB_DIR="${SHARE_PROJECT_LIB_DIR}/ocaml"; fi
  if test -z "${CAML_BIN_DIR}"; then
    # If CAML_BIN_DIR HAS NOT been set, then the associated commands,
    # get bound to their defaults, unless those commands have already
    # been explicitely set otherwise.
    CAML_BIN_DIR="${SHARE_PROJECT_BIN_DIR}";
    if ${STATIC_EXTERNAL}; then
      CAML_BYT_COMPILER="${CAML_BIN_DIR}/ocamlc"
      CAML_BIN_COMPILER="${CAML_BIN_DIR}/ocamlopt"
      CAML_YAC_COMPILER="${CAML_BIN_DIR}/ocamlyacc"
      CAML_LEX_COMPILER="${CAML_BIN_DIR}/ocamllex"
      CAML_DEP_COMPILER="${CAML_BIN_DIR}/ocamldep"
      CAML_DOC_COMPILER="${CAML_BIN_DIR}/ocamldoc"
    else
      CAML_BYT_COMPILER="ocamlc"
      CAML_BIN_COMPILER="ocamlopt"
      CAML_LEX_COMPILER="ocamllex"
      CAML_YAC_COMPILER="ocamlyacc"
      CAML_DEP_COMPILER="ocamldep"
      CAML_DOC_COMPILER="ocamldoc"
    fi
  else
    # If CAML_BIN_DIR HAS been set, then it implies the value of
    # associated commands, unless those commands have already
    # been explicitely set otherwise.
    if ${STATIC_EXTERNAL}; then
      if test -z "${CAML_BYT_COMPILER}"; then
      CAML_BYT_COMPILER="${CAML_BIN_DIR}/ocamlc"; fi
      if test -z "${CAML_BIN_COMPILER}"; then
      CAML_BIN_COMPILER="${CAML_BIN_DIR}/ocamlopt"; fi
      if test -z "${CAML_LEX_COMPILER}"; then
      CAML_LEX_COMPILER="${CAML_BIN_DIR}/ocamllex"; fi
      if test -z "${CAML_YAC_COMPILER}"; then
      CAML_YAC_COMPILER="${CAML_BIN_DIR}/ocamlyacc"; fi
      if test -z "${CAML_DEP_COMPILER}"; then
      CAML_DEP_COMPILER="${CAML_BIN_DIR}/ocamldep"; fi
      if test -z "${CAML_DOC_COMPILER}"; then
      CAML_DOC_COMPILER="${CAML_BIN_DIR}/ocamldoc"; fi
    else
      abort_configuration "Cannot use option caml_bin_dir when not in static_external mode.";
      abort_remedy "Choose static_external mode or remove caml_bin_dir option."
    fi
  fi

  # Settings for Camlp5
  if test -z "${CAMLP5_LIB_DIR}"; then
  CAMLP5_LIB_DIR="${CAML_LIB_DIR}/camlp5"; fi

  # Settings for Coq.
  if test -z "${COQ_LIB_DIR}"; then
  COQ_LIB_DIR="${SHARE_PROJECT_LIB_DIR}/coq"; fi
  if test -z "${COQ_CAML_DIR}"; then
  COQ_CAML_DIR="${CAML_BIN_DIR}"; fi

  if test -z "${COQ_COMPILER}"; then
  COQ_COMPILER="${SHARE_PROJECT_BIN_DIR}/coqc"; fi
  if test -z "${COQ_DEP_COMPILER}"; then
  COQ_DEP_COMPILER="${SHARE_PROJECT_BIN_DIR}/coqdep"; fi

  # Settings for Zenon.
  if test -z "${ZENON_LIB_DIR}"; then
  ZENON_LIB_DIR="${SHARE_PROJECT_LIB_DIR}/zenon"; fi

  if test -z "${ZENON_COMPILER}"; then
  ZENON_COMPILER="${SHARE_PROJECT_BIN_DIR}/zenon"; fi

  # Settings for Zvtov.
  if test -z "${ZVTOV_LIB_DIR}"; then
  ZVTOV_LIB_DIR="${SHARE_PROJECT_LIB_DIR}/zvtov"; fi

  if test -z "${ZVTOV_COMPILER}"; then
  ZVTOV_COMPILER="${SHARE_PROJECT_BIN_DIR}/zvtov"; fi

}

# Setting all variables defaults
set_defaults () {
  set_intrinsic_defaults;
  set_command_defaults;
  set_prefix_defaults;
  set_share_prefix_defaults;
}

# Setting all variables after option parsing has been completed.
set_variables () {
  set_intrinsic;
  set_prefix;
  set_share_prefix;
}

#
# Generic aborting procedures.
#

BOLD_TAG="\033[1m"
UNDERLINE_TAG="\033[4m"
NORMAL_TAG="\033[0m"

abort_configuration () {
  echo >&2
  echo "./configure: " $BOLD_TAG"ABORTING CONFIGURATION!"$NORMAL_TAG  >&2
  echo >&2
  echo "$1" >&2
}

abort_remedy () {
  echo >&2
  echo "$1" >&2
  echo "(See configure -help for details)." >&2
  exit 1;
}

abort_configuration_not_writable_share_prefix_directory () {
  abort_configuration \
    "You cannot install external tools in the directory $1: it is not writable for you.";
  abort_remedy \
    "Please, use configure with the \"-share_prefix\" option set to a writable directory.";
}


#
# Beginning execution.
#

# Setting default values (for help in particular).
# Hence, this must be done before parsing the command line arguments.
set_defaults

#
# Parsing arguments
#
while : ; do
  case $# in 0) break;; esac

  case "$1" in
    # Software specific options
    -share_prefix | --share_prefix | -share_project_prefix | --share_project_prefix)
      SHARE_PREFIX="$2"; shift 2;;
    -prefix | --prefix) PREFIX="$2"; shift 2;;
    -bindir | --bindir) BIN_DIR="$2"; shift 2;;
    -libdir | --libdir) LIB_DIR="$2"; shift 2;;
    -docdir | --docdir) DOC_DIR="$2"; shift 2;;
    -mandir | --mandir) MAN_DIR="$2"; shift 2;;
    # Caml options
    -caml_lib_dir | --caml_lib_dir) CAML_LIB_DIR="$2"; shift 2;;
    -caml_bin_dir | --caml_bin_dir) CAML_BIN_DIR="$2"; shift 2;;
    -caml_byt_compiler | --caml_byt_compiler) CAML_BYT_COMPILER="$2"; shift 2;;
    -caml_bin_compiler | --caml_bin_compiler) CAML_BIN_COMPILER="$2"; shift 2;;
    -caml_lex_compiler | --caml_lex_compiler) CAML_LEX_COMPILER="$2"; shift 2;;
    -caml_yac_compiler | --caml_yac_compiler) CAML_YAC_COMPILER="$2"; shift 2;;
    -caml_dep_compiler | --caml_dep_compiler) CAML_DEP_COMPILER="$2"; shift 2;;
    -caml_doc_compiler | --caml_doc_compiler) CAML_DOC_COMPILER="$2"; shift 2;;
    # Coq options
    -coq_lib_dir | --coq_lib_dir) COQ_LIB_DIR="$2"; shift 2;;
    -coq_compiler | --coq_compiler) COQ_COMPILER="$2"; shift 2;;
    -coq_dep_compiler | --coq_dep_compiler) COQ_DEP_COMPILER="$2"; shift 2;;
    -coq_rc | --coq_rc) COQ_RC="$2"; shift 2;;
    -coq_make | --coq_make) COQ_MAKE="$2"; shift 2;;
    # Zenon options
    -zenon_compiler | --zenon_compiler) ZENON_COMPILER="$2"; shift 2;;
    -zenon_lib_dir | --zenon_lib_dir) ZENON_LIB_DIR="$2"; shift 2;;
    -use_coq_compiler | --use_coq_compiler) USE_COQ_COMPILER="$2"; shift 2;;
    -sum | --sum) SUM="$2"; shift 2;;
    -convert | --convert) CONVERT="$2"; shift 2;;
    -gs | --gs) GS="$2"; shift 2;;
    # Zvtov options
    -zvtov_compiler | --zvtov_compiler) ZVTOV_COMPILER="$2"; shift 2;;
    -use_xmlrpc | --use_xmlrpc) USE_XMLRPC="$2"; shift 2;;
    -xmlrpc | --xmlrpc) XMLRPC="$2"; shift 2;;
    -xmlrpc_flags | --xmlrpc_flags) XMLRPC_FLAGS="$2"; shift 2;;
    -xmlrpc_link | --xmlrpc_link) XMLRPC_LINK="$2"; shift 2;;
    # Configure script specific options
    -no_make_external | --no_make_external) MAKE_EXTERNAL=false; shift;;
    -magic_make_external | --magic_make_external) MAGIC_MAKE_EXTERNAL=true; shift;;
    -static_external | --static_external) STATIC_EXTERNAL=$2; shift 2;;
    -use_share_sub_directory | --use_share_sub_directory)
     USE_SHARE_SUB_DIRECTORY=$2; shift 2;;
    -use_project_sub_directory | --use_project_sub_directory)
     USE_PROJECT_SUB_DIRECTORY=$2; shift 2;;
    # Generic options
    -debug | --debug) DEBUG=$2; shift 2;;
    -enable_debug | --enable_debug) DEBUG=true; shift;;
    -nodebug | --nodebug | -disable_debug | --disable_debug)
     DEBUG=false; shift;;
    -help | --help)
       echo "usage: ./configure [options] [<directory>]"
       echo
       echo "if optional argument <directory> is provided, it is used as the"
       echo "[-prefix] option argument (see below)."
       echo
       echo "general options are:"
       echo
       echo "  [-]-prefix <directory>"
       echo "    set <directory> as the directory prefix for installation of ${PROJECT_NAME}."
       echo "    (Default value for <directory> is ${DEFAULT_PREFIX}.)"
       echo "  [-]-bindir <directory>"
       echo "    set <directory> as the binary directory for installation of binaries for ${PROJECT_NAME}."
       echo "    (Default value for <directory> is ${DEFAULT_BIN_DIR}.)"
       echo "  [-]-libdir <directory>"
       echo "    set <directory> as the library directory for installation of libraries for ${PROJECT_NAME}."
       echo "    (Default value for <directory> is ${DEFAULT_LIB_DIR}.)"
       echo "  [-]-docdir <directory>"
       echo "    set <directory> as the directory for installation of documentation for ${PROJECT_NAME}."
       echo "    (Default value for <directory> is ${DEFAULT_DOC_DIR}.)"
       echo "  [-]-mandir <directory>"
       echo "    set <directory> as the directory for installation of man pages for ${PROJECT_NAME}."
       echo "    (Default value for <directory> is ${DEFAULT_MAN_DIR}.)"
       echo "  [-]-share_prefix <directory>"
       echo "    set <directory> as the directory prefix for the installation of external tools."
       echo "    External tools are mandatory for ${PROJECT_NAME} to work,"
       echo "    and must be built and installed during the configuration phase,"
       echo "    since they are needed to correctly compile, install, and safely use"
       echo "    ${PROJECT_NAME}."
       echo "    External tools install in the directory <directory>/${FULL_PROJECT_NAME}/,"
       echo "    once they have ben built."
       echo "    As a consequence, you must have the permission to install directories"
       echo "    and files in <directory> to properly configure ${PROJECT_NAME}."
       echo "    (Default value for <directory> is ${DEFAULT_SHARE_PREFIX}.)"
       echo "  [-]-debug | [-]-enable_debug"
       echo "    enable debugging"
       echo "  [-]-nodebug | [-]-disable_debug"
       echo "    disable debugging"
       echo "  [-]-help";
       echo "    display help and exit"
       echo
       echo "options specific to Zenon are:"
       echo
       echo "  [-]-zenon_compiler <executable-file>"
       echo "    set absolute path for the command zenon."
       echo "  [-]-zenon_lib_dir <directory>"
       echo "    set absolute path for the Zenon libraries."
       echo "  [-]-use_coq_compiler <boolean>"
       echo "    set if the coq compiler must be used to verify the proofs given by zenon."
       echo "  [-]-convert <executable-file>"
       echo "    set absolute path for the command convert."
       echo "  [-]-gs <executable-file>"
       echo "    set absolute path for the command gs."
       echo "  [-]-sum <executable-file>"
       echo "    set absolute path for the check-sum command."
       echo
       echo "options specific to Zvtov are:"
       echo
       echo "  [-]-zvtov_compiler <executable-file>"
       echo "    set absolute path for the command zvtov."
       echo "  [-]-use_xmlrpc <boolean>";
       echo "    set if xmlrpc must be used by zvtov."
       echo "  [-]-xmlrpc <executable-file>";
       echo "    set absolute path for the command xmlrpc."
       echo "  [-]-xmlrpc_flags <string>";
       echo "    set the string option argument to pass to xmlrpc invocations."
       echo "  (Default value for <string> is:";
       echo "   \"\`ocamlfind query -r -i-format xmlrpc | tr '\\\\012' ' '\`\").";
       echo "  [-]-xmlrpc_link <string>";
       echo "    set the link options to pass when linking xmlrpc.";
       echo "  (Default value for <string> is:";
       echo "   \"\`ocamlfind query -r -predicates byte -a-format xmlrpc | tr '\\\\012' ' '\`\").";
       echo
       echo "options specific to Caml are:"
       echo
       echo "  [-]-caml_lib_dir <directory>"
       echo "    set absolute path for the Caml libraries."
       echo "  [-]-caml_byt_compiler <executable-file>"
       echo "    set absolute path for the Caml byte code compiler."
       echo "  [-]-caml_bin_compiler <executable-file>"
       echo "    set absolute path for the Caml binary compiler."
       echo "  [-]-caml_lex_compiler <executable-file>"
       echo "    set absolute path for the Caml Lex compiler."
       echo "  [-]-caml_yac_compiler <executable-file>"
       echo "    set absolute path for the Caml Yacc compiler."
       echo "  [-]-caml_dep_compiler <executable-file>"
       echo "    set absolute path for the Caml automatic dependency manager."
       echo "  [-]-caml_doc_compiler <executable-file>"
       echo "    set absolute path for the Caml automatic documentation generator."
       echo
       echo "options specific to Coq are:"
       echo
       echo "  [-]-coq_lib_dir <directory>"
       echo "    set absolute path for the Coq library."
       echo "  [-]-coq_compiler <executable-file>"
       echo "    set absolute path for the Coq compiler."
       echo "  [-]-coq_dep_compiler <executable-file>"
       echo "    set absolute path for the Coq automatic dependency manager."
       echo "  [-]-coq_rc <file>"
       echo "    set absolute path for the file coqrc, the startup file for Coq."
       echo
       echo "options specific to this configuration script shell:"
       echo
       echo "  [-]-static_external_commands <boolean>"
       echo "    use fixed path for external commands."
#       echo "  [-]-use_share_sub_directory <boolean>"
#       echo "    use share as a sub directory for the"
#       echo "    installation of project specific data (including external tools)."
#       echo "  [-]-use_project_sub_directory <boolean>"
#       echo "    use the name of the project as private sub directory for"
#       echo "    installation of project specific data (including external tools)."
       echo "  [-]-no_make_external"
       echo "    <non documented option>."
       echo "  [-]-magic_make_external"
       echo "    <unknown option>."
       exit 0
       ;;

    -*)
       echo "./configure: bad option '$1'" >&2
       echo "For help, use ./configure -help" >&2
       exit 2
       ;;

    *)
       case $# in
         1) PREFIX="$1"; shift;;
         *)
           echo "./configure: bad arguments '$@'" >&2
           echo "For help, use ./configure -help" >&2
           exit 2
           ;;
       esac
       ;;
  esac
done

#
# Validity checking for installation of external tools.
#
check_installation_dirs () {
  # Check directories that must be configuration time installable (hence writable).
  for i in ${CONFIGURATION_INSTALLABLE_DIRS}; do
    echo "Checking if we can install external tools in $i..." >&2
    if test -d $i; then echo "  the directory exists: good." >&2
      else
        echo "  the directory does not exist: unrecoverable failure." >&2
        abort_configuration \
          "You cannot install in $i, because it is not a directory.";
        abort_remedy \
          "Please, create a directory where you can install files and directories.";
    fi
    if test -w $i; then echo "  the directory is writable: good." >&2
      else
        echo "  the directory is not writable: unrecoverable failure." >&2
        abort_configuration_not_writable_share_prefix_directory "$i";
    fi
    if (touch $i/$$; rm -f $i/$$); then echo "  you can install in the directory: good." >&2
      else
        echo "  you cannot install in the directory: unrecoverable failure." >&2
        abort_configuration_not_writable_share_prefix_directory "$i";
    fi
  done
}

#
# Editing ./.config_var.in with what we learnt here.
#
build_config_file () {
  sed -e "s,@PROJECT_NAME@,$PROJECT_NAME," \
      -e "s,@DEBUG@,$DEBUG," \
      -e "s,@MAIN_VERSION_NUMBER@,$MAIN_VERSION_NUMBER," \
      -e "s,@SUB_VERSION_NUMBER@,$SUB_VERSION_NUMBER," \
      -e "s,@PATCH_VERSION_NUMBER@,$PATCH_VERSION_NUMBER," \
      -e "s,@FULL_VERSION_NUMBER@,$FULL_VERSION_NUMBER," \
      -e "s,@FULL_PROJECT_NAME@,$FULL_PROJECT_NAME," \
      -e "s,@INTERNAL_TOOLS@,$INTERNAL_TOOLS," \
  \
      -e "s,@ABSOLUTE_ROOT_DIR@,$ABSOLUTE_ROOT_DIR," \
      -e "s,@PREFIX@,$PREFIX," \
      -e "s,@BIN_DIR@,$BIN_DIR," \
      -e "s,@LIB_DIR@,$LIB_DIR," \
      -e "s,@DOC_DIR@,$DOC_DIR," \
      -e "s,@MAN_DIR@,$MAN_DIR," \
  \
      -e "s,@STATIC_EXTERNAL@,$STATIC_EXTERNAL," \
      -e "s,@SHARE_PREFIX@,$SHARE_PREFIX," \
      -e "s,@SHARE_PROJECT_DIR@,$SHARE_PROJECT_DIR," \
      -e "s,@SHARE_PROJECT_BIN_DIR@,$SHARE_PROJECT_BIN_DIR," \
      -e "s,@SHARE_PROJECT_LIB_DIR@,$SHARE_PROJECT_LIB_DIR," \
      -e "s,@SHARE_PROJECT_DOC_DIR@,$SHARE_PROJECT_DOC_DIR," \
      -e "s,@SHARE_PROJECT_MAN_DIR@,$SHARE_PROJECT_MAN_DIR," \
  \
      -e "s,@CAML_BIN_DIR@,$CAML_BIN_DIR," \
      -e "s,@CAML_LIB_DIR@,$CAML_LIB_DIR," \
      -e "s,@CAML_BYT_COMPILER@,$CAML_BYT_COMPILER," \
      -e "s,@CAML_BIN_COMPILER@,$CAML_BIN_COMPILER," \
      -e "s,@CAML_LEX_COMPILER@,$CAML_LEX_COMPILER," \
      -e "s,@CAML_YAC_COMPILER@,$CAML_YAC_COMPILER," \
      -e "s,@CAML_DEP_COMPILER@,$CAML_DEP_COMPILER," \
      -e "s,@CAML_DOC_COMPILER@,$CAML_DOC_COMPILER," \
      -e "s,@BYT_DEBUG_FLAGS@,$BYT_DEBUG_FLAGS," \
      -e "s,@BIN_DEBUG_FLAGS@,$BIN_DEBUG_FLAGS," \
  \
      -e "s,@CAMLP5_LIB_DIR@,$CAMLP5_LIB_DIR," \
  \
      -e "s,@COQ_LIB_DIR@,$COQ_LIB_DIR," \
      -e "s,@COQ_CAML_DIR@,$COQ_CAML_DIR," \
      -e "s,@COQ_COMPILER@,$COQ_COMPILER," \
      -e "s,@COQ_DEP_COMPILER@,$COQ_DEP_COMPILER," \
      -e "s,@COQ_RC@,$COQ_RC," \
      -e "s,@COQ_MAKE@,$COQ_MAKE," \
  \
      -e "s,@ZENON_LIB_DIR@,$ZENON_LIB_DIR," \
      -e "s,@ZENON_COMPILER@,$ZENON_COMPILER," \
      -e "s,@USE_COQ_COMPILER@,$USE_COQ_COMPILER," \
      -e "s,@SUM@,$SUM," \
      -e "s,@CONVERT@,$CONVERT," \
      -e "s,@GS@,$GS," \
  \
      -e "s,@ZVTOV_LIB_DIR@,$ZVTOV_LIB_DIR," \
      -e "s,@ZVTOV_COMPILER@,$ZVTOV_COMPILER," \
      -e "s,@USE_XMLRPC@,$USE_XMLRPC," \
      -e "s,@XMLRPC@,$XMLRPC," \
      -e "s,@XMLRPC_FLAGS@,$XMLRPC_FLAGS," \
      -e "s,@XMLRPC_LINK@,$XMLRPC_LINK," \
      -e "s,@XMLRPC_MODULE@,$XMLRPC_MODULE," \
      <$1 >$2

  chmod g+w $2;

}

build_config_var () {
  build_config_file .config_var.in .config_var
}

build_config_var_for_shell () {

  sed -e "s,@BYT_DEBUG_FLAGS@,\"$BYT_DEBUG_FLAGS\"," \
  <.config_var.in >.config_var_for_shell.in

  build_config_file .config_var_for_shell.in .config_var_for_shell

  rm -f .config_var_for_shell.in

}

build_configuration_variables () {
  build_config_var;
  build_config_var_for_shell;
}

# Bootstrapping .depend.
touch_depends () {
  touch ./.depend;
  chmod g+w ./.depend;
  if test -d tarballs; then
    touch tarballs/.depend;
    chmod g+w tarballs/.depend;
 fi;
}

#
# Copying information gathered here to internal tools.
#
configure_internal_tools () {
  for i in ${INTERNAL_TOOLS}; do
    cp .config_var $i
  done
}

summarize_configuration () {
  echo
  echo "*******************************************"
  echo "Configuration settings summary for ${PROJECT_NAME}"
  echo
  cat .config_var
  echo
  echo "End of configuration settings for ${PROJECT_NAME}."
  echo "*******************************************"
}

#
# The main procedure.
#
main () {
#  parse_arguments;
  set_variables;
  check_installation_dirs;
  build_configuration_variables;
  touch_depends;
  configure_internal_tools;
  # Now that .config_var_for_shell is built, we can call ./.configure, the
  # script that does the rest of the work that never necessitates user's
  # interaction.
  if test -x ./.configure; then ./.configure; fi;
  summarize_configuration;
  # Call the Makefile to go on configuring external tools.
  if ${MAGIC_MAKE_EXTERNAL}; then make magic_configure_external_tools; else
    if ${MAKE_EXTERNAL}; then make configure_external_tools; fi;
  fi
}

main; exit 0
