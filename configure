#!/bin/sh

#**********************************************************************#
#                                                                      #
#                        FoCaLize compiler                             #
#                                                                      #
#            François Pessaux                                          #
#            Pierre Weis                                               #
#            Damien Doligez                                            #
#                                                                      #
#                               LIP6  --  INRIA Rocquencourt           #
#                                                                      #
#  Copyright 2008 INRIA                                                #
#  Distributed only by permission.                                     #
#                                                                      #
#**********************************************************************#

# $Id: configure,v 1.58 2009-01-29 19:30:05 weis Exp $

########################################################################
#
# Coarse documentation for configure.
#
# The configure script is divided into 3 parts:
# - procedure definitions,
# - command line argument parsing,
# - computation of configuration variables and validity checks.
#
# The final part records all the variables into the file "./.config_var", by
# editing the template file "./.config_var.in".

# Configure reads the set of configuration variables specific to the project,
# written by the developper in the file "./.project_config_var".
# This set of variables provides all the necessary information to properly
# run this script.
# Hence, there is no need to modify this script to configure another project:
# it is entirely sharable.
##########################################################################

# Remembering the number of arguments to this script, in order to parse them
# properly.
argc="$#"

#
# Generic aborting procedures.
#
abort_configuration () {
  echo >&2
  echo "./configure: " $TAG_BOLD"ABORTING CONFIGURATION!"$TAG_NORMAL  >&2
  echo >&2
  echo "$1" >&2
}

abort_remedy () {
  echo >&2
  echo "$1" >&2
  echo "(See configure -help for details)." >&2
  exit 1;
}

abort_configuration_not_writable_tools_prefix_directory () {
  abort_configuration \
    "You cannot install EXTERNAL tools in the directory $1: it is not writable for you.";
  abort_remedy \
    "Please, use configure with the \"-tools_prefix\" option set to a writable directory.";
  echo "Try for instance:";
  echo "./configure -tools_prefix ~/pkg";
  echo "to install external tools in sub-directory pkg of your home directory.";
}

include_project_configuration_variables () {
  if test -r .project_config_var; then
    . .project_config_var;
    #echo ".project_config_var loaded" >&2;
  else
    abort_configuration &&
    echo "There is no ./.project_config_var file." >&2
    abort_remedy \
      "Define the project specific configuration variables in .project_config_var.";
    exit 1
  fi
}

#
# Checking if the project identity card was properly filled.
#
check_include () {
  if test -z "${PROJECT_NAME}"; then
    abort_configuration;
    echo "The variable PROJECT_NAME is empty." >&2
    abort_remedy \
      "Bind PROJECT_NAME to the name of the project in .project_config_var.";
    exit 1;
  fi
  if test -z "${VERSION_NUMBER_MAIN}"; then
    abort_configuration;
    echo "The variable VERSION_NUMBER_MAIN is empty." >&2
    abort_remedy \
      "Bind VERSION_NUMBER_MAIN to the project main version number in .project_config_var.";
    exit 1;
  fi
  if test -z "${VERSION_NUMBER_SUB}"; then
    abort_configuration;
    echo "The variable VERSION_NUMBER_SUB is empty." >&2
    abort_remedy \
      "Bind VERSION_NUMBER_SUB to the the project sub version number in .project_config_var.";
    exit 1;
  fi
  if test -z "${VERSION_NUMBER_PATCH}"; then
    abort_configuration;
    echo "The variable VERSION_NUMBER_PATCH is empty." >&2
    abort_remedy \
      "Bind VERSION_NUMBER_PATCH to the project version patch level in .project_config_var.";
    exit 1;
  fi
}

#
# Computing and defining project related variables
# (needs project specific variables).
#
set_project_specific_variables () {
    # The absolute path of this set of source files.
    ABSOLUTE_ROOT_DIR=`pwd`
    VERSION_NUMBER_FULL=${VERSION_NUMBER_MAIN}.${VERSION_NUMBER_SUB}.${VERSION_NUMBER_PATCH}
    PROJECT_NAME_FULL=${PROJECT_NAME}-${VERSION_NUMBER_FULL}
    TOOLS_PROJECT=""
}

#
# Computing the list of all the tools not specific to the project, that
# should be compiled and installed.
# (needs project specific variables).
#
# TOOLS_PROJECT should be TOOLS_EXTERNAL + TOOLS_INTERNAL, as defined in
# file .project_config_var.
#
# Setting the value of TOOLS_PROJECT avoiding spurious spaces
# (i.e. preserving its emptyness to correctly test its value).
set_tools_project () {
  if test ! -z "${TOOLS_EXTERNAL}"; then
    if test ! -z "${TOOLS_INTERNAL}"; then
      TOOLS_PROJECT="${TOOLS_EXTERNAL} ${TOOLS_INTERNAL}";
    else
      TOOLS_PROJECT="${TOOLS_EXTERNAL}";
    fi;
  else
    if test ! -z "${TOOLS_INTERNAL}"; then
      TOOLS_PROJECT="${TOOLS_INTERNAL}";
    else
      TOOLS_PROJECT="";
    fi;
  fi
}

# Checking if a string is a valid command name.
check_command () {
  type "$1" >/dev/null 2>&1
}

###################
# Default settings.
###################

#
# Finding acceptable defaults for various unusual commands
#
set_sum_default () {
  for i in sum md5 md5sum md5deep sha1deep sha256deep; do
    if check_command $i; then DEFAULT_SUM=$i; break; fi
  done
}

set_convert_default () {
  for i in convert; do
    if check_command $i; then DEFAULT_CONVERT=$i; break; fi
  done
}

set_gs_default () {
  for i in gs; do
    if check_command $i; then DEFAULT_GS=$i; break; fi
  done
}

set_xmlrpc_default () {
  for i in xmlrpc; do
    if check_command $i; then DEFAULT_XMLRPC=$i; break; fi
  done
}

set_command_defaults () {
  set_sum_default;
  set_convert_default;
  set_gs_default;
  set_xmlrpc_default;
}

#
# Defining all default variables
#

# The two root variables of the configuration are
# $(PREFIX) and $(TOOLS_PREFIX).
#
# $(PREFIX) defines the root directory for the project installation after its
# proper configuration and compilation.
# This directory will contain
# - $(PREFIX)/bin for installation of the project binaries,
# - $(PREFIX)/lib for installation of the project library files,
# - $(PREFIX)/man for installation of the project manual pages,
# - $(PREFIX)/doc for installation of the project documentation.
#
# $(TOOLS_PREFIX) defines the root directory for the installation of private
# versions of external tools, if necessary.
# This directory will contain
# - $(TOOLS_PREFIX)/bin for installation of the project external tools binaries,
# - $(TOOLS_PREFIX)/lib for installation of the project external tools library files,
# - $(TOOLS_PREFIX)/man for installation of the project external tools manual pages,
# - $(TOOLS_PREFIX)/doc for installation of the project external tools documentation.

# Variable assigment

# Variables are divided into 3 groups:
# (1) intrinsic defaults, which are string constants,
# (2) prefix defaults, that depend on ${DEFAULT_PREFIX},
# (3) tools prefix, that depend on ${DEFAULT_TOOLS_PREFIX}.
#
# For those groups we define a procedure that sets the defaults,
# and a procedure that sets the variables after options have been processed.
#
# Variables in group (1), intrinsic defaults, are project dependent:
# they are all defined in file .project_config_var with
# their associated setting procedure ``set_intrinsic_defaults''.
# # Variables in group (2) and (3), intrinsic defaults are defined in file .project_config_var.

# Then procedure set_defaults is called before parsing options, and
# set_variables is called after parsing options.

# Setting intrinsic values.
set_intrinsic () {

  # Intrinsic settings for the project.

  if test -z ${DEBUG}; then DEBUG=${DEFAULT_DEBUG}; fi

  if test -z ${PREFIX}; then PREFIX=${DEFAULT_PREFIX}; fi
  if test -z "${USE_TOOLS_PREFIX_DIRECTORY}"; then
    USE_TOOLS_PREFIX_DIRECTORY="${DEFAULT_USE_TOOLS_PREFIX_DIRECTORY}"; fi
  if test -z "${USE_PROJECT_SUB_DIRECTORY}"; then
    USE_PROJECT_SUB_DIRECTORY="${DEFAULT_USE_PROJECT_SUB_DIRECTORY}"; fi

  # External tools
  if test -z "${STATIC_EXTERNAL}"; then
    STATIC_EXTERNAL="${DEFAULT_STATIC_EXTERNAL}"; fi
  if test -z "${MAKE_EXTERNAL}"; then
    MAKE_EXTERNAL="${DEFAULT_MAKE_EXTERNAL}"; fi
  if test -z "${MAGIC_MAKE_EXTERNAL}"; then
    MAGIC_MAKE_EXTERNAL="${DEFAULT_MAGIC_MAKE_EXTERNAL}"; fi

  # Intrinsic settings for Caml.
  if test -z "${BYT_DEBUG_FLAGS}"; then
    BYT_DEBUG_FLAGS="${DEFAULT_BYT_DEBUG_FLAGS}"; fi
  if test -z "${BIN_DEBUG_FLAGS}"; then
    BIN_DEBUG_FLAGS="${DEFAULT_BIN_DEBUG_FLAGS}"; fi

  # Intrinsic settings for Coq.
  if test -z "${COQ_RC}"; then COQ_RC="${DEFAULT_COQ_RC}"; fi

  # Setting coq make command.
  if test -z "${COQ_MAKE}"; then
    # To compile Coq, prefer gmake, if GNU make is available with that name.
    if check_command "${DEFAULT_COQ_MAKE}"; then COQ_MAKE="${DEFAULT_COQ_MAKE}";
    # Otherwise, use make (which is GNU make anyway on
    # boxes with GNU make as default!).
    else COQ_MAKE="make";
    fi
  fi

  # Intrinsic settings for Zenon.
  if test -z "${USE_COQ_COMPILER}"; then USE_COQ_COMPILER="${DEFAULT_USE_COQ_COMPILER}"; fi
  if test -z "${SUM}"; then SUM="${DEFAULT_SUM}"; else
    if check_command "${SUM}"; then :; else
      abort_configuration "unavailable command ${SUM}.";
      abort_remedy "Choose an executable check sum command."
    fi
  fi
  if test -z "${CONVERT}"; then CONVERT="${DEFAULT_CONVERT}"; else
    if check_command "${CONVERT}"; then :; else
      abort_configuration "unavailable command ${CONVERT}.";
      abort_remedy "Choose an executable convert command."
    fi
  fi
  if test -z "${GS}"; then GS="${DEFAULT_GS}"; else
    if check_command ${GS}; then :; else
      abort_configuration "unavailable command ${GS}.";
      abort_remedy "Choose an executable gs command."
    fi
  fi

  # Intrinsic settings for Zvtov.
  if test -z "$USE_XMLRPC"; then USE_XMLRPC=${DEFAULT_USE_XMLRPC}; fi
  if test -z "${XMLRPC}"; then XMLRPC="${DEFAULT_XMLRPC}"; else
    if check_command "${XMLRPC}"; then :; else
      abort_configuration "unavailable command ${XMLRPC}.";
      abort_remedy "Choose an executable xmlrpc command."
    fi
  fi

  if ${USE_XMLRPC}; then
    # Check_XMLRPC;
    if check_command "${XMLRPC}"; then :; else
      abort_configuration "unavailable command ${XMLRPC}.";
      abort_remedy "Choose an executable xmlrpc command."
    fi
    # set_XMLRPC_MODULE;
    if ${USE_XMLRPC}; then
      if test -z "${XMLRPC_MODULE}"; then XMLRPC_MODULE="${DEFAULT_XMLRPC_MODULE}"; fi
    fi
    # set_XMLRPC_FLAGS;
    if test -z "$XMLRPC_FLAGS"; then
      if check_command "ocamlfind"; then
        XMLRPC_FLAGS="`ocamlfind query -r -i-format xmlrpc | tr '\012' ' '`"
      else
        XMLRPC_FLAGS="${DEFAULT_XMLRPC_FLAGS}"
      fi
    fi
    # set_XMLRPC_LINK;
    if test -z "$XMLRPC_LINK"; then
      if check_command "ocamlfind"; then
        XMLRPC_LINK="`ocamlfind query -r -predicates byte -a-format xmlrpc | tr '\012' ' '`"
      else
        XMLRPC_LINK="${DEFAULT_XMLRPC_LINK}"
      fi
    fi
  fi

}

# Setting (or defining) variables that depend upon ${DEFAULT_PREFIX}.
set_prefix_defaults () {

  DEFAULT_BIN_DIR="${DEFAULT_PREFIX}/bin"
  DEFAULT_LIB_DIR="${DEFAULT_PREFIX}/lib"
  DEFAULT_MAN_DIR="${DEFAULT_PREFIX}/man"
  DEFAULT_DOC_DIR="${DEFAULT_PREFIX}/doc"

}

# Setting variables that depend upon $PREFIX.
set_prefix () {

  if test -z "${PREFIX}"; then PREFIX="${DEFAULT_PREFIX}"; fi

  if test -z "${BIN_DIR}"; then BIN_DIR="${PREFIX}/bin"; fi
  if test -z "${LIB_DIR}"; then LIB_DIR="${PREFIX}/lib"; fi
  if test -z "${MAN_DIR}"; then MAN_DIR="${PREFIX}/man"; fi
  if test -z "${DOC_DIR}"; then DOC_DIR="${PREFIX}/doc"; fi

}

# Setting (or defining) variables that depend upon ${DEFAULT_TOOLS_PREFIX}.
set_tools_prefix_defaults () {

  # General defaults for the installation of the external tools of the project.
  # Normal setting is:
  # DEFAULT_TOOLS_PREFIX=~/pkg
  # For Zenon the DEFAULT_TOOLS_PREFIX should be the DEFAULT_PREFIX.
  if ! ${DEFAULT_USE_TOOLS_PREFIX_DIRECTORY}; then
    DEFAULT_TOOLS_PREFIX="${DEFAULT_PREFIX}"
  fi

  # The normal default binding is
  # DEFAULT_TOOLS_PROJECT_DIR="${DEFAULT_TOOLS_PREFIX}/${PROJECT_NAME_FULL}"
  # For traditional projects (e.g. zenon), there is no PROJECT_NAME_FULL sub directory,
  # we directly use the DEFAULT_TOOLS_PREFIX.
  if ${DEFAULT_USE_PROJECT_SUB_DIRECTORY}; then
    DEFAULT_TOOLS_PROJECT_DIR="${DEFAULT_TOOLS_PREFIX}/${PROJECT_NAME_FULL}"
  else
    DEFAULT_TOOLS_PROJECT_DIR="${DEFAULT_TOOLS_PREFIX}"
  fi

  DEFAULT_TOOLS_PROJECT_BIN_DIR="${DEFAULT_TOOLS_PROJECT_DIR}/bin"
  DEFAULT_TOOLS_PROJECT_LIB_DIR="${DEFAULT_TOOLS_PROJECT_DIR}/lib"
  DEFAULT_TOOLS_PROJECT_MAN_DIR="${DEFAULT_TOOLS_PROJECT_DIR}/man"
  DEFAULT_TOOLS_PROJECT_DOC_DIR="${DEFAULT_TOOLS_PROJECT_DIR}/doc"

  # Defaults for Caml.
  DEFAULT_CAML_PREFIX="${DEFAULT_TOOLS_PROJECT_DIR}"
  DEFAULT_CAML_LIB_DIR="${DEFAULT_CAML_PREFIX}/lib/ocaml"
  DEFAULT_CAML_BIN_DIR="${DEFAULT_CAML_PREFIX}/bin"

  # The normal default binding for Caml command "com" is normally
  # "${DEFAULT_CAML_BIN_DIR}/com".
  # For traditional projects (e.g. zenon), there is no reasonable
  # value for ${DEFAULT_CAML_BIN_DIR} defined: we thus directly use
  # "com" as default.
  if ${DEFAULT_STATIC_EXTERNAL}; then
    DEFAULT_CAML_BYT_COMPILER="${DEFAULT_CAML_BIN_DIR}/ocamlc"
    DEFAULT_CAML_BIN_COMPILER="${DEFAULT_CAML_BIN_DIR}/ocamlopt"
    DEFAULT_CAML_YAC_COMPILER="${DEFAULT_CAML_BIN_DIR}/ocamlyacc"
    DEFAULT_CAML_LEX_COMPILER="${DEFAULT_CAML_BIN_DIR}/ocamllex"
    DEFAULT_CAML_DEP_COMPILER="${DEFAULT_CAML_BIN_DIR}/ocamldep"
    DEFAULT_CAML_DOC_COMPILER="${DEFAULT_CAML_BIN_DIR}/ocamldoc"
  else
    DEFAULT_CAML_BYT_COMPILER="ocamlc"
    DEFAULT_CAML_BIN_COMPILER="ocamlopt"
    DEFAULT_CAML_LEX_COMPILER="ocamllex"
    DEFAULT_CAML_YAC_COMPILER="ocamlyacc"
    DEFAULT_CAML_DEP_COMPILER="ocamldep"
    DEFAULT_CAML_DOC_COMPILER="ocamldoc"
  fi

  # Default for Camlp5
  DEFAULT_CAMLP5_LIB_DIR="${DEFAULT_CAML_LIB_DIR}/camlp5"

  # Defaults for Coq.
  DEFAULT_COQ_PREFIX="${DEFAULT_TOOLS_PROJECT_DIR}"
  DEFAULT_COQ_LIB_DIR="${DEFAULT_COQ_PREFIX}/lib/coq"
  DEFAULT_COQ_BIN_DIR="${DEFAULT_COQ_PREFIX}/bin"
  DEFAULT_COQ_CAML_DIR="${DEFAULT_CAML_BIN_DIR}"

  # The normal default binding for coqc is
  # DEFAULT_COQ_COMPILER="${DEFAULT_TOOLS_PROJECT_BIN_DIR}/coqc"
  # For traditional projects (e.g. zenon), there is no reasonable value for
  # ${DEFAULT_TOOLS_PROJECT_BIN_DIR} defined: we thus directly use
  # "coqc" as default.
  if ${DEFAULT_STATIC_EXTERNAL}; then
    DEFAULT_COQ_COMPILER="${DEFAULT_COQ_BIN_DIR}/coqc"
    DEFAULT_COQ_DEP_COMPILER="${DEFAULT_COQ_BIN_DIR}/coqdep"
  else
    DEFAULT_COQ_COMPILER="coqc"
    DEFAULT_COQ_DEP_COMPILER="coqdep"
  fi

  # Defaults for Zenon.
  DEFAULT_ZENON_PREFIX="${DEFAULT_TOOLS_PROJECT_DIR}"
  DEFAULT_ZENON_BIN_DIR="${DEFAULT_ZENON_PREFIX}/bin"
  DEFAULT_ZENON_LIB_DIR="${DEFAULT_ZENON_PREFIX}/lib/zenon"

  if ${DEFAULT_STATIC_EXTERNAL}; then
    DEFAULT_ZENON_COMPILER="${DEFAULT_ZENON_BIN_DIR}/zenon"
  else
    DEFAULT_ZENON_COMPILER="zenon"
  fi

  # Defaults for Zvtov.
  DEFAULT_ZVTOV_PREFIX="${DEFAULT_TOOLS_PROJECT_DIR}"
  DEFAULT_ZVTOV_BIN_DIR="${DEFAULT_ZVTOV_PREFIX}/bin"
  DEFAULT_ZVTOV_LIB_DIR="${DEFAULT_ZVTOV_PREFIX}/lib/zvtov"

  if ${DEFAULT_STATIC_EXTERNAL}; then
    DEFAULT_ZVTOV_COMPILER="${DEFAULT_ZVTOV_BIN_DIR}/zvtov"
  else
    DEFAULT_ZVTOV_COMPILER="zvtov"
  fi

}

# Setting variables that depend upon ${TOOLS_PREFIX}.
set_tools_prefix () {

  if test -z "${TOOLS_PREFIX}"; then
    TOOLS_PREFIX="${DEFAULT_TOOLS_PREFIX}"
  fi

  # The normal setting is:
  # TOOLS_PROJECT_PREFIX="${TOOLS_PREFIX}/${PROJECT_NAME_FULL}"
  # For traditional project (e.g. zenon) there is no ${PROJECT_NAME_FULL}
  # sub directory, and TOOLS_PROJECT_PREFIX is just ${TOOLS_PREFIX}.
  # TOOLS_PROJECT_PREFIX="${TOOLS_PREFIX}/${PROJECT_NAME_FULL}"
  if ${USE_PROJECT_SUB_DIRECTORY}; then
    TOOLS_PROJECT_DIR="${TOOLS_PREFIX}/${PROJECT_NAME_FULL}"
  else
    TOOLS_PROJECT_DIR="${TOOLS_PREFIX}"
  fi

  # The list of directories that must be installable during configuration.
  # The normal setting is:
  # CONFIGURATION_INSTALLABLE_DIRS="${TOOLS_PREFIX)"
  if ${MAKE_EXTERNAL}; then
    CONFIGURATION_INSTALLABLE_DIRS="${TOOLS_PREFIX}"
  else
    CONFIGURATION_INSTALLABLE_DIRS=""
  fi

  TOOLS_PROJECT_BIN_DIR="${TOOLS_PROJECT_DIR}/bin"
  TOOLS_PROJECT_LIB_DIR="${TOOLS_PROJECT_DIR}/lib"
  TOOLS_PROJECT_MAN_DIR="${TOOLS_PROJECT_DIR}/man"
  TOOLS_PROJECT_DOC_DIR="${TOOLS_PROJECT_DIR}/doc"

  # Settings for Caml.
  if test -z "${CAML_PREFIX}"; then
    CAML_PREFIX="${TOOLS_PROJECT_DIR}"; fi

  if test -z "${CAML_LIB_DIR}"; then
    CAML_LIB_DIR="${CAML_PREFIX}/lib/ocaml"; fi
  if test -z "${CAML_BIN_DIR}"; then
    # If CAML_BIN_DIR HAS NOT been set, then the associated commands,
    # get bound to their defaults, unless those commands have already
    # been explicitely set otherwise.
    CAML_BIN_DIR="${CAML_PREFIX}/bin";
    if ${STATIC_EXTERNAL}; then
      CAML_BYT_COMPILER="${CAML_BIN_DIR}/ocamlc"
      CAML_BIN_COMPILER="${CAML_BIN_DIR}/ocamlopt"
      CAML_YAC_COMPILER="${CAML_BIN_DIR}/ocamlyacc"
      CAML_LEX_COMPILER="${CAML_BIN_DIR}/ocamllex"
      CAML_DEP_COMPILER="${CAML_BIN_DIR}/ocamldep"
      CAML_DOC_COMPILER="${CAML_BIN_DIR}/ocamldoc"
    else
      CAML_BYT_COMPILER="ocamlc"
      CAML_BIN_COMPILER="ocamlopt"
      CAML_LEX_COMPILER="ocamllex"
      CAML_YAC_COMPILER="ocamlyacc"
      CAML_DEP_COMPILER="ocamldep"
      CAML_DOC_COMPILER="ocamldoc"
    fi
  else
    # If CAML_BIN_DIR HAS been set, then it implies the value of
    # associated commands, unless those commands have already
    # been explicitely set otherwise.
    if ${STATIC_EXTERNAL}; then
      if test -z "${CAML_BYT_COMPILER}"; then
      CAML_BYT_COMPILER="${CAML_BIN_DIR}/ocamlc"; fi
      if test -z "${CAML_BIN_COMPILER}"; then
      CAML_BIN_COMPILER="${CAML_BIN_DIR}/ocamlopt"; fi
      if test -z "${CAML_LEX_COMPILER}"; then
      CAML_LEX_COMPILER="${CAML_BIN_DIR}/ocamllex"; fi
      if test -z "${CAML_YAC_COMPILER}"; then
      CAML_YAC_COMPILER="${CAML_BIN_DIR}/ocamlyacc"; fi
      if test -z "${CAML_DEP_COMPILER}"; then
      CAML_DEP_COMPILER="${CAML_BIN_DIR}/ocamldep"; fi
      if test -z "${CAML_DOC_COMPILER}"; then
      CAML_DOC_COMPILER="${CAML_BIN_DIR}/ocamldoc"; fi
    else
      abort_configuration "Cannot use option caml_bin_dir when not in static_external mode.";
      abort_remedy "Choose static_external mode or remove caml_bin_dir option."
    fi
  fi

  # Settings for Camlp5
  if test -z "${CAMLP5_LIB_DIR}"; then
  CAMLP5_LIB_DIR="${CAML_LIB_DIR}/camlp5"; fi

  # Settings for Coq.
  if test -z "${COQ_PREFIX}"; then
    COQ_PREFIX="${TOOLS_PROJECT_DIR}"; fi

  if test -z "${COQ_LIB_DIR}"; then
    COQ_LIB_DIR="${COQ_PREFIX}/lib/coq"; fi

  if test -z "${COQ_BIN_DIR}"; then
    COQ_BIN_DIR="${COQ_PREFIX}/bin"; fi

  if test -z "${COQ_CAML_DIR}"; then
    COQ_CAML_DIR="${CAML_BIN_DIR}"; fi

  if test -z "${COQ_COMPILER}"; then
    COQ_COMPILER="${COQ_BIN_DIR}/coqc"; fi
  if test -z "${COQ_DEP_COMPILER}"; then
    COQ_DEP_COMPILER="${COQ_BIN_DIR}/coqdep"; fi

  # Settings for Zenon.
  if test -z "${ZENON_PREFIX}"; then
    ZENON_PREFIX="${TOOLS_PROJECT_DIR}"; fi

  if test -z "${ZENON_LIB_DIR}"; then
    ZENON_LIB_DIR="${ZENON_PREFIX}/lib/zenon"; fi
  if test -z "${ZENON_BIN_DIR}"; then
    ZENON_BIN_DIR="${ZENON_PREFIX}/bin"; fi

  if test -z "${ZENON_COMPILER}"; then
    ZENON_COMPILER="${ZENON_BIN_DIR}/zenon"; fi

  # Settings for Zvtov.
  if test -z "${ZVTOV_PREFIX}"; then
    ZVTOV_PREFIX="${TOOLS_PROJECT_DIR}"; fi

  if test -z "${ZVTOV_LIB_DIR}"; then
    ZVTOV_LIB_DIR="${ZVTOV_PREFIX}/lib/zvtov"; fi
  if test -z "${ZVTOV_BIN_DIR}"; then
    ZVTOV_BIN_DIR="${ZVTOV_PREFIX}/bin"; fi

  if test -z "${ZVTOV_COMPILER}"; then
    ZVTOV_COMPILER="${ZVTOV_BIN_DIR}/zvtov"; fi

}

#
# Defining variables specific to this script behaviour.
#

# Flags to drive the interactive/continue machinery:
# - if the ${PREFIX} directory has been explicitely given as an option
#   by the user, we don't need to ask for it again.
# - if the ${TOOLS_PREFIX} directory has been explicitely given as an option
#   by the user, we don't need to ask for it again.
# - if there is no tools (${TOOLS_PROJECT} is empty), TOOLS_PREFIX is
#   considered given, since there is no need to ask.
# - we should continue without asking, if all the prefixes has been
#   explicitely given as options.

set_configure_script_variables () {
  TAG_BOLD="\033[1m"
  TAG_UNDERLINE="\033[4m"
  TAG_NORMAL="\033[0m"
  PREFIX_GIVEN=false
  PREFIX_READ=false
  TOOLS_PREFIX_GIVEN=false
  TOOLS_PREFIX_READ=false
  CONTINUE_WITHOUT_ASKING=false
}

# Reading the project installation prefix directory.

read_prefix () {
  echo $TAG_BOLD"Where to install the ${PROJECT_NAME} files ?"$TAG_NORMAL
  echo "Default is ${DEFAULT_PREFIX}."
  echo "Just press enter to use the default location."
  read USER_INPUT
  if test ! -z "${USER_INPUT}"; then
     PREFIX="${USER_INPUT}"
  fi
  PREFIX_READ=true
}

# Reading the project tools installation prefix directory.
read_tools_prefix () {
  echo $TAG_BOLD"Where to install the ${PROJECT_NAME} tools (${TOOLS_PROJECT}) ?"$TAG_NORMAL
  echo "Default is ${DEFAULT_TOOLS_PREFIX}."
  echo "Just press enter to use the default location."
  read USER_INPUT
  if test ! -z "${USER_INPUT}"; then
     TOOLS_PREFIX="${USER_INPUT}"
  fi
  TOOLS_PREFIX_READ=true
}

# Summary feedback.
prefix_summary () {
  echo "Configuration done for installation directories:" &&
  echo "- The ${PROJECT_NAME} system installs in ${PREFIX}" &&
  if test ! -z "${TOOLS_PROJECT}"; then
    echo "- The ${PROJECT_NAME} tools install in ${TOOLS_PREFIX}";
  fi
}

set_continue_without_asking () {
  # If PREFIX has been given:
  # just check if we need to ask for TOOLS_PREFIX, and if not so continue.
  if ${PREFIX_GIVEN}; then
    # No project tools: useless to ask for TOOLS_PREFIX, hence continue.
    if test -z ${TOOLS_PROJECT}; then
      CONTINUE_WITHOUT_ASKING=true;
    else
      # PREFIX and TOOLS_PREFIX have been given, hence continue.
      if ${TOOLS_PREFIX_GIVEN}; then
        CONTINUE_WITHOUT_ASKING=true;
      fi
    fi;
  fi
}

continue_configure () {
  # Don't ask if everything (important) has been given.
  set_continue_without_asking;
  if ! ${CONTINUE_WITHOUT_ASKING}; then
    echo;
    echo "Ready to continue ?";
    echo "Just press enter to continue."
    read USER_INPUT;
    case ${USER_INPUT} in
      n* | N*) abort_configuration; exit 1;;
      *) ;;
    esac
 fi
}

prefix_main () {
 # I know these are boolean ands but I don't know the shell style for these.
 if ! ${PREFIX_GIVEN}; then
   if ! ${PREFIX_READ}; then
     read_prefix;
   fi;
 fi;
 if test ! -z "${TOOLS_PROJECT}"; then
   if ! ${TOOLS_PREFIX_GIVEN}; then
     if ! ${TOOLS_PREFIX_READ}; then
       read_tools_prefix;
     fi;
   fi;
 fi
}

usage () {
  echo "usage: ./configure [options] [<directory>]"
  echo
  echo "if optional argument <directory> is provided, it is used as the"
  echo "[-tools_prefix] option argument (see below)."
  echo
  echo "general options are:"
  echo
  echo "  [-]-prefix <directory>"
  echo "    set <directory> as the directory prefix for installation of ${PROJECT_NAME}."
  echo "    (Default value for <directory> is ${DEFAULT_PREFIX}.)"
  echo "  [-]-tools_prefix <directory>"
  echo "    set <directory> as the directory prefix for the installation of external tools."
  echo "    External tools are mandatory for ${PROJECT_NAME} to work,"
  echo "    and must be built and installed during the configuration phase,"
  echo "    since they are needed to correctly compile, install, and safely use"
  echo "    ${PROJECT_NAME}."
  echo "    External tools then install in <directory>/${PROJECT_NAME_FULL}/,"
  echo "    once they have ben built."
  echo "    As a consequence, you must have the permission to install directories"
  echo "    and files in <directory> to properly configure ${PROJECT_NAME}."
  echo "    (Default value for <directory> is ${TOOLS_DEFAULT_PREFIX}.)"
  echo "  [-]-debug | [-]-enable_debug"
  echo "    enable debugging"
  echo "  [-]-nodebug | [-]-disable_debug"
  echo "    disable debugging"
  echo "  [-]-help";
  echo "    display help and exit"
  echo
  echo "options specific to Zenon are:"
  echo
  echo "  [-]-zenon_prefix <directory>"
  echo "    set <directory> as the directory prefix of installation for zenon."
  echo "  [-]-use_coq_compiler <boolean>"
  echo "    set if the coq compiler must be used to verify the proofs given by zenon."
  echo "  [-]-convert <executable-file>"
  echo "    set absolute path for the command convert."
  echo "  [-]-gs <executable-file>"
  echo "    set absolute path for the command gs."
  echo "  [-]-sum <executable-file>"
  echo "    set absolute path for the check-sum command."
  echo
  echo "options specific to Zvtov are:"
  echo
  echo "  [-]-zvtov_prefix <directory>"
  echo "    set <directory> as the directory prefix of installation for zvtov."
  echo "  [-]-use_xmlrpc <boolean>";
  echo "    set if xmlrpc must be used by zvtov."
  echo "  [-]-xmlrpc <executable-file>";
  echo "    set absolute path for the command xmlrpc."
  echo "  [-]-xmlrpc_flags <string>";
  echo "    set the string option argument to pass to xmlrpc invocations."
  echo "  (Default value for <string> is:";
  echo "   \"\`ocamlfind query -r -i-format xmlrpc | tr '\\\\012' ' '\`\").";
  echo "  [-]-xmlrpc_link <string>";
  echo "    set the link options to pass when linking xmlrpc.";
  echo "  (Default value for <string> is:";
  echo "   \"\`ocamlfind query -r -predicates byte -a-format xmlrpc | tr '\\\\012' ' '\`\").";
  echo
  echo "options specific to Caml are:"
  echo
  echo "  [-]-caml_prefix <directory>"
  echo "    set <directory> as the directory prefix of installation for caml."
  echo
  echo "options specific to Coq are:"
  echo
  echo "  [-]-coq_prefix <directory>"
  echo "    set <directory> as the directory prefix of installation for coq."
  echo "  [-]-coq_rc <file>"
  echo "    set absolute path for the file coqrc, the startup file for Coq."
  echo
  echo "options specific to this configuration script shell:"
  echo
  echo "  [-]-static_external_commands <boolean>"
  echo "    use fixed path for external commands."
#       echo "  [-]-use_tools_sub_directory <boolean>"
#       echo "    use tools as a sub directory for the"
#       echo "    installation of project specific data (including external tools)."
#       echo "  [-]-use_project_sub_directory <boolean>"
#       echo "    use the name of the project as private sub directory for"
#       echo "    installation of project specific data (including external tools)."
  echo "  [-]-no_make_external"
  echo "    <non documented option>."
  echo "  [-]-magic_make_external"
  echo "    <unknown option>."
}

# Setting all variables defaults
set_defaults () {
  # Defining configure script specific variables.
  set_configure_script_variables &&

  # Read the project specific variables, and define its variables.
  include_project_configuration_variables &&
  set_project_id &&
  set_project_specific_variables &&
  set_tools_project &&

  # Perform some verifications about the project definition.
  check_include &&
 
 # Computing defaults.
  set_intrinsic_defaults &&
  set_command_defaults &&
  set_prefix_defaults &&
  set_tools_prefix_defaults;
}

# Setting all variables after option parsing has been completed.
set_variables () {
  set_intrinsic &&
  set_prefix &&
  set_tools_prefix;
}

#
# Beginning execution.
#

# Setting the default values (for help in particular).
# Hence, this must be done before parsing the command line arguments.
set_defaults

#
# Parsing arguments
#
case ${argc} in
  0) prefix_main
     ;;
  1) PREFIX="$1";
     PREFIX_GIVEN=true;
     prefix_main;
     ;;
  *)

  while : ; do
    # If nothing else to parse then end the loop.
    case $# in 0) break;; *);; esac

    case "$1" in
      # Software specific options
      -tools_prefix | --tools_prefix | \
      -tools_installation_prefix | --tools_installation_prefix)
        TOOLS_PREFIX="$2"; TOOLS_PREFIX_GIVEN=true; shift 2
        ;;
      -prefix | --prefix | \
      -project_prefix | --project_prefix | \
      -project_installation_prefix | --project_installation_prefix)
        PREFIX="$2"; PREFIX_GIVEN=true; shift 2
        ;;
      # Caml options
      -caml_prefix | --caml_prefix | \
      -caml_installation_prefix | --caml_installation_prefix)
        CAML_PREFIX="$2"; shift 2
        ;;
      # Coq options
      -coq_prefix | --coq_prefix | \
      -coq_installation_prefix | --coq_installation_prefix)
        COQ_PREFIX="$2"; shift 2
        ;;
      # Coq specific options (cannot be computed).
      -coq_rc | --coq_rc) COQ_RC="$2"; shift 2;;
      -coq_make | --coq_make) COQ_MAKE="$2"; shift 2;;
      # Zenon options
      -zenon_prefix | --zenon_prefix | \
      -zenon_installation_prefix | --zenon_installation_prefix)
        ZENON_PREFIX="$2"; shift 2
        ;;
      # Zenon specific options (cannot be computed).
      -use_coq_compiler | --use_coq_compiler) USE_COQ_COMPILER="$2"; shift 2;;
      -sum | --sum) SUM="$2"; shift 2;;
      -convert | --convert) CONVERT="$2"; shift 2;;
      -gs | --gs) GS="$2"; shift 2;;
      # Zvtov options
      -zvtov_prefix | --zvtov_prefix | \
      -zvtov_installation_prefix | --zvtov_installation_prefix)
        ZVTOV_PREFIX="$2"; shift 2
        ;;
      # Zvtov specific options (cannot be computed).
      -use_xmlrpc | --use_xmlrpc) USE_XMLRPC="$2"; shift 2;;
      -xmlrpc | --xmlrpc) XMLRPC="$2"; shift 2;;
      -xmlrpc_flags | --xmlrpc_flags) XMLRPC_FLAGS="$2"; shift 2;;
      -xmlrpc_link | --xmlrpc_link) XMLRPC_LINK="$2"; shift 2;;
      # Configure script specific options
      -no_make_external | --no_make_external) MAKE_EXTERNAL=false; shift;;
      -magic_make_external | --magic_make_external) MAGIC_MAKE_EXTERNAL=true; shift;;
      -static_external | --static_external) STATIC_EXTERNAL=$2; shift 2;;
      -use_tools_prefix_directory | --use_tools_prefix_directory)
        USE_TOOLS_PREFIX_DIRECTORY=$2; shift 2
        ;;
      -use_project_sub_directory | --use_project_sub_directory)
        USE_PROJECT_SUB_DIRECTORY=$2; shift 2
        ;;
      # Generic options
      -debug | --debug) DEBUG=$2; shift 2;;
      -enable_debug | --enable_debug) DEBUG=true; shift;;
      -nodebug | --nodebug | -disable_debug | --disable_debug)
       DEBUG=false; shift;;
      -help | --help)
        usage &&
        exit 0
        ;;

      -*)
         echo "./configure: bad option '$1'" >&2
         echo "For help, use ./configure -help" >&2
         exit 2
         ;;

      *)
         echo "./configure: bad arguments '$@'" >&2
         echo "For help, use ./configure -help" >&2
         exit 2
         ;;
    esac
  done
  ;;

esac

#
# Validity checking for installation of external tools.
#
check_installation_dirs () {
  # Check directories that must be configuration time installable (hence writable).
  for i in ${CONFIGURATION_INSTALLABLE_DIRS}; do
    #echo "Checking if we can install EXTERNAL tools in $i..." >&2
    if test -d $i; then
      : #echo "  the directory exists: good." >&2
      else
        #echo "  the directory does not exist: unrecoverable failure." >&2
        abort_configuration \
          "You cannot install in $i, because it is not a directory.";
        abort_remedy \
          "Please, create a directory where you can install EXTERNAL tools.";
    fi
    if test -w $i; then
      : #echo "  the directory is writable: good." >&2
      else
        #echo "  the directory is not writable: unrecoverable failure." >&2
        abort_configuration_not_writable_tools_prefix_directory "$i";
    fi
    if (touch $i/$$; rm -f $i/$$); then
      : #echo "  you can install in the directory: good." >&2
      else
        #echo "  you cannot install in the directory: unrecoverable failure." >&2
        abort_configuration_not_writable_tools_prefix_directory "$i";
    fi
  done
}

#
# Editing ./.config_var.in with what we learnt here.
#
build_config_file () {
  sed -e "s,@PROJECT_NAME@,$PROJECT_NAME," \
      -e "s,@DEBUG@,$DEBUG," \
      -e "s,@VERSION_NUMBER_MAIN@,$VERSION_NUMBER_MAIN," \
      -e "s,@VERSION_NUMBER_SUB@,$VERSION_NUMBER_SUB," \
      -e "s,@VERSION_NUMBER_PATCH@,$VERSION_NUMBER_PATCH," \
      -e "s,@VERSION_NUMBER_FULL@,$VERSION_NUMBER_FULL," \
      -e "s,@PROJECT_NAME_FULL@,$PROJECT_NAME_FULL," \
      -e "s,@TOOLS_INTERNAL@,$TOOLS_INTERNAL," \
      -e "s,@TOOLS_EXTERNAL@,$TOOLS_EXTERNAL," \
      -e "s,@PROJECT_DELIVERABLES@,$PROJECT_DELIVERABLES," \
  \
      -e "s,@ABSOLUTE_ROOT_DIR@,$ABSOLUTE_ROOT_DIR," \
      -e "s,@PREFIX@,$PREFIX," \
      -e "s,@BIN_DIR@,$BIN_DIR," \
      -e "s,@LIB_DIR@,$LIB_DIR," \
      -e "s,@DOC_DIR@,$DOC_DIR," \
      -e "s,@MAN_DIR@,$MAN_DIR," \
  \
      -e "s,@STATIC_EXTERNAL@,$STATIC_EXTERNAL," \
      -e "s,@TOOLS_PREFIX@,$TOOLS_PREFIX," \
      -e "s,@TOOLS_PROJECT_PREFIX@,$TOOLS_PROJECT_PREFIX," \
      -e "s,@TOOLS_PROJECT_DIR@,$TOOLS_PROJECT_DIR," \
      -e "s,@TOOLS_PROJECT_BIN_DIR@,$TOOLS_PROJECT_BIN_DIR," \
      -e "s,@TOOLS_PROJECT_LIB_DIR@,$TOOLS_PROJECT_LIB_DIR," \
      -e "s,@TOOLS_PROJECT_DOC_DIR@,$TOOLS_PROJECT_DOC_DIR," \
      -e "s,@TOOLS_PROJECT_MAN_DIR@,$TOOLS_PROJECT_MAN_DIR," \
  \
      -e "s,@CAML_PREFIX@,$CAML_PREFIX," \
      -e "s,@CAML_BIN_DIR@,$CAML_BIN_DIR," \
      -e "s,@CAML_LIB_DIR@,$CAML_LIB_DIR," \
      -e "s,@CAML_BYT_COMPILER@,$CAML_BYT_COMPILER," \
      -e "s,@CAML_BIN_COMPILER@,$CAML_BIN_COMPILER," \
      -e "s,@CAML_LEX_COMPILER@,$CAML_LEX_COMPILER," \
      -e "s,@CAML_YAC_COMPILER@,$CAML_YAC_COMPILER," \
      -e "s,@CAML_DEP_COMPILER@,$CAML_DEP_COMPILER," \
      -e "s,@CAML_DOC_COMPILER@,$CAML_DOC_COMPILER," \
      -e "s,@BYT_DEBUG_FLAGS@,$BYT_DEBUG_FLAGS," \
      -e "s,@BIN_DEBUG_FLAGS@,$BIN_DEBUG_FLAGS," \
  \
      -e "s,@CAMLP5_LIB_DIR@,$CAMLP5_LIB_DIR," \
  \
      -e "s,@COQ_PREFIX@,$COQ_PREFIX," \
      -e "s,@COQ_LIB_DIR@,$COQ_LIB_DIR," \
      -e "s,@COQ_CAML_DIR@,$COQ_CAML_DIR," \
      -e "s,@COQ_COMPILER@,$COQ_COMPILER," \
      -e "s,@COQ_DEP_COMPILER@,$COQ_DEP_COMPILER," \
      -e "s,@COQ_RC@,$COQ_RC," \
      -e "s,@COQ_MAKE@,$COQ_MAKE," \
  \
      -e "s,@ZENON_PREFIX@,$ZENON_PREFIX," \
      -e "s,@ZENON_LIB_DIR@,$ZENON_LIB_DIR," \
      -e "s,@ZENON_COMPILER@,$ZENON_COMPILER," \
      -e "s,@USE_COQ_COMPILER@,$USE_COQ_COMPILER," \
      -e "s,@SUM@,$SUM," \
      -e "s,@CONVERT@,$CONVERT," \
      -e "s,@GS@,$GS," \
  \
      -e "s,@ZVTOV_PREFIX@,$ZVTOV_PREFIX," \
      -e "s,@ZVTOV_LIB_DIR@,$ZVTOV_LIB_DIR," \
      -e "s,@ZVTOV_COMPILER@,$ZVTOV_COMPILER," \
      -e "s,@USE_XMLRPC@,$USE_XMLRPC," \
      -e "s,@XMLRPC@,$XMLRPC," \
      -e "s,@XMLRPC_FLAGS@,$XMLRPC_FLAGS," \
      -e "s,@XMLRPC_LINK@,$XMLRPC_LINK," \
      -e "s,@XMLRPC_MODULE@,$XMLRPC_MODULE," \
      <$1 >$2

  chmod g+w $2;

}

build_config_var () {
  build_config_file .config_var.in .config_var
}

build_config_var_for_shell () {

  sed -e "s,@BYT_DEBUG_FLAGS@,\"$BYT_DEBUG_FLAGS\"," \
  <.config_var.in >.config_var_for_shell.in

  build_config_file .config_var_for_shell.in .config_var_for_shell

  rm -f .config_var_for_shell.in

}

build_configuration_variables () {
  build_config_var;
  build_config_var_for_shell;
}

# Bootstrapping .depend.
touch_depends () {
  touch ./.depend;
  chmod g+w ./.depend;
  if test -d tarballs; then
    touch tarballs/.depend;
    chmod g+w tarballs/.depend;
 fi;
}

#
# Copying information gathered here to internal tools.
#
configure_internal_tools () {
  for i in ${TOOLS_INTERNAL}; do
    cp .config_var $i
  done
}

summarize_configuration () {
  echo
  echo "*******************************************"
  echo "Configuration settings summary for ${PROJECT_NAME}"
  echo
  cat .config_var
  echo
  echo "End of configuration settings for ${PROJECT_NAME}."
  echo "*******************************************"
}

#
# The main procedure.
#
main () {
#  parse_arguments;
  set_variables &&
  prefix_main &&
  check_installation_dirs &&
  build_configuration_variables &&
  touch_depends &&
  configure_internal_tools &&
  # Now that .config_var_for_shell is built, we can call ./.configure, the
  # script that does the rest of the work that never necessitates user's
  # interaction.
  if test -x ./.configure; then ./.configure; fi &&
  prefix_summary &&
  continue_configure &&
  summarize_configuration &&
  # Call the Makefile to go on configuring external tools.
  if ${MAGIC_MAKE_EXTERNAL}; then make magic_configure_external_tools; else
    if ${MAKE_EXTERNAL}; then make configure_external_tools; fi;
  fi &&
 echo &&
 echo "Done. Now, please invoke: make"
}

main;
IER=$?;
if test ${IER} -ne 0; then
  abort_configuration &&
  exit 1;
else
 exit 0;
fi
