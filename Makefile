#  Copyright 1997 INRIA
#  $Id: Makefile,v 1.74 2010-01-26 17:59:03 weis Exp $

# Reading configuration settings.
include .config_var

# Staging directory for package managers
DESTDIR = ""

CAMLFLAGS = -warn-error A

# Variables CAMLBYT, CAMLBIN, CAMLLEX, CAMLYACC CAMLDEP CAMLDOC are defined
# at configuration time, and their value is recorded in .config_var.
CAMLBINFLAGS = $(CAMLFLAGS) $(BIN_DEBUG_FLAGS)

CAMLBYTFLAGS = $(CAMLFLAGS) $(BYT_DEBUG_FLAGS)

# SOURCES specifies both the list of source files and the set of
# modules in linking order.

SOURCES = version.ml config.dummy misc.ml heap.ml globals.ml error.ml \
          progress.ml namespace.ml expr.ml \
          phrase.ml llproof.ml mlproof.ml watch.ml eqrel.ml index.ml \
          print.ml step.ml node.ml extension.ml mltoll.ml prove.ml \
          parsezen.mly lexzen.mll parsetptp.mly lextptp.mll \
          parsecoq.mly lexcoq.mll tptp.ml \
          ext_focal.ml ext_tla.ml ext_recfun.ml \
          ext_equiv.ml ext_induct.ml coqterm.ml lltocoq.ml \
          enum.ml isar_case.ml lltoisar.ml \
          checksum.dummy versionnum.ml main.ml

COQSRC = zenon.v zenon_coqbool.v zenon_equiv.v zenon_induct.v zenon_focal.v

DOCSRC =

TESTSRC =

OTHERSRC = INSTALL LICENSE Makefile configure .config_var.in .depend

MLSRC = $(SOURCES:%.dummy=)

MLISRC1 = $(SOURCES:%.mly=)
MLISRC2 = $(MLISRC1:%.mll=%.mli)
MLISRC3 = $(MLISRC2:%.dummy=%.mli)
MLISRC = $(MLISRC3:%.ml=%.mli)

ALLSRC = $(MLSRC) $(MLISRC) $(COQSRC) $(DOCSRC) $(TESTSRC) $(OTHERSRC)


MODULES1 = $(SOURCES:%.ml=%)
MODULES2 = $(MODULES1:%.mly=%)
MODULES3 = $(MODULES2:%.mll=%)
MODULES = $(MODULES3:%.dummy=%)

IMPL = $(MODULES:%=%.ml)
INTF = $(MODULES:%=%.mli)
BYTOBJS = $(MODULES:%=%.cmo)
BINOBJS = $(MODULES:%=%.cmx)

COQOBJ = $(COQSRC:%.v=%.vo)

.PHONY: all byt bin coq

all: byt bin zenon coq

coq: $(COQOBJ)

byt: zenon.byt

bin: zenon.bin

zenon.bin: $(BINOBJS)
	$(CAMLBIN) $(CAMLBINFLAGS) -o zenon.bin $(BINOBJS)

zenon.byt: $(BYTOBJS)
	$(CAMLBYT) $(CAMLBYTFLAGS) -o zenon.byt $(BYTOBJS)

zenon: zenon.byt
	if test -x zenon.bin; then \
	  cp zenon.bin zenon; \
        else \
	  cp zenon.byt zenon; \
	fi

.PHONY: install
install:
	mkdir -p "$(DESTDIR)$(BIN_DIR)"
	cp zenon "$(DESTDIR)$(BIN_DIR)"/$(PROJECT_NAME_FULL)
	(cd "$(DESTDIR)$(BIN_DIR)" && \
         rm -rf zenon && ln -s $(PROJECT_NAME_FULL) zenon)
	mkdir -p "$(DESTDIR)$(LIB_DIR)"/$(PROJECT_NAME_FULL)
	(cd "$(DESTDIR)$(LIB_DIR)" && \
         rm -rf zenon && ln -s $(PROJECT_NAME_FULL) zenon)
	cp $(COQSRC) "$(DESTDIR)$(LIB_DIR)"/$(PROJECT_NAME_FULL)/
	for i in $(COQOBJ); \
	  do [ ! -f $$i ] || cp $$i "$(DESTDIR)$(LIB_DIR)/$(PROJECT_NAME_FULL)"/; \
	done

.PHONY: uninstall
uninstall:
	rm -f "$(DESTDIR)$(BIN_DIR)"/zenon
	rm -f "$(DESTDIR)$(BIN_DIR)"/$(PROJECT_NAME_FULL)
	rm -f "$(DESTDIR)$(LIB_DIR)"/zenon
	rm -rf "$(DESTDIR)$(LIB_DIR)"/$(PROJECT_NAME_FULL)

.SUFFIXES: .ml .mli .cmo .cmi .cmx .v .vo

.ml.cmo:
	$(CAMLBYT) $(CAMLBYTFLAGS) -c $*.ml

.ml.cmx:
	$(CAMLBIN) $(CAMLBINFLAGS) -c $*.ml

.mli.cmi:
	$(CAMLBYT) $(CAMLBYTFLAGS) -c $*.mli

lexzen.ml: lexzen.mll
	$(CAMLLEX) lexzen.mll

parsezen.ml: parsezen.mly
	$(CAMLYACC) -v parsezen.mly

parsezen.mli: parsezen.ml
	:

lextptp.ml: lextptp.mll
	$(CAMLLEX) lextptp.mll

parsetptp.ml: parsetptp.mly
	$(CAMLYACC) -v parsetptp.mly

parsetptp.mli: parsetptp.ml
	:

lexcoq.ml: lexcoq.mll
	$(CAMLLEX) lexcoq.mll

parsecoq.ml: parsecoq.mly
	$(CAMLYACC) -v parsecoq.mly

parsecoq.mli: parsecoq.ml
	:

config.ml: .config_var
	echo '(* This file is automatically generated. *)' >config.ml
	echo 'let libdir = "$(LIB_DIR)/zenon";;' >> config.ml

checksum.ml: $(IMPL:checksum.ml=)
	echo '(* This file is automatically generated. *)' >checksum.ml
	echo 'let v = "'`$(SUM) $(IMPL) | $(SUM)`'";;' >>checksum.ml

.v.vo:
	$(COQC) -q $*.v

.PHONY: dist
dist: $(ALLSRC)
	mkdir -p dist/zenon
	cp $(ALLSRC) dist/zenon
	cd dist && tar cf - zenon | gzip >../zenon.tar.gz

.PHONY: doc odoc docdir
doc odoc docdir:
	@cd doc; make all

.PHONY: clean
clean:
	cd doc; make clean
	cd test; make clean
	rm -f .#*
	rm -f *.cm* *.o *.vo *.annot *.output
	rm -f parsezen.ml parsezen.mli lexzen.ml
	rm -f parsetptp.ml parsetptp.mli lextptp.ml
	rm -f parsecoq.ml parsecoq.mli lexcoq.ml
	rm -f checksum.ml
	rm -f zenon *.bin *.byt
	rm -rf dist zenon.tar.gz

.PHONY: unconfigure
unconfigure:
	rm -f ./.config_var ./.config_var_for_shell

.PHONY: distclean
distclean: clean unconfigure
	rm -f ./*~ ./.*~

.PHONY: depend
depend: $(IMPL) $(INTF) $(COQSRC)
	$(CAMLDEP) $(IMPL) $(INTF) >.depend
	$(COQDEP) $(COQSRC) >>.depend

include .depend
