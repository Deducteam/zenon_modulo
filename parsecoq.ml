type token =
  | IDENT of (string)
  | STRING of (string)
  | NUM of (string)
  | BANG_
  | PERCENT_
  | AMPER_
  | AMPER_AMPER_
  | LPAREN_
  | LPAREN_RPAREN_
  | RPAREN_
  | STAR_
  | PLUS_
  | PLUS_PLUS_
  | COMMA_
  | DASH_
  | DASH_GT_
  | PERIOD_
  | PERIOD_LPAREN_
  | PERIOD_PERIOD_
  | SLASH_
  | SLASH_BACKSL_
  | COLON_
  | COLON_COLON_
  | COLON_LT_
  | COLON_EQ_
  | COLON_GT_
  | SEMI_
  | LT_
  | LT_DASH_
  | LT_DASH_GT_
  | LT_COLON_
  | LT_EQ_
  | LT_GT_
  | EQ_
  | EQ_GT_
  | EQ_UNDER_D_
  | GT_
  | GT_DASH_GT_
  | GT_EQ_
  | QUEST_
  | QUEST_EQ_
  | AROBAS_
  | LBRACK_
  | BACKSL_SLASH_
  | RBRACK_
  | HAT_
  | LBRACE_
  | BAR_
  | BAR_DASH_
  | BAR_BAR_
  | RBRACE_
  | TILDE_
  | MUSTUSE
  | DEFINITION
  | DEPENDS
  | ELSE
  | END
  | EXISTS
  | FALSE
  | FIX
  | FIXPOINT
  | FORALL
  | FUN
  | FUNCTION
  | IF
  | IN
  | INDUCTIVE
  | LET
  | MATCH
  | ON
  | PARAMETER
  | STRUCT
  | THEN
  | THEOREM
  | TRUE
  | WITH
  | BEGINPROOF
  | BEGINNAME of (string)
  | BEGINHEADER
  | ENDPROOF
  | EOF

open Parsing;;
# 4 "parsecoq.mly"
Version.add "$Id: parsecoq.mly,v 1.34 2012-04-11 18:27:26 doligez Exp $";;

open Printf;;

open Expr;;
open Namespace;;
open Phrase;;

let rec mk_type_string e =
  match e with
  | Evar (s, _) -> s
  | Emeta _ -> assert false
  | Eapp ("*", [e1; e2], _) ->
     sprintf "(%s*%s)" (mk_type_string e1) (mk_type_string e2)
  | Eapp ("%", [e1; e2], _) ->
     sprintf "((%s)%%%s)" (mk_type_string e1) (mk_type_string e2)
  | Eapp (s, args, _) ->
     let inside =
       List.fold_left (fun s a -> sprintf "%s %s" s (mk_type_string a)) s args
     in
     sprintf "(%s)" inside
  | Eimply (e1, e2, _) ->
     sprintf "(%s -> %s)" (mk_type_string e1) (mk_type_string e2)
  | _ -> assert false (* FIXME TODO *)
;;

let mk_eapp (s, args) =
  match (s, args) with
  | "and", [e1; e2] -> eand (e1, e2)
  | "or", [e1; e2] -> eor (e1, e2)
  | "not", [e1] -> enot (e1)
  | _ -> eapp (s, args)
;;

let mk_apply (e, l) =
  match e with
  | Eapp (s, args, _) -> mk_eapp (s, args @ l)
  | Evar (s, _) -> mk_eapp (s, l)
  | _ -> raise Parse_error
;;

let rec mk_arobas_apply (id, l) =
  match l with
  | Evar ("_", _) :: t -> mk_arobas_apply (id, t)
  | [] -> evar (id)
  | _ -> eapp (id, l)
;;

let mk_all bindings body =
  let f (var, ty) e = eall (evar var, ty, e) in
  List.fold_right f bindings body
;;

let mk_ex bindings body =
  let f (var, ty) e = eex (evar var, ty, e) in
  List.fold_right f bindings body
;;

let mk_lam bindings body =
  let f (var, ty) e = elam (evar var, ty, e) in
  List.fold_right f bindings body
;;

let mk_fix ident ty bindings body =
  let f (var, ty) e = elam (evar var, ty, e) in
  (ident, eapp ("$fix", [ List.fold_right f ((ident, ty) :: bindings) body ]))
;;

let rec get_params e =
  match e with
  | Elam (v, _, body, _) ->
      let (p, e1) = get_params body in
      (v :: p, e1)
  | _ -> ([], e)
;;

let mk_let id expr body =
  substitute_2nd [(evar id, expr)] body
;;

let mk_let_fix (id, def) body = mk_let id def body;;

let mk_pattern (constr, args) body =
  let bindings = List.map (fun v -> (v, "")) args in
  mk_lam bindings (eapp ("$match-case", [evar (constr); body]))
;;

let mk_inductive name bindings constrs =
  let args = List.map fst bindings in
  let g (tcon, targs) =
    if tcon = name && targs = args then Self
    else Param (String.concat " " (tcon :: targs))
  in
  let f (cname, args) = (cname, List.map g args) in
  Inductive (name, args, List.map f constrs, name ^ "_ind")
;;

let mk_pairs e l =
  let f x y = eapp ("@", [evar "Datatypes.pair"; evar "_"; evar "_"; x; y]) in
  List.fold_left f e l
;;

let mk_string s = evar ("\"" ^ s ^ "\"") ;;
# 190 "parsecoq.ml"
let yytransl_const = [|
  260 (* BANG_ *);
  261 (* PERCENT_ *);
  262 (* AMPER_ *);
  263 (* AMPER_AMPER_ *);
  264 (* LPAREN_ *);
  265 (* LPAREN_RPAREN_ *);
  266 (* RPAREN_ *);
  267 (* STAR_ *);
  268 (* PLUS_ *);
  269 (* PLUS_PLUS_ *);
  270 (* COMMA_ *);
  271 (* DASH_ *);
  272 (* DASH_GT_ *);
  273 (* PERIOD_ *);
  274 (* PERIOD_LPAREN_ *);
  275 (* PERIOD_PERIOD_ *);
  276 (* SLASH_ *);
  277 (* SLASH_BACKSL_ *);
  278 (* COLON_ *);
  279 (* COLON_COLON_ *);
  280 (* COLON_LT_ *);
  281 (* COLON_EQ_ *);
  282 (* COLON_GT_ *);
  283 (* SEMI_ *);
  284 (* LT_ *);
  285 (* LT_DASH_ *);
  286 (* LT_DASH_GT_ *);
  287 (* LT_COLON_ *);
  288 (* LT_EQ_ *);
  289 (* LT_GT_ *);
  290 (* EQ_ *);
  291 (* EQ_GT_ *);
  292 (* EQ_UNDER_D_ *);
  293 (* GT_ *);
  294 (* GT_DASH_GT_ *);
  295 (* GT_EQ_ *);
  296 (* QUEST_ *);
  297 (* QUEST_EQ_ *);
  298 (* AROBAS_ *);
  299 (* LBRACK_ *);
  300 (* BACKSL_SLASH_ *);
  301 (* RBRACK_ *);
  302 (* HAT_ *);
  303 (* LBRACE_ *);
  304 (* BAR_ *);
  305 (* BAR_DASH_ *);
  306 (* BAR_BAR_ *);
  307 (* RBRACE_ *);
  308 (* TILDE_ *);
  309 (* MUSTUSE *);
  310 (* DEFINITION *);
  311 (* DEPENDS *);
  312 (* ELSE *);
  313 (* END *);
  314 (* EXISTS *);
  315 (* FALSE *);
  316 (* FIX *);
  317 (* FIXPOINT *);
  318 (* FORALL *);
  319 (* FUN *);
  320 (* FUNCTION *);
  321 (* IF *);
  322 (* IN *);
  323 (* INDUCTIVE *);
  324 (* LET *);
  325 (* MATCH *);
  326 (* ON *);
  327 (* PARAMETER *);
  328 (* STRUCT *);
  329 (* THEN *);
  330 (* THEOREM *);
  331 (* TRUE *);
  332 (* WITH *);
  333 (* BEGINPROOF *);
  335 (* BEGINHEADER *);
  336 (* ENDPROOF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* STRING *);
  259 (* NUM *);
  334 (* BEGINNAME *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\004\000\004\000\005\000\005\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\007\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\011\000\011\000\013\000\
\013\000\009\000\009\000\014\000\014\000\014\000\006\000\006\000\
\016\000\015\000\015\000\017\000\017\000\017\000\012\000\018\000\
\018\000\019\000\019\000\019\000\019\000\019\000\019\000\020\000\
\020\000\022\000\022\000\022\000\002\000\002\000\021\000\021\000\
\023\000\023\000\023\000\024\000\024\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\000\000"

let yylen = "\002\000\
\007\000\003\000\005\000\004\000\002\000\000\000\002\000\004\000\
\004\000\004\000\004\000\006\000\010\000\008\000\005\000\006\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\003\000\002\000\001\000\011\000\001\000\001\000\001\000\004\000\
\005\000\005\000\003\000\001\000\001\000\001\000\002\000\002\000\
\003\000\000\000\005\000\003\000\002\000\005\000\001\000\001\000\
\003\000\000\000\002\000\000\000\002\000\004\000\001\000\001\000\
\001\000\005\000\005\000\008\000\012\000\011\000\008\000\000\000\
\006\000\003\000\002\000\001\000\002\000\000\000\005\000\000\000\
\001\000\003\000\005\000\003\000\002\000\000\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\004\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\029\000\031\000\030\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000\000\
\088\000\000\000\000\000\000\000\000\000\068\000\000\000\000\000\
\000\000\023\000\067\000\000\000\057\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\048\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\069\000\
\000\000\035\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\066\000\051\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\022\000\021\000\000\000\002\000\
\000\000\039\000\000\000\000\000\000\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\000\000\000\000\034\000\
\033\000\041\000\000\000\000\000\059\000\054\000\000\000\000\000\
\000\000\000\000\079\000\082\000\081\000\000\000\083\000\080\000\
\084\000\000\000\085\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\058\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\087\000\086\000\000\000\
\000\000\000\000\000\000\044\000\000\000\001\000\065\000\060\000\
\000\000\000\000\000\000\063\000\000\000\000\000\000\000\000\000\
\043\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\077\000\000\000\000\000\071\000\000\000\000\000\061\000\
\000\000\076\000\000\000\074\000\000\000\000\000\075\000"

let yydgoto = "\002\000\
\025\000\026\000\124\000\028\000\060\000\042\000\055\000\141\000\
\147\000\029\000\071\000\125\000\077\000\178\000\043\000\044\000\
\045\000\038\000\030\000\080\000\205\000\031\000\236\000\237\000"

let yysindex = "\057\000\
\081\003\000\000\000\000\000\000\000\000\145\255\105\255\145\255\
\200\000\066\255\079\255\038\255\000\000\109\255\038\255\038\255\
\160\255\145\255\162\255\021\255\145\255\130\255\000\000\090\255\
\000\000\112\255\222\255\145\255\016\255\000\000\099\002\049\001\
\016\255\000\000\000\000\184\255\000\000\175\255\200\000\038\255\
\201\255\192\255\190\255\000\000\000\000\184\255\204\255\189\255\
\184\255\022\255\107\255\118\255\226\255\229\255\166\255\000\255\
\000\000\223\255\090\255\168\255\246\255\145\255\145\255\145\255\
\145\255\145\255\145\255\248\000\222\255\016\255\000\000\000\000\
\248\255\000\000\145\255\145\255\240\255\000\000\002\000\231\255\
\145\255\000\000\000\000\000\000\201\255\251\255\145\255\145\255\
\211\255\145\255\145\255\238\255\145\255\107\255\242\255\045\002\
\145\255\247\255\038\255\145\255\217\255\145\255\000\000\090\255\
\003\000\183\000\149\255\183\000\000\000\000\000\069\255\000\000\
\199\255\000\000\004\000\133\000\057\001\000\000\006\000\145\255\
\191\000\107\255\183\000\183\000\000\000\200\255\183\000\183\000\
\145\255\207\255\023\000\045\002\045\002\045\002\045\002\045\002\
\045\002\045\002\045\002\045\002\013\000\020\255\045\002\241\255\
\183\000\163\255\228\255\249\000\000\000\145\255\039\001\000\000\
\000\000\000\000\145\255\015\000\000\000\000\000\041\000\253\255\
\145\255\018\000\000\000\000\000\000\000\036\000\000\000\000\000\
\000\000\037\000\000\000\145\255\145\255\040\000\235\255\201\255\
\165\255\024\000\000\000\000\000\115\001\000\000\043\000\145\255\
\009\000\145\255\183\000\030\000\045\002\045\002\151\255\183\000\
\038\000\060\000\000\000\046\255\056\000\145\255\071\001\184\255\
\173\001\064\000\067\000\081\000\070\000\000\000\000\000\145\255\
\145\255\039\000\094\000\000\000\061\002\000\000\000\000\000\000\
\145\255\073\000\080\000\000\000\183\000\075\000\082\000\107\000\
\000\000\096\000\145\255\221\255\145\255\145\255\000\000\145\255\
\231\001\201\255\234\255\030\000\108\000\183\000\104\000\091\002\
\000\000\000\000\234\255\095\255\000\000\221\255\145\255\000\000\
\126\000\000\000\221\255\000\000\183\000\127\000\000\000"

let yyrindex = "\000\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\254\254\000\000\000\000\254\254\120\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\076\255\
\000\000\000\000\144\001\000\000\001\000\000\000\005\000\000\000\
\059\000\000\000\000\000\176\255\000\000\000\000\000\000\115\255\
\123\000\000\000\000\000\000\000\000\000\099\000\000\000\000\000\
\131\000\000\000\134\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\076\255\118\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\068\000\117\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\209\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\174\255\000\000\130\000\
\000\000\000\000\040\255\000\000\101\000\000\000\000\000\160\003\
\000\000\041\001\175\000\099\001\000\000\000\000\233\000\000\000\
\000\000\000\000\000\000\000\000\149\000\000\000\000\000\000\000\
\000\000\174\255\157\001\164\255\000\000\000\000\215\001\017\002\
\000\000\000\000\000\000\091\255\091\255\091\255\150\000\091\255\
\091\255\091\255\150\000\091\255\000\000\000\000\150\000\000\000\
\075\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\140\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\133\002\145\000\091\255\091\255\000\000\191\002\
\000\000\000\000\000\000\159\000\000\000\000\000\000\000\067\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\101\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\249\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\255\000\000\145\000\142\255\051\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\110\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\252\255\007\000\000\000\203\255\250\255\000\000\243\255\
\222\000\063\000\249\255\138\255\065\001\010\001\216\255\153\001\
\219\255\174\001\022\000\214\255\215\000\000\000\170\255\053\255"

let yytablesize = 1259
let yytable = "\083\000\
\027\000\156\000\084\000\089\000\070\000\103\000\092\000\027\000\
\047\000\048\000\160\000\052\000\032\000\095\000\034\000\062\000\
\003\000\004\000\005\000\050\000\063\000\052\000\068\000\006\000\
\050\000\078\000\072\000\056\000\053\000\064\000\035\000\244\000\
\065\000\066\000\069\000\062\000\183\000\062\000\040\000\249\000\
\063\000\050\000\063\000\067\000\083\000\041\000\085\000\050\000\
\050\000\064\000\149\000\064\000\065\000\066\000\065\000\066\000\
\084\000\001\000\026\000\211\000\082\000\050\000\114\000\067\000\
\113\000\067\000\036\000\037\000\106\000\107\000\108\000\109\000\
\110\000\111\000\013\000\101\000\006\000\006\000\006\000\050\000\
\054\000\116\000\117\000\006\000\158\000\173\000\052\000\121\000\
\064\000\063\000\023\000\070\000\144\000\123\000\093\000\070\000\
\127\000\128\000\226\000\130\000\078\000\065\000\066\000\142\000\
\250\000\033\000\145\000\094\000\148\000\046\000\251\000\239\000\
\067\000\064\000\041\000\078\000\038\000\006\000\163\000\164\000\
\165\000\166\000\167\000\168\000\169\000\170\000\171\000\006\000\
\052\000\174\000\057\000\037\000\070\000\006\000\006\000\195\000\
\050\000\006\000\006\000\096\000\006\000\050\000\097\000\006\000\
\006\000\003\000\004\000\005\000\039\000\052\000\006\000\073\000\
\006\000\006\000\052\000\195\000\181\000\215\000\073\000\252\000\
\049\000\052\000\051\000\176\000\254\000\196\000\062\000\187\000\
\059\000\063\000\177\000\063\000\177\000\055\000\020\000\206\000\
\207\000\055\000\191\000\192\000\064\000\065\000\066\000\065\000\
\066\000\061\000\007\000\052\000\055\000\073\000\201\000\079\000\
\203\000\242\000\067\000\052\000\008\000\064\000\055\000\081\000\
\056\000\085\000\012\000\013\000\213\000\087\000\015\000\016\000\
\052\000\018\000\055\000\088\000\020\000\021\000\221\000\222\000\
\208\000\090\000\050\000\023\000\052\000\234\000\062\000\091\000\
\050\000\050\000\098\000\063\000\235\000\099\000\050\000\100\000\
\019\000\233\000\234\000\238\000\064\000\062\000\240\000\065\000\
\066\000\243\000\063\000\050\000\102\000\104\000\105\000\112\000\
\115\000\118\000\067\000\064\000\120\000\253\000\065\000\066\000\
\050\000\126\000\119\000\129\000\122\000\027\000\161\000\131\000\
\146\000\067\000\027\000\027\000\143\000\152\000\027\000\159\000\
\027\000\027\000\009\000\010\000\011\000\027\000\151\000\162\000\
\150\000\027\000\014\000\155\000\179\000\017\000\027\000\175\000\
\019\000\027\000\027\000\027\000\022\000\172\000\182\000\184\000\
\017\000\185\000\188\000\186\000\027\000\189\000\190\000\027\000\
\027\000\193\000\194\000\027\000\200\000\027\000\027\000\027\000\
\027\000\027\000\198\000\202\000\210\000\027\000\209\000\026\000\
\027\000\212\000\027\000\027\000\026\000\026\000\214\000\027\000\
\026\000\027\000\026\000\026\000\027\000\204\000\070\000\026\000\
\027\000\219\000\062\000\026\000\070\000\217\000\220\000\063\000\
\026\000\223\000\062\000\026\000\026\000\026\000\224\000\063\000\
\064\000\227\000\018\000\065\000\066\000\228\000\026\000\230\000\
\064\000\026\000\026\000\065\000\066\000\026\000\067\000\026\000\
\026\000\026\000\026\000\026\000\231\000\218\000\067\000\026\000\
\232\000\038\000\026\000\246\000\026\000\026\000\038\000\038\000\
\247\000\026\000\038\000\026\000\038\000\038\000\026\000\250\000\
\255\000\038\000\026\000\070\000\229\000\038\000\153\000\070\000\
\050\000\064\000\038\000\070\000\062\000\038\000\038\000\038\000\
\064\000\063\000\078\000\052\000\009\000\042\000\040\000\078\000\
\038\000\072\000\064\000\038\000\038\000\065\000\066\000\038\000\
\050\000\038\000\038\000\038\000\038\000\038\000\050\000\028\000\
\067\000\038\000\225\000\020\000\038\000\154\000\038\000\038\000\
\020\000\020\000\197\000\038\000\020\000\038\000\020\000\020\000\
\038\000\086\000\245\000\058\000\038\000\000\000\062\000\020\000\
\000\000\000\000\000\000\063\000\020\000\000\000\062\000\157\000\
\000\000\020\000\000\000\063\000\064\000\000\000\008\000\065\000\
\066\000\000\000\020\000\000\000\064\000\020\000\020\000\065\000\
\066\000\020\000\067\000\020\000\020\000\020\000\020\000\020\000\
\000\000\000\000\067\000\020\000\000\000\019\000\020\000\000\000\
\020\000\020\000\019\000\019\000\000\000\020\000\019\000\020\000\
\019\000\019\000\020\000\000\000\000\000\010\000\020\000\000\000\
\000\000\019\000\000\000\000\000\014\000\000\000\019\000\017\000\
\062\000\180\000\019\000\019\000\000\000\063\000\022\000\000\000\
\010\000\000\000\000\000\000\000\000\000\000\000\064\000\019\000\
\019\000\065\000\066\000\019\000\000\000\019\000\019\000\019\000\
\019\000\019\000\000\000\000\000\067\000\019\000\000\000\000\000\
\019\000\000\000\019\000\019\000\000\000\017\000\000\000\019\000\
\000\000\019\000\017\000\017\000\019\000\073\000\017\000\000\000\
\019\000\017\000\074\000\075\000\000\000\000\000\076\000\000\000\
\062\000\017\000\000\000\000\000\000\000\063\000\076\000\000\000\
\062\000\000\000\011\000\017\000\000\000\063\000\064\000\000\000\
\000\000\065\000\066\000\000\000\000\000\000\000\064\000\017\000\
\017\000\065\000\066\000\017\000\067\000\017\000\017\000\017\000\
\017\000\017\000\000\000\000\000\067\000\017\000\000\000\018\000\
\017\000\000\000\017\000\017\000\018\000\018\000\000\000\017\000\
\018\000\017\000\000\000\018\000\017\000\000\000\000\000\000\000\
\017\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\199\000\016\000\018\000\000\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\018\000\018\000\065\000\066\000\018\000\000\000\018\000\
\018\000\018\000\018\000\018\000\000\000\000\000\067\000\018\000\
\000\000\009\000\018\000\000\000\018\000\018\000\009\000\009\000\
\000\000\018\000\009\000\018\000\000\000\009\000\018\000\000\000\
\000\000\000\000\018\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\216\000\012\000\009\000\
\000\000\063\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\009\000\009\000\065\000\066\000\009\000\
\000\000\009\000\009\000\009\000\009\000\009\000\000\000\000\000\
\067\000\009\000\000\000\008\000\009\000\000\000\009\000\009\000\
\008\000\008\000\000\000\009\000\008\000\009\000\000\000\008\000\
\009\000\000\000\000\000\000\000\009\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\241\000\
\014\000\008\000\000\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\008\000\008\000\065\000\
\066\000\008\000\000\000\008\000\008\000\008\000\008\000\008\000\
\000\000\000\000\067\000\008\000\000\000\010\000\008\000\000\000\
\008\000\008\000\010\000\010\000\000\000\008\000\010\000\008\000\
\000\000\010\000\008\000\000\000\000\000\000\000\008\000\000\000\
\000\000\010\000\000\000\000\000\000\000\132\000\000\000\133\000\
\000\000\134\000\013\000\010\000\135\000\136\000\000\000\137\000\
\000\000\000\000\000\000\000\000\000\000\138\000\139\000\010\000\
\010\000\000\000\140\000\010\000\000\000\010\000\010\000\010\000\
\010\000\010\000\000\000\000\000\062\000\010\000\000\000\011\000\
\010\000\063\000\010\000\010\000\011\000\011\000\000\000\010\000\
\011\000\010\000\064\000\011\000\010\000\065\000\066\000\000\000\
\010\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\
\067\000\000\000\062\000\248\000\146\000\011\000\000\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\011\000\011\000\065\000\066\000\011\000\000\000\011\000\
\011\000\011\000\011\000\011\000\000\000\000\000\067\000\011\000\
\000\000\016\000\011\000\000\000\011\000\011\000\016\000\016\000\
\000\000\011\000\016\000\011\000\000\000\016\000\011\000\009\000\
\010\000\011\000\011\000\000\000\000\000\016\000\000\000\014\000\
\000\000\000\000\017\000\000\000\000\000\019\000\000\000\016\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\016\000\000\000\000\000\016\000\
\000\000\016\000\016\000\016\000\016\000\016\000\000\000\000\000\
\000\000\016\000\000\000\012\000\016\000\000\000\016\000\016\000\
\012\000\012\000\000\000\016\000\012\000\016\000\000\000\012\000\
\016\000\000\000\000\000\000\000\016\000\000\000\000\000\012\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\012\000\000\000\
\000\000\012\000\000\000\012\000\012\000\012\000\012\000\012\000\
\000\000\000\000\000\000\012\000\000\000\014\000\012\000\000\000\
\012\000\012\000\014\000\014\000\000\000\012\000\014\000\012\000\
\000\000\014\000\012\000\000\000\000\000\000\000\012\000\000\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\014\000\000\000\000\000\014\000\000\000\014\000\014\000\014\000\
\014\000\014\000\000\000\000\000\000\000\014\000\000\000\013\000\
\014\000\000\000\014\000\014\000\013\000\013\000\000\000\014\000\
\013\000\014\000\000\000\013\000\014\000\000\000\000\000\000\000\
\014\000\000\000\000\000\013\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000\005\000\000\000\013\000\000\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\013\000\000\000\000\000\013\000\000\000\013\000\
\013\000\013\000\013\000\013\000\000\000\000\000\000\000\013\000\
\000\000\000\000\013\000\000\000\013\000\013\000\005\000\005\000\
\005\000\013\000\007\000\013\000\000\000\005\000\013\000\000\000\
\000\000\000\000\013\000\000\000\008\000\009\000\010\000\011\000\
\000\000\000\000\012\000\013\000\000\000\014\000\015\000\016\000\
\017\000\018\000\000\000\019\000\020\000\021\000\000\000\022\000\
\000\000\000\000\000\000\023\000\000\000\024\000\000\000\005\000\
\006\000\006\000\006\000\000\000\000\000\000\000\000\000\006\000\
\000\000\005\000\000\000\000\000\000\000\000\000\000\000\005\000\
\005\000\000\000\000\000\005\000\005\000\000\000\005\000\000\000\
\000\000\005\000\005\000\000\000\000\000\000\000\000\000\000\000\
\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\006\000\006\000\000\000\000\000\006\000\006\000\000\000\
\006\000\000\000\000\000\006\000\006\000\000\000\000\000\000\000\
\000\000\000\000\006\000"

let yycheck = "\040\000\
\000\000\120\000\040\000\046\000\000\000\059\000\049\000\001\000\
\015\000\016\000\129\000\014\001\006\000\051\000\008\000\016\001\
\001\001\002\001\003\001\022\001\021\001\001\001\027\000\008\001\
\018\000\033\000\031\000\021\000\008\001\030\001\009\000\235\000\
\033\001\034\001\028\000\016\001\155\000\016\001\001\001\243\000\
\021\001\010\001\021\001\044\001\085\000\008\001\001\001\016\001\
\017\001\030\001\104\000\030\001\033\001\034\001\033\001\034\001\
\094\000\001\000\000\000\014\001\039\000\022\001\070\000\044\001\
\069\000\044\001\001\001\002\001\062\000\063\000\064\000\065\000\
\066\000\067\000\059\001\076\001\001\001\002\001\003\001\048\001\
\060\001\075\000\076\000\008\001\122\000\066\001\047\001\081\000\
\022\001\021\001\075\001\029\000\099\000\087\000\073\001\033\000\
\090\000\091\000\217\000\093\000\010\001\033\001\034\001\097\000\
\010\001\001\001\100\000\001\001\102\000\001\001\016\001\230\000\
\044\001\047\001\008\001\025\001\000\000\042\001\132\000\133\000\
\134\000\135\000\136\000\137\000\138\000\139\000\140\000\052\001\
\014\001\143\000\001\001\002\001\070\000\058\001\059\001\176\000\
\022\001\062\001\063\001\022\001\065\001\022\001\025\001\068\001\
\069\001\001\001\002\001\003\001\070\001\035\001\075\001\010\001\
\008\001\078\001\035\001\196\000\150\000\200\000\017\001\246\000\
\001\001\047\001\001\001\001\001\251\000\001\001\016\001\161\000\
\079\001\021\001\008\001\021\001\008\001\010\001\000\000\189\000\
\190\000\014\001\172\000\173\000\030\001\033\001\034\001\033\001\
\034\001\074\001\042\001\014\001\025\001\048\001\184\000\008\001\
\186\000\234\000\044\001\022\001\052\001\022\001\035\001\025\001\
\025\001\001\001\058\001\059\001\198\000\014\001\062\001\063\001\
\035\001\065\001\047\001\022\001\068\001\069\001\208\000\209\000\
\066\001\014\001\010\001\075\001\047\001\001\001\016\001\035\001\
\016\001\017\001\001\001\021\001\008\001\001\001\022\001\066\001\
\000\000\227\000\001\001\229\000\030\001\016\001\232\000\033\001\
\034\001\008\001\021\001\035\001\022\001\078\001\001\001\000\000\
\001\001\010\001\044\001\030\001\022\001\247\000\033\001\034\001\
\048\001\047\001\001\001\022\001\010\001\005\001\056\001\022\001\
\048\001\044\001\010\001\011\001\022\001\010\001\014\001\072\001\
\016\001\017\001\053\001\054\001\055\001\021\001\080\001\001\001\
\022\001\025\001\061\001\022\001\057\001\064\001\030\001\047\001\
\067\001\033\001\034\001\035\001\071\001\025\001\000\000\025\001\
\000\000\001\001\025\001\047\001\044\001\010\001\010\001\047\001\
\048\001\010\001\072\001\051\001\010\001\053\001\054\001\055\001\
\056\001\057\001\035\001\051\001\001\001\061\001\025\001\005\001\
\064\001\010\001\066\001\067\001\010\001\011\001\000\000\071\001\
\014\001\073\001\016\001\017\001\076\001\048\001\074\001\021\001\
\080\001\001\001\016\001\025\001\080\001\022\001\017\001\021\001\
\030\001\051\001\016\001\033\001\034\001\035\001\001\001\021\001\
\030\001\025\001\000\000\033\001\034\001\022\001\044\001\022\001\
\030\001\047\001\048\001\033\001\034\001\051\001\044\001\053\001\
\054\001\055\001\056\001\057\001\010\001\051\001\044\001\061\001\
\025\001\005\001\064\001\016\001\066\001\067\001\010\001\011\001\
\025\001\071\001\014\001\073\001\016\001\017\001\076\001\010\001\
\010\001\021\001\080\001\074\001\066\001\025\001\010\001\000\000\
\022\001\047\001\030\001\080\001\016\001\033\001\034\001\035\001\
\022\001\021\001\025\001\022\001\000\000\057\001\010\001\010\001\
\044\001\017\001\030\001\047\001\048\001\033\001\034\001\051\001\
\010\001\053\001\054\001\055\001\056\001\057\001\035\001\066\001\
\044\001\061\001\213\000\005\001\064\001\117\000\066\001\067\001\
\010\001\011\001\177\000\071\001\014\001\073\001\016\001\017\001\
\076\001\041\000\236\000\022\000\080\001\255\255\016\001\025\001\
\255\255\255\255\255\255\021\001\030\001\255\255\016\001\017\001\
\255\255\035\001\255\255\021\001\030\001\255\255\000\000\033\001\
\034\001\255\255\044\001\255\255\030\001\047\001\048\001\033\001\
\034\001\051\001\044\001\053\001\054\001\055\001\056\001\057\001\
\255\255\255\255\044\001\061\001\255\255\005\001\064\001\255\255\
\066\001\067\001\010\001\011\001\255\255\071\001\014\001\073\001\
\016\001\017\001\076\001\255\255\255\255\054\001\080\001\255\255\
\255\255\025\001\255\255\255\255\061\001\255\255\030\001\064\001\
\016\001\017\001\067\001\035\001\255\255\021\001\071\001\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\030\001\047\001\
\048\001\033\001\034\001\051\001\255\255\053\001\054\001\055\001\
\056\001\057\001\255\255\255\255\044\001\061\001\255\255\255\255\
\064\001\255\255\066\001\067\001\255\255\005\001\255\255\071\001\
\255\255\073\001\010\001\011\001\076\001\005\001\014\001\255\255\
\080\001\017\001\010\001\011\001\255\255\255\255\014\001\255\255\
\016\001\025\001\255\255\255\255\255\255\021\001\014\001\255\255\
\016\001\255\255\000\000\035\001\255\255\021\001\030\001\255\255\
\255\255\033\001\034\001\255\255\255\255\255\255\030\001\047\001\
\048\001\033\001\034\001\051\001\044\001\053\001\054\001\055\001\
\056\001\057\001\255\255\255\255\044\001\061\001\255\255\005\001\
\064\001\255\255\066\001\067\001\010\001\011\001\255\255\071\001\
\014\001\073\001\255\255\017\001\076\001\255\255\255\255\255\255\
\080\001\255\255\255\255\025\001\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\000\000\035\001\255\255\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\047\001\048\001\033\001\034\001\051\001\255\255\053\001\
\054\001\055\001\056\001\057\001\255\255\255\255\044\001\061\001\
\255\255\005\001\064\001\255\255\066\001\067\001\010\001\011\001\
\255\255\071\001\014\001\073\001\255\255\017\001\076\001\255\255\
\255\255\255\255\080\001\255\255\255\255\025\001\255\255\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\000\000\035\001\
\255\255\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\047\001\048\001\033\001\034\001\051\001\
\255\255\053\001\054\001\055\001\056\001\057\001\255\255\255\255\
\044\001\061\001\255\255\005\001\064\001\255\255\066\001\067\001\
\010\001\011\001\255\255\071\001\014\001\073\001\255\255\017\001\
\076\001\255\255\255\255\255\255\080\001\255\255\255\255\025\001\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\000\000\035\001\255\255\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\047\001\048\001\033\001\
\034\001\051\001\255\255\053\001\054\001\055\001\056\001\057\001\
\255\255\255\255\044\001\061\001\255\255\005\001\064\001\255\255\
\066\001\067\001\010\001\011\001\255\255\071\001\014\001\073\001\
\255\255\017\001\076\001\255\255\255\255\255\255\080\001\255\255\
\255\255\025\001\255\255\255\255\255\255\001\001\255\255\003\001\
\255\255\005\001\000\000\035\001\008\001\009\001\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\047\001\
\048\001\255\255\022\001\051\001\255\255\053\001\054\001\055\001\
\056\001\057\001\255\255\255\255\016\001\061\001\255\255\005\001\
\064\001\021\001\066\001\067\001\010\001\011\001\255\255\071\001\
\014\001\073\001\030\001\017\001\076\001\033\001\034\001\255\255\
\080\001\255\255\255\255\025\001\255\255\255\255\255\255\255\255\
\044\001\255\255\016\001\017\001\048\001\035\001\255\255\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\047\001\048\001\033\001\034\001\051\001\255\255\053\001\
\054\001\055\001\056\001\057\001\255\255\255\255\044\001\061\001\
\255\255\005\001\064\001\255\255\066\001\067\001\010\001\011\001\
\255\255\071\001\014\001\073\001\255\255\017\001\076\001\053\001\
\054\001\055\001\080\001\255\255\255\255\025\001\255\255\061\001\
\255\255\255\255\064\001\255\255\255\255\067\001\255\255\035\001\
\255\255\071\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\048\001\255\255\255\255\051\001\
\255\255\053\001\054\001\055\001\056\001\057\001\255\255\255\255\
\255\255\061\001\255\255\005\001\064\001\255\255\066\001\067\001\
\010\001\011\001\255\255\071\001\014\001\073\001\255\255\017\001\
\076\001\255\255\255\255\255\255\080\001\255\255\255\255\025\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\048\001\255\255\
\255\255\051\001\255\255\053\001\054\001\055\001\056\001\057\001\
\255\255\255\255\255\255\061\001\255\255\005\001\064\001\255\255\
\066\001\067\001\010\001\011\001\255\255\071\001\014\001\073\001\
\255\255\017\001\076\001\255\255\255\255\255\255\080\001\255\255\
\255\255\025\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\048\001\255\255\255\255\051\001\255\255\053\001\054\001\055\001\
\056\001\057\001\255\255\255\255\255\255\061\001\255\255\005\001\
\064\001\255\255\066\001\067\001\010\001\011\001\255\255\071\001\
\014\001\073\001\255\255\017\001\076\001\255\255\255\255\255\255\
\080\001\255\255\255\255\025\001\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\035\001\255\255\255\255\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\048\001\255\255\255\255\051\001\255\255\053\001\
\054\001\055\001\056\001\057\001\255\255\255\255\255\255\061\001\
\255\255\255\255\064\001\255\255\066\001\067\001\001\001\002\001\
\003\001\071\001\042\001\073\001\255\255\008\001\076\001\255\255\
\255\255\255\255\080\001\255\255\052\001\053\001\054\001\055\001\
\255\255\255\255\058\001\059\001\255\255\061\001\062\001\063\001\
\064\001\065\001\255\255\067\001\068\001\069\001\255\255\071\001\
\255\255\255\255\255\255\075\001\255\255\077\001\255\255\042\001\
\001\001\002\001\003\001\255\255\255\255\255\255\255\255\008\001\
\255\255\052\001\255\255\255\255\255\255\255\255\255\255\058\001\
\059\001\255\255\255\255\062\001\063\001\255\255\065\001\255\255\
\255\255\068\001\069\001\255\255\255\255\255\255\255\255\255\255\
\075\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\052\001\255\255\255\255\255\255\255\255\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\065\001\255\255\255\255\068\001\069\001\255\255\255\255\255\255\
\255\255\255\255\075\001"

let yynames_const = "\
  BANG_\000\
  PERCENT_\000\
  AMPER_\000\
  AMPER_AMPER_\000\
  LPAREN_\000\
  LPAREN_RPAREN_\000\
  RPAREN_\000\
  STAR_\000\
  PLUS_\000\
  PLUS_PLUS_\000\
  COMMA_\000\
  DASH_\000\
  DASH_GT_\000\
  PERIOD_\000\
  PERIOD_LPAREN_\000\
  PERIOD_PERIOD_\000\
  SLASH_\000\
  SLASH_BACKSL_\000\
  COLON_\000\
  COLON_COLON_\000\
  COLON_LT_\000\
  COLON_EQ_\000\
  COLON_GT_\000\
  SEMI_\000\
  LT_\000\
  LT_DASH_\000\
  LT_DASH_GT_\000\
  LT_COLON_\000\
  LT_EQ_\000\
  LT_GT_\000\
  EQ_\000\
  EQ_GT_\000\
  EQ_UNDER_D_\000\
  GT_\000\
  GT_DASH_GT_\000\
  GT_EQ_\000\
  QUEST_\000\
  QUEST_EQ_\000\
  AROBAS_\000\
  LBRACK_\000\
  BACKSL_SLASH_\000\
  RBRACK_\000\
  HAT_\000\
  LBRACE_\000\
  BAR_\000\
  BAR_DASH_\000\
  BAR_BAR_\000\
  RBRACE_\000\
  TILDE_\000\
  MUSTUSE\000\
  DEFINITION\000\
  DEPENDS\000\
  ELSE\000\
  END\000\
  EXISTS\000\
  FALSE\000\
  FIX\000\
  FIXPOINT\000\
  FORALL\000\
  FUN\000\
  FUNCTION\000\
  IF\000\
  IN\000\
  INDUCTIVE\000\
  LET\000\
  MATCH\000\
  ON\000\
  PARAMETER\000\
  STRUCT\000\
  THEN\000\
  THEOREM\000\
  TRUE\000\
  WITH\000\
  BEGINPROOF\000\
  BEGINHEADER\000\
  ENDPROOF\000\
  EOF\000\
  "

let yynames_block = "\
  IDENT\000\
  STRING\000\
  NUM\000\
  BEGINNAME\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'hyp_def_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 214 "parsecoq.mly"
      ( (_3, (Hyp (goal_name, enot _5, 0), false) :: _1) )
# 833 "parsecoq.ml"
               : string * (Phrase.phrase * bool) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'hyp_def_list) in
    Obj.repr(
# 216 "parsecoq.mly"
      ( (* Error.warn "deprecated input format"; *)
        (thm_default_name, (Hyp (goal_name, enot _1, 0), false) :: _2) )
# 842 "parsecoq.ml"
               : string * (Phrase.phrase * bool) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'proof_head) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'hyp_def_list) in
    Obj.repr(
# 219 "parsecoq.mly"
      ( (* Error.warn "deprecated input format"; *)
        (_1, (Hyp (goal_name, enot _2, 0), false) :: _3) )
# 852 "parsecoq.ml"
               : string * (Phrase.phrase * bool) list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'proofheaders) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'proofheaders) in
    Obj.repr(
# 225 "parsecoq.mly"
      ( _3 )
# 861 "parsecoq.ml"
               : 'proof_head))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proofheaders) in
    Obj.repr(
# 227 "parsecoq.mly"
      ( "theorem" )
# 868 "parsecoq.ml"
               : 'proof_head))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "parsecoq.mly"
      ( () )
# 874 "parsecoq.ml"
               : 'proofheaders))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proofheaders) in
    Obj.repr(
# 234 "parsecoq.mly"
      ( () )
# 881 "parsecoq.ml"
               : 'proofheaders))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bindings) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 239 "parsecoq.mly"
      ( mk_all _2 _4 )
# 889 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bindings) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 241 "parsecoq.mly"
      ( mk_ex _2 _4 )
# 897 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bindings) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 244 "parsecoq.mly"
      ( mk_lam _2 _4 )
# 905 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fix) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 247 "parsecoq.mly"
      ( mk_let_fix _2 _4 )
# 913 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 250 "parsecoq.mly"
      ( mk_let _2 _4 _6 )
# 922 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'junk) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 253 "parsecoq.mly"
      ( mk_let _3 _8 _10 )
# 932 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'junk) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 256 "parsecoq.mly"
      ( mk_let _2 _6 _8 )
# 942 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pat_expr_list) in
    Obj.repr(
# 259 "parsecoq.mly"
      ( eapp ("$match", _2 :: _4) )
# 950 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 262 "parsecoq.mly"
      ( eapp ("FOCAL.ifthenelse", [_2; _4; _6]) )
# 959 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 265 "parsecoq.mly"
      ( eimply (_1, _3) )
# 967 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 268 "parsecoq.mly"
      ( eequiv (_1, _3) )
# 975 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 271 "parsecoq.mly"
      ( eor (_1, _3) )
# 983 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 274 "parsecoq.mly"
      ( eand (_1, _3) )
# 991 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 277 "parsecoq.mly"
      ( eapp ("=", [_1; _3]) )
# 999 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 279 "parsecoq.mly"
      ( enot (eapp ("=", [_1; _3])) )
# 1007 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 282 "parsecoq.mly"
      ( enot (_2) )
# 1014 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr1) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr1_list) in
    Obj.repr(
# 285 "parsecoq.mly"
      ( mk_apply (_1, _2) )
# 1022 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1_list) in
    Obj.repr(
# 288 "parsecoq.mly"
      ( mk_eapp ("@", evar (_2) :: _3) )
# 1030 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 291 "parsecoq.mly"
      ( mk_eapp ("@", [evar (_2)]) )
# 1037 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 294 "parsecoq.mly"
      ( _1 )
# 1044 "parsecoq.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'bindings) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 299 "parsecoq.mly"
      ( mk_fix _2 _9 _3 _11 )
# 1055 "parsecoq.ml"
               : 'fix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 304 "parsecoq.mly"
      ( evar (_1) )
# 1062 "parsecoq.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 306 "parsecoq.mly"
      ( eapp (_1, []) )
# 1069 "parsecoq.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 310 "parsecoq.mly"
      ( eapp ("$string", [mk_string _1]) )
# 1076 "parsecoq.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expr_list) in
    Obj.repr(
# 312 "parsecoq.mly"
      ( mk_pairs _2 _3 )
# 1084 "parsecoq.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 314 "parsecoq.mly"
      ( eapp ("*", [_2; _4]) )
# 1092 "parsecoq.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 316 "parsecoq.mly"
      ( eapp ("%", [_2; evar (_4)]) )
# 1100 "parsecoq.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 318 "parsecoq.mly"
      ( _2 )
# 1107 "parsecoq.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    Obj.repr(
# 320 "parsecoq.mly"
      ( etrue )
# 1113 "parsecoq.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    Obj.repr(
# 322 "parsecoq.mly"
      ( efalse )
# 1119 "parsecoq.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 326 "parsecoq.mly"
                           ( [_1] )
# 1126 "parsecoq.ml"
               : 'expr1_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr1) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr1_list) in
    Obj.repr(
# 327 "parsecoq.mly"
                           ( _1 :: _2 )
# 1134 "parsecoq.ml"
               : 'expr1_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 332 "parsecoq.mly"
      ( [_2] )
# 1141 "parsecoq.ml"
               : 'comma_expr_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'comma_expr_list) in
    Obj.repr(
# 334 "parsecoq.mly"
      ( _2 :: _3 )
# 1149 "parsecoq.ml"
               : 'comma_expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 339 "parsecoq.mly"
      ( [] )
# 1155 "parsecoq.ml"
               : 'pat_expr_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pat_expr_list) in
    Obj.repr(
# 341 "parsecoq.mly"
      ( mk_pattern _2 _4 :: _5 )
# 1164 "parsecoq.ml"
               : 'pat_expr_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 346 "parsecoq.mly"
      ( _2 )
# 1171 "parsecoq.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'idlist) in
    Obj.repr(
# 348 "parsecoq.mly"
      ( (_1, _2) )
# 1179 "parsecoq.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 350 "parsecoq.mly"
      ( ("Datatypes.pair", [_2; _4]) )
# 1187 "parsecoq.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simplebinding) in
    Obj.repr(
# 354 "parsecoq.mly"
                           ( _1 )
# 1194 "parsecoq.ml"
               : 'bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binding_list) in
    Obj.repr(
# 355 "parsecoq.mly"
                           ( _1 )
# 1201 "parsecoq.ml"
               : 'bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'idlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 359 "parsecoq.mly"
                       ( List.map (fun v -> (v, _3)) _1 )
# 1209 "parsecoq.ml"
               : 'simplebinding))
; (fun __caml_parser_env ->
    Obj.repr(
# 363 "parsecoq.mly"
                           ( [] )
# 1215 "parsecoq.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'idlist) in
    Obj.repr(
# 364 "parsecoq.mly"
                           ( _1 :: _2 )
# 1223 "parsecoq.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 369 "parsecoq.mly"
      ( [] )
# 1229 "parsecoq.ml"
               : 'binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'binding_list) in
    Obj.repr(
# 371 "parsecoq.mly"
      ( (_1, "") :: _2 )
# 1237 "parsecoq.ml"
               : 'binding_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'simplebinding) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'binding_list) in
    Obj.repr(
# 373 "parsecoq.mly"
      ( _2 @ _4 )
# 1245 "parsecoq.ml"
               : 'binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 377 "parsecoq.mly"
                           ( mk_type_string _1 )
# 1252 "parsecoq.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 382 "parsecoq.mly"
           ( _1 )
# 1259 "parsecoq.ml"
               : 'id_or_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 383 "parsecoq.mly"
           ( _1 )
# 1266 "parsecoq.ml"
               : 'id_or_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 389 "parsecoq.mly"
      ( Hyp (_2, _4, 1) )
# 1274 "parsecoq.ml"
               : 'hyp_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 391 "parsecoq.mly"
      ( let (params, expr) = get_params _4 in
        Def (DefReal (_2, _2, params, expr, None)) )
# 1283 "parsecoq.ml"
               : 'hyp_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'compact_args) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 394 "parsecoq.mly"
      (
       let compact_params = _3 in
       let (other_params, expr) = get_params _7 in
       Def (DefReal (_2, _2, (compact_params @ other_params), expr, None))
      )
# 1297 "parsecoq.ml"
               : 'hyp_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 9 : 'compact_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 401 "parsecoq.mly"
      (
       let compact_params = _3 in
       let (other_params, expr) = get_params _11 in
       Def (DefReal (_2, _2, (compact_params @ other_params), expr, Some _6))
      )
# 1312 "parsecoq.ml"
               : 'hyp_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'compact_args) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'typ) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 408 "parsecoq.mly"
      ( Def (DefRec (_7, _2, _3, _10)) )
# 1323 "parsecoq.ml"
               : 'hyp_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'binding_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'constr_list) in
    Obj.repr(
# 410 "parsecoq.mly"
      ( mk_inductive _2 _3 _7 )
# 1333 "parsecoq.ml"
               : 'hyp_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 415 "parsecoq.mly"
                                                         ( [] )
# 1339 "parsecoq.ml"
               : 'compact_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'compact_args) in
    Obj.repr(
# 416 "parsecoq.mly"
                                                     ( (evar _2) :: _6 )
# 1348 "parsecoq.ml"
               : 'compact_args))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp_def) in
    Obj.repr(
# 421 "parsecoq.mly"
                               (
      (* FIXME activate this warning at some point.
      Error.warn "use of obsolete \"Depends on\" syntax";
      *)
      (_3, true)
    )
# 1360 "parsecoq.ml"
               : 'dep_hyp_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'hyp_def) in
    Obj.repr(
# 427 "parsecoq.mly"
                               ( (_2, true) )
# 1367 "parsecoq.ml"
               : 'dep_hyp_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'hyp_def) in
    Obj.repr(
# 428 "parsecoq.mly"
                               ( (_1, false) )
# 1374 "parsecoq.ml"
               : 'dep_hyp_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dep_hyp_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'hyp_def_list) in
    Obj.repr(
# 432 "parsecoq.mly"
                               ( _1 :: _2 )
# 1382 "parsecoq.ml"
               : 'hyp_def_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 433 "parsecoq.mly"
                               ( [] )
# 1388 "parsecoq.ml"
               : 'hyp_def_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'constr_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'constr_list) in
    Obj.repr(
# 438 "parsecoq.mly"
      ( (_2, _4) :: _5 )
# 1397 "parsecoq.ml"
               : 'constr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 440 "parsecoq.mly"
      ( [] )
# 1403 "parsecoq.ml"
               : 'constr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg_type) in
    Obj.repr(
# 444 "parsecoq.mly"
                                      ( [] )
# 1410 "parsecoq.ml"
               : 'constr_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arg_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constr_type) in
    Obj.repr(
# 445 "parsecoq.mly"
                                      ( _1 :: _3 )
# 1418 "parsecoq.ml"
               : 'constr_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'arg_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'constr_type) in
    Obj.repr(
# 447 "parsecoq.mly"
                                      ( _2 :: _4 )
# 1426 "parsecoq.ml"
               : 'constr_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arg_type) in
    Obj.repr(
# 451 "parsecoq.mly"
                                      ( _2 )
# 1433 "parsecoq.ml"
               : 'arg_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'idlist) in
    Obj.repr(
# 452 "parsecoq.mly"
                                      ( (_1, _2) )
# 1441 "parsecoq.ml"
               : 'arg_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 456 "parsecoq.mly"
                                      ( () )
# 1447 "parsecoq.ml"
               : 'junk))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'junk) in
    Obj.repr(
# 457 "parsecoq.mly"
                                      ( () )
# 1455 "parsecoq.ml"
               : 'junk))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'junk) in
    Obj.repr(
# 458 "parsecoq.mly"
                                      ( () )
# 1462 "parsecoq.ml"
               : 'junk))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'junk) in
    Obj.repr(
# 459 "parsecoq.mly"
                                      ( () )
# 1469 "parsecoq.ml"
               : 'junk))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'junk) in
    Obj.repr(
# 460 "parsecoq.mly"
                                      ( () )
# 1477 "parsecoq.ml"
               : 'junk))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'junk) in
    Obj.repr(
# 461 "parsecoq.mly"
                                      ( () )
# 1484 "parsecoq.ml"
               : 'junk))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'junk) in
    Obj.repr(
# 462 "parsecoq.mly"
                                      ( () )
# 1491 "parsecoq.ml"
               : 'junk))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'junk) in
    Obj.repr(
# 463 "parsecoq.mly"
                                      ( () )
# 1498 "parsecoq.ml"
               : 'junk))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'junk) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'junk) in
    Obj.repr(
# 464 "parsecoq.mly"
                                      ( () )
# 1506 "parsecoq.ml"
               : 'junk))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'junk) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'junk) in
    Obj.repr(
# 465 "parsecoq.mly"
                                      ( () )
# 1514 "parsecoq.ml"
               : 'junk))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : string * (Phrase.phrase * bool) list)
;;
