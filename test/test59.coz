(*
; file: species_general_additive_law.foc
; species: partially_ordered_additive_monoid
; property: order_inf_reverses_order_sup / __goal_19
*)

%%begin-auto-proof

(Is_true ((abst_order_inf yy xx ))
)

Parameter abst_T : Type.
Parameter abst_equal : abst_T -> abst_T -> bool.
Parameter abst_plus : abst_T -> abst_T -> abst_T.
Parameter abst_inf : abst_T -> abst_T -> abst_T.
Parameter abst_sup : abst_T -> abst_T -> abst_T.
Parameter xx : abst_T.
Parameter yy : abst_T.

Definition abst_order_inf:=
(fun (x: abst_T) => (fun (y: abst_T) => (abst_equal  x (abst_inf  x y)))).

Parameter
  abst_equal_transitive: forall (x: abst_T) (y: abst_T) (z: abst_T),
  ((Is_true ((abst_equal  x y)) ))-> 
    ((Is_true ((abst_equal  y z)) ))-> 
      (Is_true ((abst_equal  x z)) ).
Parameter
  abst_inf_commutes: forall (x: abst_T) (y: abst_T), (Is_true
  ((abst_equal  (abst_inf  x y) (abst_inf  y x))) ).
Parameter abst_plus_is_regular:
  forall (x: abst_T) (y: abst_T) (z: abst_T),
  ((Is_true ((abst_equal  (abst_plus  x y) (abst_plus  x z))) ))-> 
    (Is_true ((abst_equal  y z)) ).
Parameter __lemma_2_2: (Is_true
  ((abst_equal
    (abst_plus (abst_inf xx yy ) (abst_sup xx yy ) )
    (abst_plus (abst_sup xx yy ) (abst_inf xx yy ) )
   ))
  ).
Parameter __lemma_2_1: (Is_true
  ((abst_equal
    (abst_plus (abst_sup xx yy ) yy )
    (abst_plus (abst_inf xx yy ) (abst_sup xx yy ) )
   ))
  ).
%%end-auto-proof
