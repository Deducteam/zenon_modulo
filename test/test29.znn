# file: species_general_set.foc
# species: partial_order
# theorem: gt_is_lt

#  (* to be proved *)
#(x: abst_T) (y: abst_T)
#(and
#  ((Is_true ((abst_gt  x y)) ))-> 
#    (and (Is_true ((abst_geq  x y)) ) (Is_true ((abst_different  x y)) ))
#  ((Is_true ((abst_geq  x y)) ))-> 
#    (or (Is_true ((abst_gt  x y)) ) (Is_true ((abst_equal  x y)) )))
#By
#  abst_equal_symmetric: (x: abst_T) (y: abst_T)
#  ((Is_true ((abst_equal  x y)) ))-> 
#    (Is_true ((abst_equal  y x)) )
#  abst_lt_is_not_leq: (x: abst_T) (y: abst_T)
#  (and
#    ((Is_true ((abst_lt  x y)) ))-> 
#      (and (Is_true ((abst_leq  x y)) ) (Is_true ((abst_different  x y)) ))
#    ((Is_true ((abst_leq  x y)) ))-> 
#      (or (Is_true ((abst_lt  x y)) ) (Is_true ((abst_equal  x y)) )))
#By def
#      abst_different:= [x: abst_T][y: abst_T](not_b  (abst_equal  x y))
#      abst_geq:= [x: abst_T][y: abst_T](abst_leq  y x) abst_gt:=
#      [x: abst_T][y: abst_T](abst_lt  y x)
#(* Qed *).

$sig not_b ("bool") "bool"
$sig abst_equal ("" "") "bool"
$sig abst_leq ("" "") "bool"
$sig abst_lt ("" "") "bool"

$def (abst_different x y) (not_b (abst_equal x y))
$def (abst_geq x y) (abst_leq y x)
$def (abst_gt x y) (abst_lt y x)

$1
  (A. ((x) (A. ((y)
    (=> (Is_true (abst_equal x y)) (Is_true (abst_equal y x)))))))

$1
  (A. ((x) (A. ((y)
    (/\ (=> (Is_true (abst_lt x y))
            (/\ (Is_true (abst_leq x y)) (Is_true (abst_different x y))))
        (=> (Is_true (abst_leq x y))
            (\/ (Is_true (abst_lt x y)) (Is_true (abst_equal x y)))))))))



# from Bool.v
(A. ((x "bool") (<=> (Is_true (not_b x)) (-. (Is_true x)))))

$goal
  (A. ((x) (A. ((y)
    (/\ (=> (Is_true (abst_gt x y))
            (/\ (Is_true (abst_geq x y)) (Is_true (abst_different x y))))
        (=> (Is_true (abst_geq x y))
            (\/ (Is_true (abst_gt x y)) (Is_true (abst_equal x y)))))))))
