; file: species_general_additive_law.foc
; species: partially_ordered_additive_monoid
; property: order_inf_reverse_order_sup / __lemma_2_1

%%begin-auto-proof
%%location: []
%%name: foo
%%statement
(Is_true
((abst_equal
  (abst_plus (abst_sup xx yy ) yy )
  (abst_plus (abst_inf xx yy ) (abst_sup xx yy ) )
 ))
)
By
  abst_equal_symmetric: (x: abst_T) (y: abst_T)
  ((Is_true ((abst_equal  x y)) ))-> 
    (Is_true ((abst_equal  y x)) ) abst_equal_transitive: (x: abst_T)
  (y: abst_T) (z: abst_T)
  ((Is_true ((abst_equal  x y)) ))-> 
    ((Is_true ((abst_equal  y z)) ))-> 
      (Is_true ((abst_equal  x z)) )
  HH_1_2: (Is_true ((abst_order_sup xx yy )) ) abst_plus_is_left_congruence:
  (x: abst_T) (y: abst_T) (z: abst_T)
  ((Is_true ((abst_equal  x y)) ))-> 
    (Is_true ((abst_equal  (abst_plus  x z) (abst_plus  y z))) )
  abst_sum_is_inf_plus_sup: (x: abst_T) (y: abst_T) (Is_true
  ((abst_equal  (abst_plus  x y) (abst_plus  (abst_inf  x y) (abst_sup  x
   y))))
  )
By def abst_order_sup:= [x: abst_T][y: abst_T](abst_equal  x (abst_sup  x y))
%%end-auto-proof
