;  Copyright 2006 INRIA

# file: species_general_additive_law.foc
# species: partially_ordered_additive_monoid
# property: inf_idempotent / __goal_4

;       (* to be proved *)
; (Is_true ((abst_equal x (abst_inf x y ) ))
; )
; By
;   abst_add_keeps_inf: (x: abst_T) (y: abst_T) (Is_true
;   ((abst_order_inf  x (abst_plus  x y))) ) abst_equal_transitive: (x: abst_T)
;   (y: abst_T) (z: abst_T)
;   ((Is_true ((abst_equal  x y)) ))-> 
;     ((Is_true ((abst_equal  y z)) ))-> 
;       (Is_true ((abst_equal  x z)) )
;   abst_inf_congruence: (x: abst_T) (y: abst_T) (z: abst_T)
;   ((Is_true ((abst_equal  x y)) ))-> 
;     (and (Is_true ((abst_equal  (abst_inf  x z) (abst_inf  y z))) ) (Is_true
;     ((abst_equal  (abst_inf  z x) (abst_inf  z y))) ))
;   __lemma_1_1: (Is_true ((abst_equal (abst_plus x abst_zero ) y )) )
; By def abst_order_inf:= [x: abst_T][y: abst_T](abst_equal  x (abst_inf  x y))
; (* Qed *).

$sig abst_equal ("" "") "bool"

$def (abst_order_inf x y) (abst_equal x (abst_inf x y))

; abst_add_keeps_inf
(A. ((x) (A. ((y) (Is_true (abst_order_inf x (abst_plus x y)))))))

; abst_equal_transitive
(A. ((x) (A. ((y) (A. ((z)
  (=> (Is_true (abst_equal x y))
      (=> (Is_true (abst_equal y z))
          (Is_true (abst_equal x z))))))))))

; abst_inf_congruence
(A. ((x) (A. ((y) (A. ((z)
  (=> (Is_true (abst_equal x y))
      (/\ (Is_true (abst_equal (abst_inf x z) (abst_inf y z)))
          (Is_true (abst_equal (abst_inf z x) (abst_inf z y)))))))))))

; __lemma_1_1
(Is_true (abst_equal (abst_plus x abst_zero) y))

$goal (Is_true (abst_equal x (abst_inf x y)))
