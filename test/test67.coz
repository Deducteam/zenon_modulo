; file: species_general_additive_law.foc
; species: partially_ordered_additive_monoid
; property: sup_commutes / __goal_13

    (* to be proved *)
(Is_true ((abst_equal (abst_sup x y ) (abst_sup y x ) ))
)
By
  abst_equal_symmetric: (x: abst_T) (y: abst_T)
  ((Is_true ((abst_equal  x y)) ))-> 
    (Is_true ((abst_equal  y x)) ) abst_equal_transitive: (x: abst_T)
  (y: abst_T) (z: abst_T)
  ((Is_true ((abst_equal  x y)) ))-> 
    ((Is_true ((abst_equal  y z)) ))-> 
      (Is_true ((abst_equal  x z)) )
  __lemma_1_3:
  ((Is_true
   ((abst_equal
     (abst_plus (abst_inf y x ) (abst_sup y x ) )
     (abst_plus (abst_inf y x ) (abst_sup x y ) )
    ))
   ))->
  
    (Is_true ((abst_equal (abst_sup y x ) (abst_sup x y ) )) ) __lemma_1_2:
  (Is_true
  ((abst_equal (abst_plus (abst_inf y x ) (abst_sup y x ) ) (abst_plus x y )
   ))
  ) __lemma_1_1: (Is_true
  ((abst_equal (abst_plus x y ) (abst_plus (abst_inf y x ) (abst_sup x y ) )
   ))
  )
By def 
(* Qed *).
