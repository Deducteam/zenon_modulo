; file: species_general_additive_law.foc
; species: partially_ordered_additive_monoid
; property: sup_commutes / __lemma_1_3

%%begin-auto-proof
%%location: []
%%name: foo
%%statement
((Is_true
 ((abst_equal
   (abst_plus (abst_inf y x ) (abst_sup y x ) )
   (abst_plus (abst_inf y x ) (abst_sup x y ) )
  ))
 ))->

  (Is_true ((abst_equal (abst_sup y x ) (abst_sup x y ) )) )
By
  abst_equal_transitive: (x: abst_T) (y: abst_T) (z: abst_T)
  ((Is_true ((abst_equal  x y)) ))-> 
    ((Is_true ((abst_equal  y z)) ))-> 
      (Is_true ((abst_equal  x z)) )
  abst_plus_commutes: (x: abst_T) (y: abst_T) (Is_true
  ((abst_equal  (abst_plus  x y) (abst_plus  y x))) ) abst_plus_is_regular:
  (x: abst_T) (y: abst_T) (z: abst_T)
  ((Is_true ((abst_equal  (abst_plus  x y) (abst_plus  x z))) ))-> 
    (Is_true ((abst_equal  y z)) )
By def 
%%end-auto-proof
