;  Copyright 2006 INRIA
;  $Id: test37.znn,v 1.7 2011-12-28 16:43:33 doligez Exp $

# file: species_general_additive_law.foc
# species: partially_ordered_additive_monoid
# property: inf_idempotent / __lemma_1_1

;       (* to be proved *)
; (Is_true ((abst_equal (abst_plus x abst_zero ) y ))
; )
; By
;   abst_equal_transitive: (x: abst_T) (y: abst_T) (z: abst_T)
;   ((Is_true ((abst_equal  x y)) ))-> 
;     ((Is_true ((abst_equal  y z)) ))-> 
;       (Is_true ((abst_equal  x z)) )
;   abst_zero_is_neutral: (x: abst_T)
;   (and (Is_true ((abst_equal  (abst_plus  x abst_zero) x)) ) (Is_true
;   ((abst_equal  (abst_plus  abst_zero x) x)) )) H_1_1: (Is_true
;   ((abst_equal x y )) )
; By def 
; (* Qed *).

$sig abst_equal ("zenon_U" "zenon_U") "bool"

$hyp "abst_equal_transitive"
(A. ((x) (A. ((y) (A. ((z)
  (=> (Is_true (abst_equal x y))
      (=> (Is_true (abst_equal y z))
          (Is_true (abst_equal x z))))))))))

$hyp "abst_zero_is_neutral"
(A. ((x) (/\ (Is_true (abst_equal (abst_plus x abst_zero) x))
             (Is_true (abst_equal (abst_plus abst_zero x) x)))))

$hyp "H_1_1"
(Is_true (abst_equal x y))

$goal (Is_true (abst_equal (abst_plus x abst_zero) y))
