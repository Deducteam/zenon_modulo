;  Copyright 2006 INRIA
;  $Id: test33.znn,v 1.6 2011-12-28 16:43:33 doligez Exp $

# file: species_general_set.foc
# species: lattice
# property: order_inf_is_antisymmetric

#    (* to be proved *)
#(x: abst_T) (y: abst_T)
#((Is_true ((abst_order_inf  x y)) ))-> 
#  ((Is_true ((abst_order_inf  y x)) ))-> 
#    (Is_true ((abst_equal  x y)) )
#By
#  abst_equal_transitive: (x: abst_T) (y: abst_T) (z: abst_T)
#  ((Is_true ((abst_equal  x y)) ))-> 
#    ((Is_true ((abst_equal  y z)) ))-> 
#      (Is_true ((abst_equal  x z)) )
#  abst_equal_symmetric: (x: abst_T) (y: abst_T)
#  ((Is_true ((abst_equal  x y)) ))-> 
#    (Is_true ((abst_equal  y x)) )
#abst_inf_commutes: (x: abst_T) (y: abst_T)
#  (Is_true ((abst_equal  (abst_inf  x y) (abst_inf  y x))) )
#By def abst_order_inf:= [x: abst_T][y: abst_T](abst_equal  x (abst_inf  x y))
#(* Qed *).

$sig abst_T () "Type"
$sig abst_equal ("abst_T" "abst_T") "bool"
$sig abst_inf ("abst_T" "abst_T") "abst_T"

$def "d" (abst_order_inf x y) (abst_equal x (abst_inf x y))

$hyp "h1" (A. ((x "abst_T") (A. ((y "abst_T") (A. ((z "abst_T")
     (=> (Is_true (abst_equal x y))
         (=> (Is_true (abst_equal y z))
             (Is_true (abst_equal x z))))))))))

$hyp "h2" (A. ((x "abst_T") (A. ((y "abst_T")
     (=> (Is_true (abst_equal x y)) (Is_true (abst_equal y x)))))))

$hyp "abst_inf_commutes"
(A. ((x "abst_T") (A. ((y "abst_T")
     (Is_true (abst_equal (abst_inf x y) (abst_inf y x)))))))

$goal
  (A. ((x "abst_T") (A. ((y "abst_T")
    (=> (Is_true (abst_order_inf x y))
        (=> (Is_true (abst_order_inf y x))
            (Is_true (abst_equal x y))))))))
