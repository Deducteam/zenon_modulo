;  Copyright 2006 INRIA
;  $Id: test46.znn,v 1.7 2011-12-28 16:43:33 doligez Exp $

; file: species_general_additive_law.foc
; species: partially_ordered_additive_monoid
; property: add_absorbes_sup / __lemma_1_1_1

;     (* to be proved *)
; (Is_true
; ((abst_equal
;   (abst_plus x (abst_plus x y ) )
;   (abst_plus (abst_inf (abst_plus x y ) x ) (abst_sup (abst_plus x y ) x ) )
;  ))
; )
; By
;   abst_equal_transitive: (x: abst_T) (y: abst_T) (z: abst_T)
;   ((Is_true ((abst_equal  x y)) ))-> 
;     ((Is_true ((abst_equal  y z)) ))-> 
;       (Is_true ((abst_equal  x z)) )
;   abst_plus_commutes: (x: abst_T) (y: abst_T) (Is_true
;   ((abst_equal  (abst_plus  x y) (abst_plus  y x))) )
;   abst_sum_is_inf_plus_sup: (x: abst_T) (y: abst_T) (Is_true
;   ((abst_equal  (abst_plus  x y) (abst_plus  (abst_inf  x y) (abst_sup  x
;    y))))
;   )
; By def 
; (* Qed *).

$sig abst_equal ("zenon_U" "zenon_U") "bool"

$hyp "abst_equal_transitive"
(A. ((x) (A. ((y) (A. ((z)
  (=> (Is_true (abst_equal x y))
      (=> (Is_true (abst_equal y z))
          (Is_true (abst_equal x z))))))))))

$hyp "abst_plus_commutes"
(A. ((x) (A. ((y)
  (Is_true (abst_equal (abst_plus x y) (abst_plus y x)))))))

$hyp "abst_sum_is_inf_plus_sup"
(A. ((x) (A. ((y)
  (Is_true (abst_equal (abst_plus x y)
                       (abst_plus (abst_inf x y) (abst_sup x y))))))))

$goal
(Is_true (abst_equal (abst_plus x (abst_plus x y))
                     (abst_plus (abst_inf (abst_plus x y) x)
                                (abst_sup (abst_plus x y) x))))
