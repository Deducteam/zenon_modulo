;  Copyright 2006 INRIA
;  $Id: test40.znn,v 1.7 2011-12-28 16:43:33 doligez Exp $

; file: species_general_additive_law.foc
; species: partially_ordered_additive_monoid
; property: min_is_min / __goal_6

;     (* to be proved *)
; (Is_true ((abst_equal abst_min (abst_inf abst_min x ) ))
; )
; By
;   abst_equal_transitive: (x: abst_T) (y: abst_T) (z: abst_T)
;   ((Is_true ((abst_equal  x y)) ))-> 
;     ((Is_true ((abst_equal  y z)) ))-> 
;       (Is_true ((abst_equal  x z)) )
;   abst_inf_congruence: (x: abst_T) (y: abst_T) (z: abst_T)
;   ((Is_true ((abst_equal  x y)) ))-> 
;     (and (Is_true ((abst_equal  (abst_inf  x z) (abst_inf  y z))) ) (Is_true
;     ((abst_equal  (abst_inf  z x) (abst_inf  z y))) ))
;   abst_add_keeps_inf: (x: abst_T) (y: abst_T) (Is_true
;   ((abst_order_inf  x (abst_plus  x y))) ) __lemma_1_1: (Is_true
;   ((abst_equal (abst_plus abst_min x ) x )) )
; By def abst_order_inf:= [x: abst_T][y: abst_T](abst_equal  x (abst_inf  x y))
; (* Qed *).

$sig abst_equal ("zenon_U" "zenon_U") "bool"

$def "d" (abst_order_inf x y) (abst_equal x (abst_inf x y))

$hyp "abst_equal_transitive"
(A. ((x) (A. ((y) (A. ((z)
  (=> (Is_true (abst_equal x y))
      (=> (Is_true (abst_equal y z))
          (Is_true (abst_equal x z))))))))))

$hyp "abst_inf_congruence"
(A. ((x) (A. ((y) (A. ((z)
  (=> (Is_true (abst_equal x y))
      (/\ (Is_true (abst_equal (abst_inf x z) (abst_inf y z)))
          (Is_true (abst_equal (abst_inf z x) (abst_inf z y)))))))))))

$hyp "abst_add_keeps_inf"
(A. ((x) (A. ((y) (Is_true (abst_order_inf x (abst_plus x y)))))))

$hyp "__lemma_1_1"
(Is_true (abst_equal (abst_plus abst_min x) x))

$goal
(Is_true (abst_equal abst_min (abst_inf abst_min x)))
