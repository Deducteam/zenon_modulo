#NAME ALG014_431todk.
op : logic.Term -> logic.Term -> logic.Term.
e1 : logic.Term.
e2 : logic.Term.
e3 : logic.Term.
e0 : logic.Term.
unit : logic.Term.
inv : logic.Term -> logic.Term.
conjecture_proof : (logic.prf (logic.imply (logic.and (logic.or (logic.equal (op (e0) (e0)) (e0)) (logic.or (logic.equal (op (e0) (e0)) (e1)) (logic.or (logic.equal (op (e0) (e0)) (e2)) (logic.equal (op (e0) (e0)) (e3))))) (logic.and (logic.or (logic.equal (op (e0) (e1)) (e0)) (logic.or (logic.equal (op (e0) (e1)) (e1)) (logic.or (logic.equal (op (e0) (e1)) (e2)) (logic.equal (op (e0) (e1)) (e3))))) (logic.and (logic.or (logic.equal (op (e0) (e2)) (e0)) (logic.or (logic.equal (op (e0) (e2)) (e1)) (logic.or (logic.equal (op (e0) (e2)) (e2)) (logic.equal (op (e0) (e2)) (e3))))) (logic.and (logic.or (logic.equal (op (e0) (e3)) (e0)) (logic.or (logic.equal (op (e0) (e3)) (e1)) (logic.or (logic.equal (op (e0) (e3)) (e2)) (logic.equal (op (e0) (e3)) (e3))))) (logic.and (logic.or (logic.equal (op (e1) (e0)) (e0)) (logic.or (logic.equal (op (e1) (e0)) (e1)) (logic.or (logic.equal (op (e1) (e0)) (e2)) (logic.equal (op (e1) (e0)) (e3))))) (logic.and (logic.or (logic.equal (op (e1) (e1)) (e0)) (logic.or (logic.equal (op (e1) (e1)) (e1)) (logic.or (logic.equal (op (e1) (e1)) (e2)) (logic.equal (op (e1) (e1)) (e3))))) (logic.and (logic.or (logic.equal (op (e1) (e2)) (e0)) (logic.or (logic.equal (op (e1) (e2)) (e1)) (logic.or (logic.equal (op (e1) (e2)) (e2)) (logic.equal (op (e1) (e2)) (e3))))) (logic.and (logic.or (logic.equal (op (e1) (e3)) (e0)) (logic.or (logic.equal (op (e1) (e3)) (e1)) (logic.or (logic.equal (op (e1) (e3)) (e2)) (logic.equal (op (e1) (e3)) (e3))))) (logic.and (logic.or (logic.equal (op (e2) (e0)) (e0)) (logic.or (logic.equal (op (e2) (e0)) (e1)) (logic.or (logic.equal (op (e2) (e0)) (e2)) (logic.equal (op (e2) (e0)) (e3))))) (logic.and (logic.or (logic.equal (op (e2) (e1)) (e0)) (logic.or (logic.equal (op (e2) (e1)) (e1)) (logic.or (logic.equal (op (e2) (e1)) (e2)) (logic.equal (op (e2) (e1)) (e3))))) (logic.and (logic.or (logic.equal (op (e2) (e2)) (e0)) (logic.or (logic.equal (op (e2) (e2)) (e1)) (logic.or (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e2) (e2)) (e3))))) (logic.and (logic.or (logic.equal (op (e2) (e3)) (e0)) (logic.or (logic.equal (op (e2) (e3)) (e1)) (logic.or (logic.equal (op (e2) (e3)) (e2)) (logic.equal (op (e2) (e3)) (e3))))) (logic.and (logic.or (logic.equal (op (e3) (e0)) (e0)) (logic.or (logic.equal (op (e3) (e0)) (e1)) (logic.or (logic.equal (op (e3) (e0)) (e2)) (logic.equal (op (e3) (e0)) (e3))))) (logic.and (logic.or (logic.equal (op (e3) (e1)) (e0)) (logic.or (logic.equal (op (e3) (e1)) (e1)) (logic.or (logic.equal (op (e3) (e1)) (e2)) (logic.equal (op (e3) (e1)) (e3))))) (logic.and (logic.or (logic.equal (op (e3) (e2)) (e0)) (logic.or (logic.equal (op (e3) (e2)) (e1)) (logic.or (logic.equal (op (e3) (e2)) (e2)) (logic.equal (op (e3) (e2)) (e3))))) (logic.or (logic.equal (op (e3) (e3)) (e0)) (logic.or (logic.equal (op (e3) (e3)) (e1)) (logic.or (logic.equal (op (e3) (e3)) (e2)) (logic.equal (op (e3) (e3)) (e3)))))))))))))))))))) (logic.imply (logic.and (logic.equal (op (op (e0) (e0)) (e0)) (op (e0) (op (e0) (e0)))) (logic.and (logic.equal (op (op (e0) (e0)) (e1)) (op (e0) (op (e0) (e1)))) (logic.and (logic.equal (op (op (e0) (e0)) (e2)) (op (e0) (op (e0) (e2)))) (logic.and (logic.equal (op (op (e0) (e0)) (e3)) (op (e0) (op (e0) (e3)))) (logic.and (logic.equal (op (op (e0) (e1)) (e0)) (op (e0) (op (e1) (e0)))) (logic.and (logic.equal (op (op (e0) (e1)) (e1)) (op (e0) (op (e1) (e1)))) (logic.and (logic.equal (op (op (e0) (e1)) (e2)) (op (e0) (op (e1) (e2)))) (logic.and (logic.equal (op (op (e0) (e1)) (e3)) (op (e0) (op (e1) (e3)))) (logic.and (logic.equal (op (op (e0) (e2)) (e0)) (op (e0) (op (e2) (e0)))) (logic.and (logic.equal (op (op (e0) (e2)) (e1)) (op (e0) (op (e2) (e1)))) (logic.and (logic.equal (op (op (e0) (e2)) (e2)) (op (e0) (op (e2) (e2)))) (logic.and (logic.equal (op (op (e0) (e2)) (e3)) (op (e0) (op (e2) (e3)))) (logic.and (logic.equal (op (op (e0) (e3)) (e0)) (op (e0) (op (e3) (e0)))) (logic.and (logic.equal (op (op (e0) (e3)) (e1)) (op (e0) (op (e3) (e1)))) (logic.and (logic.equal (op (op (e0) (e3)) (e2)) (op (e0) (op (e3) (e2)))) (logic.and (logic.equal (op (op (e0) (e3)) (e3)) (op (e0) (op (e3) (e3)))) (logic.and (logic.equal (op (op (e1) (e0)) (e0)) (op (e1) (op (e0) (e0)))) (logic.and (logic.equal (op (op (e1) (e0)) (e1)) (op (e1) (op (e0) (e1)))) (logic.and (logic.equal (op (op (e1) (e0)) (e2)) (op (e1) (op (e0) (e2)))) (logic.and (logic.equal (op (op (e1) (e0)) (e3)) (op (e1) (op (e0) (e3)))) (logic.and (logic.equal (op (op (e1) (e1)) (e0)) (op (e1) (op (e1) (e0)))) (logic.and (logic.equal (op (op (e1) (e1)) (e1)) (op (e1) (op (e1) (e1)))) (logic.and (logic.equal (op (op (e1) (e1)) (e2)) (op (e1) (op (e1) (e2)))) (logic.and (logic.equal (op (op (e1) (e1)) (e3)) (op (e1) (op (e1) (e3)))) (logic.and (logic.equal (op (op (e1) (e2)) (e0)) (op (e1) (op (e2) (e0)))) (logic.and (logic.equal (op (op (e1) (e2)) (e1)) (op (e1) (op (e2) (e1)))) (logic.and (logic.equal (op (op (e1) (e2)) (e2)) (op (e1) (op (e2) (e2)))) (logic.and (logic.equal (op (op (e1) (e2)) (e3)) (op (e1) (op (e2) (e3)))) (logic.and (logic.equal (op (op (e1) (e3)) (e0)) (op (e1) (op (e3) (e0)))) (logic.and (logic.equal (op (op (e1) (e3)) (e1)) (op (e1) (op (e3) (e1)))) (logic.and (logic.equal (op (op (e1) (e3)) (e2)) (op (e1) (op (e3) (e2)))) (logic.and (logic.equal (op (op (e1) (e3)) (e3)) (op (e1) (op (e3) (e3)))) (logic.and (logic.equal (op (op (e2) (e0)) (e0)) (op (e2) (op (e0) (e0)))) (logic.and (logic.equal (op (op (e2) (e0)) (e1)) (op (e2) (op (e0) (e1)))) (logic.and (logic.equal (op (op (e2) (e0)) (e2)) (op (e2) (op (e0) (e2)))) (logic.and (logic.equal (op (op (e2) (e0)) (e3)) (op (e2) (op (e0) (e3)))) (logic.and (logic.equal (op (op (e2) (e1)) (e0)) (op (e2) (op (e1) (e0)))) (logic.and (logic.equal (op (op (e2) (e1)) (e1)) (op (e2) (op (e1) (e1)))) (logic.and (logic.equal (op (op (e2) (e1)) (e2)) (op (e2) (op (e1) (e2)))) (logic.and (logic.equal (op (op (e2) (e1)) (e3)) (op (e2) (op (e1) (e3)))) (logic.and (logic.equal (op (op (e2) (e2)) (e0)) (op (e2) (op (e2) (e0)))) (logic.and (logic.equal (op (op (e2) (e2)) (e1)) (op (e2) (op (e2) (e1)))) (logic.and (logic.equal (op (op (e2) (e2)) (e2)) (op (e2) (op (e2) (e2)))) (logic.and (logic.equal (op (op (e2) (e2)) (e3)) (op (e2) (op (e2) (e3)))) (logic.and (logic.equal (op (op (e2) (e3)) (e0)) (op (e2) (op (e3) (e0)))) (logic.and (logic.equal (op (op (e2) (e3)) (e1)) (op (e2) (op (e3) (e1)))) (logic.and (logic.equal (op (op (e2) (e3)) (e2)) (op (e2) (op (e3) (e2)))) (logic.and (logic.equal (op (op (e2) (e3)) (e3)) (op (e2) (op (e3) (e3)))) (logic.and (logic.equal (op (op (e3) (e0)) (e0)) (op (e3) (op (e0) (e0)))) (logic.and (logic.equal (op (op (e3) (e0)) (e1)) (op (e3) (op (e0) (e1)))) (logic.and (logic.equal (op (op (e3) (e0)) (e2)) (op (e3) (op (e0) (e2)))) (logic.and (logic.equal (op (op (e3) (e0)) (e3)) (op (e3) (op (e0) (e3)))) (logic.and (logic.equal (op (op (e3) (e1)) (e0)) (op (e3) (op (e1) (e0)))) (logic.and (logic.equal (op (op (e3) (e1)) (e1)) (op (e3) (op (e1) (e1)))) (logic.and (logic.equal (op (op (e3) (e1)) (e2)) (op (e3) (op (e1) (e2)))) (logic.and (logic.equal (op (op (e3) (e1)) (e3)) (op (e3) (op (e1) (e3)))) (logic.and (logic.equal (op (op (e3) (e2)) (e0)) (op (e3) (op (e2) (e0)))) (logic.and (logic.equal (op (op (e3) (e2)) (e1)) (op (e3) (op (e2) (e1)))) (logic.and (logic.equal (op (op (e3) (e2)) (e2)) (op (e3) (op (e2) (e2)))) (logic.and (logic.equal (op (op (e3) (e2)) (e3)) (op (e3) (op (e2) (e3)))) (logic.and (logic.equal (op (op (e3) (e3)) (e0)) (op (e3) (op (e3) (e0)))) (logic.and (logic.equal (op (op (e3) (e3)) (e1)) (op (e3) (op (e3) (e1)))) (logic.and (logic.equal (op (op (e3) (e3)) (e2)) (op (e3) (op (e3) (e2)))) (logic.equal (op (op (e3) (e3)) (e3)) (op (e3) (op (e3) (e3))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (logic.imply (logic.and (logic.equal (op (unit) (e0)) (e0)) (logic.and (logic.equal (op (e0) (unit)) (e0)) (logic.and (logic.equal (op (unit) (e1)) (e1)) (logic.and (logic.equal (op (e1) (unit)) (e1)) (logic.and (logic.equal (op (unit) (e2)) (e2)) (logic.and (logic.equal (op (e2) (unit)) (e2)) (logic.and (logic.equal (op (unit) (e3)) (e3)) (logic.and (logic.equal (op (e3) (unit)) (e3)) (logic.or (logic.equal (unit) (e0)) (logic.or (logic.equal (unit) (e1)) (logic.or (logic.equal (unit) (e2)) (logic.equal (unit) (e3))))))))))))) (logic.imply (logic.and (logic.equal (op (e0) (inv (e0))) (unit)) (logic.and (logic.equal (op (inv (e0)) (e0)) (unit)) (logic.and (logic.equal (op (e1) (inv (e1))) (unit)) (logic.and (logic.equal (op (inv (e1)) (e1)) (unit)) (logic.and (logic.equal (op (e2) (inv (e2))) (unit)) (logic.and (logic.equal (op (inv (e2)) (e2)) (unit)) (logic.and (logic.equal (op (e3) (inv (e3))) (unit)) (logic.and (logic.equal (op (inv (e3)) (e3)) (unit)) (logic.and (logic.or (logic.equal (inv (e0)) (e0)) (logic.or (logic.equal (inv (e0)) (e1)) (logic.or (logic.equal (inv (e0)) (e2)) (logic.equal (inv (e0)) (e3))))) (logic.and (logic.or (logic.equal (inv (e1)) (e0)) (logic.or (logic.equal (inv (e1)) (e1)) (logic.or (logic.equal (inv (e1)) (e2)) (logic.equal (inv (e1)) (e3))))) (logic.and (logic.or (logic.equal (inv (e2)) (e0)) (logic.or (logic.equal (inv (e2)) (e1)) (logic.or (logic.equal (inv (e2)) (e2)) (logic.equal (inv (e2)) (e3))))) (logic.or (logic.equal (inv (e3)) (e0)) (logic.or (logic.equal (inv (e3)) (e1)) (logic.or (logic.equal (inv (e3)) (e2)) (logic.equal (inv (e3)) (e3)))))))))))))))) (logic.imply (logic.equal (unit) (e0)) (logic.imply (logic.equal (inv (unit)) (unit)) (logic.imply (logic.and (logic.equal (inv (inv (e0))) (e0)) (logic.and (logic.equal (inv (inv (e1))) (e1)) (logic.and (logic.equal (inv (inv (e2))) (e2)) (logic.equal (inv (inv (e3))) (e3))))) (logic.imply (logic.and (logic.imply (logic.equal (inv (e0)) (e0)) (logic.equal (inv (e0)) (e0))) (logic.and (logic.imply (logic.equal (inv (e0)) (e1)) (logic.equal (inv (e1)) (e0))) (logic.and (logic.imply (logic.equal (inv (e0)) (e2)) (logic.equal (inv (e2)) (e0))) (logic.and (logic.imply (logic.equal (inv (e0)) (e3)) (logic.equal (inv (e3)) (e0))) (logic.and (logic.imply (logic.equal (inv (e1)) (e0)) (logic.equal (inv (e0)) (e1))) (logic.and (logic.imply (logic.equal (inv (e1)) (e1)) (logic.equal (inv (e1)) (e1))) (logic.and (logic.imply (logic.equal (inv (e1)) (e2)) (logic.equal (inv (e2)) (e1))) (logic.and (logic.imply (logic.equal (inv (e1)) (e3)) (logic.equal (inv (e3)) (e1))) (logic.and (logic.imply (logic.equal (inv (e2)) (e0)) (logic.equal (inv (e0)) (e2))) (logic.and (logic.imply (logic.equal (inv (e2)) (e1)) (logic.equal (inv (e1)) (e2))) (logic.and (logic.imply (logic.equal (inv (e2)) (e2)) (logic.equal (inv (e2)) (e2))) (logic.and (logic.imply (logic.equal (inv (e2)) (e3)) (logic.equal (inv (e3)) (e2))) (logic.and (logic.imply (logic.equal (inv (e3)) (e0)) (logic.equal (inv (e0)) (e3))) (logic.and (logic.imply (logic.equal (inv (e3)) (e1)) (logic.equal (inv (e1)) (e3))) (logic.and (logic.imply (logic.equal (inv (e3)) (e2)) (logic.equal (inv (e2)) (e3))) (logic.imply (logic.equal (inv (e3)) (e3)) (logic.equal (inv (e3)) (e3)))))))))))))))))) (logic.imply (logic.and (logic.not (logic.equal (inv (e0)) (inv (e1)))) (logic.and (logic.not (logic.equal (inv (e0)) (inv (e2)))) (logic.and (logic.not (logic.equal (inv (e0)) (inv (e3)))) (logic.and (logic.not (logic.equal (inv (e1)) (inv (e2)))) (logic.and (logic.not (logic.equal (inv (e1)) (inv (e3)))) (logic.not (logic.equal (inv (e2)) (inv (e3))))))))) (logic.imply (logic.and (logic.not (logic.equal (op (e0) (e0)) (op (e1) (e0)))) (logic.and (logic.not (logic.equal (op (e0) (e0)) (op (e2) (e0)))) (logic.and (logic.not (logic.equal (op (e0) (e0)) (op (e3) (e0)))) (logic.and (logic.not (logic.equal (op (e1) (e0)) (op (e2) (e0)))) (logic.and (logic.not (logic.equal (op (e1) (e0)) (op (e3) (e0)))) (logic.and (logic.not (logic.equal (op (e2) (e0)) (op (e3) (e0)))) (logic.and (logic.not (logic.equal (op (e0) (e1)) (op (e1) (e1)))) (logic.and (logic.not (logic.equal (op (e0) (e1)) (op (e2) (e1)))) (logic.and (logic.not (logic.equal (op (e0) (e1)) (op (e3) (e1)))) (logic.and (logic.not (logic.equal (op (e1) (e1)) (op (e2) (e1)))) (logic.and (logic.not (logic.equal (op (e1) (e1)) (op (e3) (e1)))) (logic.and (logic.not (logic.equal (op (e2) (e1)) (op (e3) (e1)))) (logic.and (logic.not (logic.equal (op (e0) (e2)) (op (e1) (e2)))) (logic.and (logic.not (logic.equal (op (e0) (e2)) (op (e2) (e2)))) (logic.and (logic.not (logic.equal (op (e0) (e2)) (op (e3) (e2)))) (logic.and (logic.not (logic.equal (op (e1) (e2)) (op (e2) (e2)))) (logic.and (logic.not (logic.equal (op (e1) (e2)) (op (e3) (e2)))) (logic.and (logic.not (logic.equal (op (e2) (e2)) (op (e3) (e2)))) (logic.and (logic.not (logic.equal (op (e0) (e3)) (op (e1) (e3)))) (logic.and (logic.not (logic.equal (op (e0) (e3)) (op (e2) (e3)))) (logic.and (logic.not (logic.equal (op (e0) (e3)) (op (e3) (e3)))) (logic.and (logic.not (logic.equal (op (e1) (e3)) (op (e2) (e3)))) (logic.and (logic.not (logic.equal (op (e1) (e3)) (op (e3) (e3)))) (logic.and (logic.not (logic.equal (op (e2) (e3)) (op (e3) (e3)))) (logic.and (logic.not (logic.equal (op (e0) (e0)) (op (e0) (e1)))) (logic.and (logic.not (logic.equal (op (e0) (e0)) (op (e0) (e2)))) (logic.and (logic.not (logic.equal (op (e0) (e0)) (op (e0) (e3)))) (logic.and (logic.not (logic.equal (op (e0) (e1)) (op (e0) (e2)))) (logic.and (logic.not (logic.equal (op (e0) (e1)) (op (e0) (e3)))) (logic.and (logic.not (logic.equal (op (e0) (e2)) (op (e0) (e3)))) (logic.and (logic.not (logic.equal (op (e1) (e0)) (op (e1) (e1)))) (logic.and (logic.not (logic.equal (op (e1) (e0)) (op (e1) (e2)))) (logic.and (logic.not (logic.equal (op (e1) (e0)) (op (e1) (e3)))) (logic.and (logic.not (logic.equal (op (e1) (e1)) (op (e1) (e2)))) (logic.and (logic.not (logic.equal (op (e1) (e1)) (op (e1) (e3)))) (logic.and (logic.not (logic.equal (op (e1) (e2)) (op (e1) (e3)))) (logic.and (logic.not (logic.equal (op (e2) (e0)) (op (e2) (e1)))) (logic.and (logic.not (logic.equal (op (e2) (e0)) (op (e2) (e2)))) (logic.and (logic.not (logic.equal (op (e2) (e0)) (op (e2) (e3)))) (logic.and (logic.not (logic.equal (op (e2) (e1)) (op (e2) (e2)))) (logic.and (logic.not (logic.equal (op (e2) (e1)) (op (e2) (e3)))) (logic.and (logic.not (logic.equal (op (e2) (e2)) (op (e2) (e3)))) (logic.and (logic.not (logic.equal (op (e3) (e0)) (op (e3) (e1)))) (logic.and (logic.not (logic.equal (op (e3) (e0)) (op (e3) (e2)))) (logic.and (logic.not (logic.equal (op (e3) (e0)) (op (e3) (e3)))) (logic.and (logic.not (logic.equal (op (e3) (e1)) (op (e3) (e2)))) (logic.and (logic.not (logic.equal (op (e3) (e1)) (op (e3) (e3)))) (logic.not (logic.equal (op (e3) (e2)) (op (e3) (e3))))))))))))))))))))))))))))))))))))))))))))))))))) (logic.imply (logic.and (logic.not (logic.equal (e0) (e1))) (logic.and (logic.not (logic.equal (e0) (e2))) (logic.and (logic.not (logic.equal (e0) (e3))) (logic.and (logic.not (logic.equal (e1) (e2))) (logic.and (logic.not (logic.equal (e1) (e3))) (logic.not (logic.equal (e2) (e3)))))))) (logic.orc (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))))) (logic.orc (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))))))))))))))))))))) :=
(H0 : (logic.prf (logic.and (logic.or (logic.equal (op (e0) (e0)) (e0)) (logic.or (logic.equal (op (e0) (e0)) (e1)) (logic.or (logic.equal (op (e0) (e0)) (e2)) (logic.equal (op (e0) (e0)) (e3))))) (logic.and (logic.or (logic.equal (op (e0) (e1)) (e0)) (logic.or (logic.equal (op (e0) (e1)) (e1)) (logic.or (logic.equal (op (e0) (e1)) (e2)) (logic.equal (op (e0) (e1)) (e3))))) (logic.and (logic.or (logic.equal (op (e0) (e2)) (e0)) (logic.or (logic.equal (op (e0) (e2)) (e1)) (logic.or (logic.equal (op (e0) (e2)) (e2)) (logic.equal (op (e0) (e2)) (e3))))) (logic.and (logic.or (logic.equal (op (e0) (e3)) (e0)) (logic.or (logic.equal (op (e0) (e3)) (e1)) (logic.or (logic.equal (op (e0) (e3)) (e2)) (logic.equal (op (e0) (e3)) (e3))))) (logic.and (logic.or (logic.equal (op (e1) (e0)) (e0)) (logic.or (logic.equal (op (e1) (e0)) (e1)) (logic.or (logic.equal (op (e1) (e0)) (e2)) (logic.equal (op (e1) (e0)) (e3))))) (logic.and (logic.or (logic.equal (op (e1) (e1)) (e0)) (logic.or (logic.equal (op (e1) (e1)) (e1)) (logic.or (logic.equal (op (e1) (e1)) (e2)) (logic.equal (op (e1) (e1)) (e3))))) (logic.and (logic.or (logic.equal (op (e1) (e2)) (e0)) (logic.or (logic.equal (op (e1) (e2)) (e1)) (logic.or (logic.equal (op (e1) (e2)) (e2)) (logic.equal (op (e1) (e2)) (e3))))) (logic.and (logic.or (logic.equal (op (e1) (e3)) (e0)) (logic.or (logic.equal (op (e1) (e3)) (e1)) (logic.or (logic.equal (op (e1) (e3)) (e2)) (logic.equal (op (e1) (e3)) (e3))))) (logic.and (logic.or (logic.equal (op (e2) (e0)) (e0)) (logic.or (logic.equal (op (e2) (e0)) (e1)) (logic.or (logic.equal (op (e2) (e0)) (e2)) (logic.equal (op (e2) (e0)) (e3))))) (logic.and (logic.or (logic.equal (op (e2) (e1)) (e0)) (logic.or (logic.equal (op (e2) (e1)) (e1)) (logic.or (logic.equal (op (e2) (e1)) (e2)) (logic.equal (op (e2) (e1)) (e3))))) (logic.and (logic.or (logic.equal (op (e2) (e2)) (e0)) (logic.or (logic.equal (op (e2) (e2)) (e1)) (logic.or (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e2) (e2)) (e3))))) (logic.and (logic.or (logic.equal (op (e2) (e3)) (e0)) (logic.or (logic.equal (op (e2) (e3)) (e1)) (logic.or (logic.equal (op (e2) (e3)) (e2)) (logic.equal (op (e2) (e3)) (e3))))) (logic.and (logic.or (logic.equal (op (e3) (e0)) (e0)) (logic.or (logic.equal (op (e3) (e0)) (e1)) (logic.or (logic.equal (op (e3) (e0)) (e2)) (logic.equal (op (e3) (e0)) (e3))))) (logic.and (logic.or (logic.equal (op (e3) (e1)) (e0)) (logic.or (logic.equal (op (e3) (e1)) (e1)) (logic.or (logic.equal (op (e3) (e1)) (e2)) (logic.equal (op (e3) (e1)) (e3))))) (logic.and (logic.or (logic.equal (op (e3) (e2)) (e0)) (logic.or (logic.equal (op (e3) (e2)) (e1)) (logic.or (logic.equal (op (e3) (e2)) (e2)) (logic.equal (op (e3) (e2)) (e3))))) (logic.or (logic.equal (op (e3) (e3)) (e0)) (logic.or (logic.equal (op (e3) (e3)) (e1)) (logic.or (logic.equal (op (e3) (e3)) (e2)) (logic.equal (op (e3) (e3)) (e3))))))))))))))))))))) => (H1 : (logic.prf (logic.and (logic.equal (op (op (e0) (e0)) (e0)) (op (e0) (op (e0) (e0)))) (logic.and (logic.equal (op (op (e0) (e0)) (e1)) (op (e0) (op (e0) (e1)))) (logic.and (logic.equal (op (op (e0) (e0)) (e2)) (op (e0) (op (e0) (e2)))) (logic.and (logic.equal (op (op (e0) (e0)) (e3)) (op (e0) (op (e0) (e3)))) (logic.and (logic.equal (op (op (e0) (e1)) (e0)) (op (e0) (op (e1) (e0)))) (logic.and (logic.equal (op (op (e0) (e1)) (e1)) (op (e0) (op (e1) (e1)))) (logic.and (logic.equal (op (op (e0) (e1)) (e2)) (op (e0) (op (e1) (e2)))) (logic.and (logic.equal (op (op (e0) (e1)) (e3)) (op (e0) (op (e1) (e3)))) (logic.and (logic.equal (op (op (e0) (e2)) (e0)) (op (e0) (op (e2) (e0)))) (logic.and (logic.equal (op (op (e0) (e2)) (e1)) (op (e0) (op (e2) (e1)))) (logic.and (logic.equal (op (op (e0) (e2)) (e2)) (op (e0) (op (e2) (e2)))) (logic.and (logic.equal (op (op (e0) (e2)) (e3)) (op (e0) (op (e2) (e3)))) (logic.and (logic.equal (op (op (e0) (e3)) (e0)) (op (e0) (op (e3) (e0)))) (logic.and (logic.equal (op (op (e0) (e3)) (e1)) (op (e0) (op (e3) (e1)))) (logic.and (logic.equal (op (op (e0) (e3)) (e2)) (op (e0) (op (e3) (e2)))) (logic.and (logic.equal (op (op (e0) (e3)) (e3)) (op (e0) (op (e3) (e3)))) (logic.and (logic.equal (op (op (e1) (e0)) (e0)) (op (e1) (op (e0) (e0)))) (logic.and (logic.equal (op (op (e1) (e0)) (e1)) (op (e1) (op (e0) (e1)))) (logic.and (logic.equal (op (op (e1) (e0)) (e2)) (op (e1) (op (e0) (e2)))) (logic.and (logic.equal (op (op (e1) (e0)) (e3)) (op (e1) (op (e0) (e3)))) (logic.and (logic.equal (op (op (e1) (e1)) (e0)) (op (e1) (op (e1) (e0)))) (logic.and (logic.equal (op (op (e1) (e1)) (e1)) (op (e1) (op (e1) (e1)))) (logic.and (logic.equal (op (op (e1) (e1)) (e2)) (op (e1) (op (e1) (e2)))) (logic.and (logic.equal (op (op (e1) (e1)) (e3)) (op (e1) (op (e1) (e3)))) (logic.and (logic.equal (op (op (e1) (e2)) (e0)) (op (e1) (op (e2) (e0)))) (logic.and (logic.equal (op (op (e1) (e2)) (e1)) (op (e1) (op (e2) (e1)))) (logic.and (logic.equal (op (op (e1) (e2)) (e2)) (op (e1) (op (e2) (e2)))) (logic.and (logic.equal (op (op (e1) (e2)) (e3)) (op (e1) (op (e2) (e3)))) (logic.and (logic.equal (op (op (e1) (e3)) (e0)) (op (e1) (op (e3) (e0)))) (logic.and (logic.equal (op (op (e1) (e3)) (e1)) (op (e1) (op (e3) (e1)))) (logic.and (logic.equal (op (op (e1) (e3)) (e2)) (op (e1) (op (e3) (e2)))) (logic.and (logic.equal (op (op (e1) (e3)) (e3)) (op (e1) (op (e3) (e3)))) (logic.and (logic.equal (op (op (e2) (e0)) (e0)) (op (e2) (op (e0) (e0)))) (logic.and (logic.equal (op (op (e2) (e0)) (e1)) (op (e2) (op (e0) (e1)))) (logic.and (logic.equal (op (op (e2) (e0)) (e2)) (op (e2) (op (e0) (e2)))) (logic.and (logic.equal (op (op (e2) (e0)) (e3)) (op (e2) (op (e0) (e3)))) (logic.and (logic.equal (op (op (e2) (e1)) (e0)) (op (e2) (op (e1) (e0)))) (logic.and (logic.equal (op (op (e2) (e1)) (e1)) (op (e2) (op (e1) (e1)))) (logic.and (logic.equal (op (op (e2) (e1)) (e2)) (op (e2) (op (e1) (e2)))) (logic.and (logic.equal (op (op (e2) (e1)) (e3)) (op (e2) (op (e1) (e3)))) (logic.and (logic.equal (op (op (e2) (e2)) (e0)) (op (e2) (op (e2) (e0)))) (logic.and (logic.equal (op (op (e2) (e2)) (e1)) (op (e2) (op (e2) (e1)))) (logic.and (logic.equal (op (op (e2) (e2)) (e2)) (op (e2) (op (e2) (e2)))) (logic.and (logic.equal (op (op (e2) (e2)) (e3)) (op (e2) (op (e2) (e3)))) (logic.and (logic.equal (op (op (e2) (e3)) (e0)) (op (e2) (op (e3) (e0)))) (logic.and (logic.equal (op (op (e2) (e3)) (e1)) (op (e2) (op (e3) (e1)))) (logic.and (logic.equal (op (op (e2) (e3)) (e2)) (op (e2) (op (e3) (e2)))) (logic.and (logic.equal (op (op (e2) (e3)) (e3)) (op (e2) (op (e3) (e3)))) (logic.and (logic.equal (op (op (e3) (e0)) (e0)) (op (e3) (op (e0) (e0)))) (logic.and (logic.equal (op (op (e3) (e0)) (e1)) (op (e3) (op (e0) (e1)))) (logic.and (logic.equal (op (op (e3) (e0)) (e2)) (op (e3) (op (e0) (e2)))) (logic.and (logic.equal (op (op (e3) (e0)) (e3)) (op (e3) (op (e0) (e3)))) (logic.and (logic.equal (op (op (e3) (e1)) (e0)) (op (e3) (op (e1) (e0)))) (logic.and (logic.equal (op (op (e3) (e1)) (e1)) (op (e3) (op (e1) (e1)))) (logic.and (logic.equal (op (op (e3) (e1)) (e2)) (op (e3) (op (e1) (e2)))) (logic.and (logic.equal (op (op (e3) (e1)) (e3)) (op (e3) (op (e1) (e3)))) (logic.and (logic.equal (op (op (e3) (e2)) (e0)) (op (e3) (op (e2) (e0)))) (logic.and (logic.equal (op (op (e3) (e2)) (e1)) (op (e3) (op (e2) (e1)))) (logic.and (logic.equal (op (op (e3) (e2)) (e2)) (op (e3) (op (e2) (e2)))) (logic.and (logic.equal (op (op (e3) (e2)) (e3)) (op (e3) (op (e2) (e3)))) (logic.and (logic.equal (op (op (e3) (e3)) (e0)) (op (e3) (op (e3) (e0)))) (logic.and (logic.equal (op (op (e3) (e3)) (e1)) (op (e3) (op (e3) (e1)))) (logic.and (logic.equal (op (op (e3) (e3)) (e2)) (op (e3) (op (e3) (e2)))) (logic.equal (op (op (e3) (e3)) (e3)) (op (e3) (op (e3) (e3)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) => (H2 : (logic.prf (logic.and (logic.equal (op (unit) (e0)) (e0)) (logic.and (logic.equal (op (e0) (unit)) (e0)) (logic.and (logic.equal (op (unit) (e1)) (e1)) (logic.and (logic.equal (op (e1) (unit)) (e1)) (logic.and (logic.equal (op (unit) (e2)) (e2)) (logic.and (logic.equal (op (e2) (unit)) (e2)) (logic.and (logic.equal (op (unit) (e3)) (e3)) (logic.and (logic.equal (op (e3) (unit)) (e3)) (logic.or (logic.equal (unit) (e0)) (logic.or (logic.equal (unit) (e1)) (logic.or (logic.equal (unit) (e2)) (logic.equal (unit) (e3)))))))))))))) => (H3 : (logic.prf (logic.and (logic.equal (op (e0) (inv (e0))) (unit)) (logic.and (logic.equal (op (inv (e0)) (e0)) (unit)) (logic.and (logic.equal (op (e1) (inv (e1))) (unit)) (logic.and (logic.equal (op (inv (e1)) (e1)) (unit)) (logic.and (logic.equal (op (e2) (inv (e2))) (unit)) (logic.and (logic.equal (op (inv (e2)) (e2)) (unit)) (logic.and (logic.equal (op (e3) (inv (e3))) (unit)) (logic.and (logic.equal (op (inv (e3)) (e3)) (unit)) (logic.and (logic.or (logic.equal (inv (e0)) (e0)) (logic.or (logic.equal (inv (e0)) (e1)) (logic.or (logic.equal (inv (e0)) (e2)) (logic.equal (inv (e0)) (e3))))) (logic.and (logic.or (logic.equal (inv (e1)) (e0)) (logic.or (logic.equal (inv (e1)) (e1)) (logic.or (logic.equal (inv (e1)) (e2)) (logic.equal (inv (e1)) (e3))))) (logic.and (logic.or (logic.equal (inv (e2)) (e0)) (logic.or (logic.equal (inv (e2)) (e1)) (logic.or (logic.equal (inv (e2)) (e2)) (logic.equal (inv (e2)) (e3))))) (logic.or (logic.equal (inv (e3)) (e0)) (logic.or (logic.equal (inv (e3)) (e1)) (logic.or (logic.equal (inv (e3)) (e2)) (logic.equal (inv (e3)) (e3))))))))))))))))) => (H4 : (logic.prf (logic.equal (unit) (e0))) => (H5 : (logic.prf (logic.equal (inv (unit)) (unit))) => (H6 : (logic.prf (logic.and (logic.equal (inv (inv (e0))) (e0)) (logic.and (logic.equal (inv (inv (e1))) (e1)) (logic.and (logic.equal (inv (inv (e2))) (e2)) (logic.equal (inv (inv (e3))) (e3)))))) => (H7 : (logic.prf (logic.and (logic.imply (logic.equal (inv (e0)) (e0)) (logic.equal (inv (e0)) (e0))) (logic.and (logic.imply (logic.equal (inv (e0)) (e1)) (logic.equal (inv (e1)) (e0))) (logic.and (logic.imply (logic.equal (inv (e0)) (e2)) (logic.equal (inv (e2)) (e0))) (logic.and (logic.imply (logic.equal (inv (e0)) (e3)) (logic.equal (inv (e3)) (e0))) (logic.and (logic.imply (logic.equal (inv (e1)) (e0)) (logic.equal (inv (e0)) (e1))) (logic.and (logic.imply (logic.equal (inv (e1)) (e1)) (logic.equal (inv (e1)) (e1))) (logic.and (logic.imply (logic.equal (inv (e1)) (e2)) (logic.equal (inv (e2)) (e1))) (logic.and (logic.imply (logic.equal (inv (e1)) (e3)) (logic.equal (inv (e3)) (e1))) (logic.and (logic.imply (logic.equal (inv (e2)) (e0)) (logic.equal (inv (e0)) (e2))) (logic.and (logic.imply (logic.equal (inv (e2)) (e1)) (logic.equal (inv (e1)) (e2))) (logic.and (logic.imply (logic.equal (inv (e2)) (e2)) (logic.equal (inv (e2)) (e2))) (logic.and (logic.imply (logic.equal (inv (e2)) (e3)) (logic.equal (inv (e3)) (e2))) (logic.and (logic.imply (logic.equal (inv (e3)) (e0)) (logic.equal (inv (e0)) (e3))) (logic.and (logic.imply (logic.equal (inv (e3)) (e1)) (logic.equal (inv (e1)) (e3))) (logic.and (logic.imply (logic.equal (inv (e3)) (e2)) (logic.equal (inv (e2)) (e3))) (logic.imply (logic.equal (inv (e3)) (e3)) (logic.equal (inv (e3)) (e3))))))))))))))))))) => (H8 : (logic.prf (logic.and (logic.not (logic.equal (inv (e0)) (inv (e1)))) (logic.and (logic.not (logic.equal (inv (e0)) (inv (e2)))) (logic.and (logic.not (logic.equal (inv (e0)) (inv (e3)))) (logic.and (logic.not (logic.equal (inv (e1)) (inv (e2)))) (logic.and (logic.not (logic.equal (inv (e1)) (inv (e3)))) (logic.not (logic.equal (inv (e2)) (inv (e3)))))))))) => (H9 : (logic.prf (logic.and (logic.not (logic.equal (op (e0) (e0)) (op (e1) (e0)))) (logic.and (logic.not (logic.equal (op (e0) (e0)) (op (e2) (e0)))) (logic.and (logic.not (logic.equal (op (e0) (e0)) (op (e3) (e0)))) (logic.and (logic.not (logic.equal (op (e1) (e0)) (op (e2) (e0)))) (logic.and (logic.not (logic.equal (op (e1) (e0)) (op (e3) (e0)))) (logic.and (logic.not (logic.equal (op (e2) (e0)) (op (e3) (e0)))) (logic.and (logic.not (logic.equal (op (e0) (e1)) (op (e1) (e1)))) (logic.and (logic.not (logic.equal (op (e0) (e1)) (op (e2) (e1)))) (logic.and (logic.not (logic.equal (op (e0) (e1)) (op (e3) (e1)))) (logic.and (logic.not (logic.equal (op (e1) (e1)) (op (e2) (e1)))) (logic.and (logic.not (logic.equal (op (e1) (e1)) (op (e3) (e1)))) (logic.and (logic.not (logic.equal (op (e2) (e1)) (op (e3) (e1)))) (logic.and (logic.not (logic.equal (op (e0) (e2)) (op (e1) (e2)))) (logic.and (logic.not (logic.equal (op (e0) (e2)) (op (e2) (e2)))) (logic.and (logic.not (logic.equal (op (e0) (e2)) (op (e3) (e2)))) (logic.and (logic.not (logic.equal (op (e1) (e2)) (op (e2) (e2)))) (logic.and (logic.not (logic.equal (op (e1) (e2)) (op (e3) (e2)))) (logic.and (logic.not (logic.equal (op (e2) (e2)) (op (e3) (e2)))) (logic.and (logic.not (logic.equal (op (e0) (e3)) (op (e1) (e3)))) (logic.and (logic.not (logic.equal (op (e0) (e3)) (op (e2) (e3)))) (logic.and (logic.not (logic.equal (op (e0) (e3)) (op (e3) (e3)))) (logic.and (logic.not (logic.equal (op (e1) (e3)) (op (e2) (e3)))) (logic.and (logic.not (logic.equal (op (e1) (e3)) (op (e3) (e3)))) (logic.and (logic.not (logic.equal (op (e2) (e3)) (op (e3) (e3)))) (logic.and (logic.not (logic.equal (op (e0) (e0)) (op (e0) (e1)))) (logic.and (logic.not (logic.equal (op (e0) (e0)) (op (e0) (e2)))) (logic.and (logic.not (logic.equal (op (e0) (e0)) (op (e0) (e3)))) (logic.and (logic.not (logic.equal (op (e0) (e1)) (op (e0) (e2)))) (logic.and (logic.not (logic.equal (op (e0) (e1)) (op (e0) (e3)))) (logic.and (logic.not (logic.equal (op (e0) (e2)) (op (e0) (e3)))) (logic.and (logic.not (logic.equal (op (e1) (e0)) (op (e1) (e1)))) (logic.and (logic.not (logic.equal (op (e1) (e0)) (op (e1) (e2)))) (logic.and (logic.not (logic.equal (op (e1) (e0)) (op (e1) (e3)))) (logic.and (logic.not (logic.equal (op (e1) (e1)) (op (e1) (e2)))) (logic.and (logic.not (logic.equal (op (e1) (e1)) (op (e1) (e3)))) (logic.and (logic.not (logic.equal (op (e1) (e2)) (op (e1) (e3)))) (logic.and (logic.not (logic.equal (op (e2) (e0)) (op (e2) (e1)))) (logic.and (logic.not (logic.equal (op (e2) (e0)) (op (e2) (e2)))) (logic.and (logic.not (logic.equal (op (e2) (e0)) (op (e2) (e3)))) (logic.and (logic.not (logic.equal (op (e2) (e1)) (op (e2) (e2)))) (logic.and (logic.not (logic.equal (op (e2) (e1)) (op (e2) (e3)))) (logic.and (logic.not (logic.equal (op (e2) (e2)) (op (e2) (e3)))) (logic.and (logic.not (logic.equal (op (e3) (e0)) (op (e3) (e1)))) (logic.and (logic.not (logic.equal (op (e3) (e0)) (op (e3) (e2)))) (logic.and (logic.not (logic.equal (op (e3) (e0)) (op (e3) (e3)))) (logic.and (logic.not (logic.equal (op (e3) (e1)) (op (e3) (e2)))) (logic.and (logic.not (logic.equal (op (e3) (e1)) (op (e3) (e3)))) (logic.not (logic.equal (op (e3) (e2)) (op (e3) (e3)))))))))))))))))))))))))))))))))))))))))))))))))))) => (H10 : (logic.prf (logic.and (logic.not (logic.equal (e0) (e1))) (logic.and (logic.not (logic.equal (e0) (e2))) (logic.and (logic.not (logic.equal (e0) (e3))) (logic.and (logic.not (logic.equal (e1) (e2))) (logic.and (logic.not (logic.equal (e1) (e3))) (logic.not (logic.equal (e2) (e3))))))))) => (H11 : (logic.prf (logic.not (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))))) (logic.orc (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))))) (logic.not (logic.not (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))))))))))))) => (H11 (P12 : logic.Prop => H13 : ((logic.prf (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0)))))))) -> logic.prf P12) => H14 : ((logic.prf (logic.orc (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))))) (logic.not (logic.not (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))))))))))) -> logic.prf P12) => H13 (H15 : (logic.prf (logic.not (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))))) => (H11 (P16 : logic.Prop => H17 : ((logic.prf (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0)))))))) -> logic.prf P16) => H18 : ((logic.prf (logic.orc (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))))) (logic.not (logic.not (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))))))))))) -> logic.prf P16) => H18 (H19 : (logic.prf (logic.not (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))))) (logic.orc (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3)))))))))))))) => (H19 (P20 : logic.Prop => H21 : ((logic.prf (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1)))))))) -> logic.prf P20) => H22 : ((logic.prf (logic.orc (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3)))))))))))) -> logic.prf P20) => H21 (H23 : (logic.prf (logic.not (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))))) => (H19 (P24 : logic.Prop => H25 : ((logic.prf (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1)))))))) -> logic.prf P24) => H26 : ((logic.prf (logic.orc (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3)))))))))))) -> logic.prf P24) => H26 (H27 : (logic.prf (logic.not (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))))) (logic.not (logic.not (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))))))))))) => (H27 (P28 : logic.Prop => H29 : ((logic.prf (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2)))))))) -> logic.prf P28) => H30 : ((logic.prf (logic.not (logic.not (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))))))))) -> logic.prf P28) => H29 (H31 : (logic.prf (logic.not (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))))) => (H27 (P32 : logic.Prop => H33 : ((logic.prf (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2)))))))) -> logic.prf P32) => H34 : ((logic.prf (logic.not (logic.not (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))))))))) -> logic.prf P32) => H34 (H35 : (logic.prf (logic.not (logic.or (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3)))))))))))) => (H35 (P36 : logic.Prop => H37 : ((logic.prf (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3)))))))) -> logic.prf P36) => H38 : ((logic.prf (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3)))))))))) -> logic.prf P36) => H38 (H39 : (logic.prf (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))))) => (H35 (P40 : logic.Prop => H41 : ((logic.prf (logic.not (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3)))))))) -> logic.prf P40) => H42 : ((logic.prf (logic.not (logic.or (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3)))))))))) -> logic.prf P40) => H41 (H43 : (logic.prf (logic.not (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) => (H39 logic.False (H44 : (logic.prf (logic.and (logic.equal (op (e0) (e0)) (e0)) (logic.and (logic.equal (op (e1) (e1)) (e0)) (logic.and (logic.equal (op (e2) (e2)) (e0)) (logic.equal (op (e3) (e3)) (e0)))))) => (H15 H44)) (H45 : (logic.prf (logic.or (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1))))) (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3)))))))) => (H45 logic.False (H46 : (logic.prf (logic.and (logic.equal (op (e0) (e0)) (e1)) (logic.and (logic.equal (op (e1) (e1)) (e1)) (logic.and (logic.equal (op (e2) (e2)) (e1)) (logic.equal (op (e3) (e3)) (e1)))))) => (H23 H46)) (H47 : (logic.prf (logic.or (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2))))) (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3))))))) => (H47 logic.False (H48 : (logic.prf (logic.and (logic.equal (op (e0) (e0)) (e2)) (logic.and (logic.equal (op (e1) (e1)) (e2)) (logic.and (logic.equal (op (e2) (e2)) (e2)) (logic.equal (op (e3) (e3)) (e2)))))) => (H31 H48)) (H49 : (logic.prf (logic.and (logic.equal (op (e0) (e0)) (e3)) (logic.and (logic.equal (op (e1) (e1)) (e3)) (logic.and (logic.equal (op (e2) (e2)) (e3)) (logic.equal (op (e3) (e3)) (e3)))))) => (H43 H49))))))))))))))))))))))))))))))))))))))))))).