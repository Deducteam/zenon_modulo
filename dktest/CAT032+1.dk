#NAME CAT032_431todk.
l1_cat_1 : logic.Term -> logic.Prop.
k11_cat_2 : logic.Term -> logic.Term -> logic.Term.
u6_cat_1 : logic.Term -> logic.Term.
m2_cat_1 : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
m2_relset_1 : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
r1_tarski : logic.Term -> logic.Term -> logic.Prop.
u5_cat_1 : logic.Term -> logic.Term.
v8_cat_1 : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
v1_cat_1 : logic.Term -> logic.Prop.
m1_subset_1 : logic.Term -> logic.Term -> logic.Prop.
r1_isocat_1 : logic.Term -> logic.Term -> logic.Prop.
v1_funct_1 : logic.Term -> logic.Prop.
u2_cat_1 : logic.Term -> logic.Term.
v1_funct_2 : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
k1_xboole_0 : logic.Term.
v1_relat_1 : logic.Term -> logic.Prop.
u1_cat_1 : logic.Term -> logic.Term.
r2_hidden : logic.Term -> logic.Term -> logic.Prop.
g1_cat_1 : logic.Term -> logic.Term -> logic.Term -> logic.Term -> logic.Term -> logic.Term -> logic.Term.
k12_nattra_1 : logic.Term -> logic.Term -> logic.Term.
k17_isocat_2 : logic.Term -> logic.Term -> logic.Term -> logic.Term.
k2_zfmisc_1 : logic.Term -> logic.Term -> logic.Term.
u3_cat_1 : logic.Term -> logic.Term.
v2_cat_1 : logic.Term -> logic.Prop.
m1_relset_1 : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
k1_zfmisc_1 : logic.Term -> logic.Term.
v1_xboole_0 : logic.Term -> logic.Prop.
u4_cat_1 : logic.Term -> logic.Term.
conjecture_proof : (logic.prf (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.imply (v1_cat_1 A) (logic.equal A (g1_cat_1 (u1_cat_1 A) (u2_cat_1 A) (u3_cat_1 A) (u4_cat_1 A) (u5_cat_1 A) (u6_cat_1 A))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (r2_hidden A B) (logic.not (r2_hidden B A))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (m1_subset_1 C (k1_zfmisc_1 (k2_zfmisc_1 A B))) (v1_relat_1 C)))))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (l1_cat_1 A)) (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 B) (l1_cat_1 B)) (logic.equiv (r1_isocat_1 A B) (logic.exists (C: logic.Term => (logic.and (m2_cat_1 C A B) (v8_cat_1 C A B))))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.forall (D: logic.Term => (logic.forall (E: logic.Term => (logic.forall (F: logic.Term => (logic.imply (logic.and (logic.not (v1_xboole_0 A)) (logic.and (logic.not (v1_xboole_0 B)) (logic.and (v1_funct_1 C) (logic.and (v1_funct_2 C B A) (logic.and (m1_relset_1 C B A) (logic.and (v1_funct_1 D) (logic.and (v1_funct_2 D B A) (logic.and (m1_relset_1 D B A) (logic.and (v1_funct_1 E) (logic.and (m1_relset_1 E (k2_zfmisc_1 B B) B) (logic.and (v1_funct_1 F) (logic.and (v1_funct_2 F A B) (m1_relset_1 F A B))))))))))))) (logic.and (v1_cat_1 (g1_cat_1 A B C D E F)) (l1_cat_1 (g1_cat_1 A B C D E F)))))))))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.and (v2_cat_1 (k11_cat_2 A B)) (l1_cat_1 (k11_cat_2 A B)))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.and (v1_cat_1 (k12_nattra_1 A B)) (logic.and (v2_cat_1 (k12_nattra_1 A B)) (l1_cat_1 (k12_nattra_1 A B))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (logic.and (l1_cat_1 B) (logic.and (v2_cat_1 C) (l1_cat_1 C)))))) (m2_cat_1 (k17_isocat_2 A B C) (k12_nattra_1 A (k11_cat_2 B C)) (k11_cat_2 (k12_nattra_1 A B) (k12_nattra_1 A C)))))))))) (logic.imply logic.True (logic.imply logic.True (logic.imply logic.True (logic.imply logic.True (logic.imply logic.True (logic.imply logic.True (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.forall (C: logic.Term => (logic.imply (m2_cat_1 C A B) (logic.and (v1_funct_1 C) (logic.and (v1_funct_2 C (u2_cat_1 A) (u2_cat_1 B)) (m2_relset_1 C (u2_cat_1 A) (u2_cat_1 B)))))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (m2_relset_1 C A B) (m1_subset_1 C (k1_zfmisc_1 (k2_zfmisc_1 A B)))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.not (v1_xboole_0 (u1_cat_1 A)))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.not (v1_xboole_0 (u2_cat_1 A)))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u3_cat_1 A)) (logic.and (v1_funct_2 (u3_cat_1 A) (u2_cat_1 A) (u1_cat_1 A)) (m2_relset_1 (u3_cat_1 A) (u2_cat_1 A) (u1_cat_1 A))))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u4_cat_1 A)) (logic.and (v1_funct_2 (u4_cat_1 A) (u2_cat_1 A) (u1_cat_1 A)) (m2_relset_1 (u4_cat_1 A) (u2_cat_1 A) (u1_cat_1 A))))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u5_cat_1 A)) (m2_relset_1 (u5_cat_1 A) (k2_zfmisc_1 (u2_cat_1 A) (u2_cat_1 A)) (u2_cat_1 A)))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u6_cat_1 A)) (logic.and (v1_funct_2 (u6_cat_1 A) (u1_cat_1 A) (u2_cat_1 A)) (m2_relset_1 (u6_cat_1 A) (u1_cat_1 A) (u2_cat_1 A))))))) (logic.imply (logic.exists (A: logic.Term => (l1_cat_1 A))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.exists (C: logic.Term => (m1_relset_1 C A B))))))) (logic.imply (logic.forall (A: logic.Term => (logic.exists (B: logic.Term => (m1_subset_1 B A))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.exists (C: logic.Term => (m2_cat_1 C A B)))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.exists (C: logic.Term => (m2_relset_1 C A B))))))) (logic.imply (logic.forall (A: logic.Term => (logic.not (v1_xboole_0 (k1_zfmisc_1 A))))) (logic.imply (v1_xboole_0 (k1_xboole_0)) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (logic.not (v1_xboole_0 A)) (logic.not (v1_xboole_0 B))) (logic.not (v1_xboole_0 (k2_zfmisc_1 A B)))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.forall (D: logic.Term => (logic.forall (E: logic.Term => (logic.forall (F: logic.Term => (logic.imply (logic.and (logic.not (v1_xboole_0 A)) (logic.and (logic.not (v1_xboole_0 B)) (logic.and (v1_funct_1 C) (logic.and (v1_funct_2 C B A) (logic.and (m1_relset_1 C B A) (logic.and (v1_funct_1 D) (logic.and (v1_funct_2 D B A) (logic.and (m1_relset_1 D B A) (logic.and (v1_funct_1 E) (logic.and (m1_relset_1 E (k2_zfmisc_1 B B) B) (logic.and (v1_funct_1 F) (logic.and (v1_funct_2 F A B) (m1_relset_1 F A B))))))))))))) (logic.forall (G: logic.Term => (logic.forall (H: logic.Term => (logic.forall (I: logic.Term => (logic.forall (J: logic.Term => (logic.forall (K: logic.Term => (logic.forall (L: logic.Term => (logic.imply (logic.equal (g1_cat_1 A B C D E F) (g1_cat_1 G H I J K L)) (logic.and (logic.equal A G) (logic.and (logic.equal B H) (logic.and (logic.equal C I) (logic.and (logic.equal D J) (logic.and (logic.equal E K) (logic.equal F L)))))))))))))))))))))))))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (logic.not (v1_xboole_0 A)) (logic.exists (B: logic.Term => (logic.and (m1_subset_1 B (k1_zfmisc_1 A)) (logic.not (v1_xboole_0 B)))))))) (logic.imply (logic.exists (A: logic.Term => (v1_xboole_0 A))) (logic.imply (logic.forall (A: logic.Term => (logic.exists (B: logic.Term => (logic.and (m1_subset_1 B (k1_zfmisc_1 A)) (v1_xboole_0 B)))))) (logic.imply (logic.exists (A: logic.Term => (logic.not (v1_xboole_0 A)))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.equiv (m2_relset_1 C A B) (m1_relset_1 C A B)))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (r1_isocat_1 A A)))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (r1_tarski A A))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.imply (r1_isocat_1 A B) (r1_isocat_1 B A))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (r2_hidden A B) (m1_subset_1 A B)))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (m1_subset_1 A B) (logic.or (v1_xboole_0 B) (r2_hidden A B))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.equiv (m1_subset_1 A (k1_zfmisc_1 B)) (r1_tarski A B)))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (l1_cat_1 A)) (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 B) (l1_cat_1 B)) (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 C) (l1_cat_1 C)) (v8_cat_1 (k17_isocat_2 A B C) (k12_nattra_1 A (k11_cat_2 B C)) (k11_cat_2 (k12_nattra_1 A B) (k12_nattra_1 A C)))))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (logic.and (r2_hidden A B) (m1_subset_1 B (k1_zfmisc_1 C))) (m1_subset_1 A C)))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.not (logic.and (r2_hidden A B) (logic.and (m1_subset_1 B (k1_zfmisc_1 C)) (v1_xboole_0 C)))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (v1_xboole_0 A) (logic.equal A (k1_xboole_0))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.not (logic.and (r2_hidden A B) (v1_xboole_0 B))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.not (logic.and (v1_xboole_0 A) (logic.and (logic.not (logic.equal A B)) (v1_xboole_0 B)))))))) (logic.forall (A: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (l1_cat_1 A)) (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 B) (l1_cat_1 B)) (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 C) (l1_cat_1 C)) (logic.not (logic.not (r1_isocat_1 (k12_nattra_1 A (k11_cat_2 B C)) (k11_cat_2 (k12_nattra_1 A B) (k12_nattra_1 A C))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :=
(H0 : (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.imply (v1_cat_1 A) (logic.equal A (g1_cat_1 (u1_cat_1 A) (u2_cat_1 A) (u3_cat_1 A) (u4_cat_1 A) (u5_cat_1 A) (u6_cat_1 A)))))))) => (H1 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (r2_hidden A B) (logic.not (r2_hidden B A)))))))) => (H2 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (m1_subset_1 C (k1_zfmisc_1 (k2_zfmisc_1 A B))) (v1_relat_1 C))))))))) => (H3 : (logic.prf (logic.forall (A: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (l1_cat_1 A)) (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 B) (l1_cat_1 B)) (logic.equiv (r1_isocat_1 A B) (logic.exists (C: logic.Term => (logic.and (m2_cat_1 C A B) (v8_cat_1 C A B)))))))))))) => (H4 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.forall (D: logic.Term => (logic.forall (E: logic.Term => (logic.forall (F: logic.Term => (logic.imply (logic.and (logic.not (v1_xboole_0 A)) (logic.and (logic.not (v1_xboole_0 B)) (logic.and (v1_funct_1 C) (logic.and (v1_funct_2 C B A) (logic.and (m1_relset_1 C B A) (logic.and (v1_funct_1 D) (logic.and (v1_funct_2 D B A) (logic.and (m1_relset_1 D B A) (logic.and (v1_funct_1 E) (logic.and (m1_relset_1 E (k2_zfmisc_1 B B) B) (logic.and (v1_funct_1 F) (logic.and (v1_funct_2 F A B) (m1_relset_1 F A B))))))))))))) (logic.and (v1_cat_1 (g1_cat_1 A B C D E F)) (l1_cat_1 (g1_cat_1 A B C D E F))))))))))))))))) => (H5 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.and (v2_cat_1 (k11_cat_2 A B)) (l1_cat_1 (k11_cat_2 A B))))))))) => (H6 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.and (v1_cat_1 (k12_nattra_1 A B)) (logic.and (v2_cat_1 (k12_nattra_1 A B)) (l1_cat_1 (k12_nattra_1 A B)))))))))) => (H7 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (logic.and (l1_cat_1 B) (logic.and (v2_cat_1 C) (l1_cat_1 C)))))) (m2_cat_1 (k17_isocat_2 A B C) (k12_nattra_1 A (k11_cat_2 B C)) (k11_cat_2 (k12_nattra_1 A B) (k12_nattra_1 A C))))))))))) => (H8 : (logic.prf logic.True) => (H9 : (logic.prf logic.True) => (H10 : (logic.prf logic.True) => (H11 : (logic.prf logic.True) => (H12 : (logic.prf logic.True) => (H13 : (logic.prf logic.True) => (H14 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.forall (C: logic.Term => (logic.imply (m2_cat_1 C A B) (logic.and (v1_funct_1 C) (logic.and (v1_funct_2 C (u2_cat_1 A) (u2_cat_1 B)) (m2_relset_1 C (u2_cat_1 A) (u2_cat_1 B))))))))))))) => (H15 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (m2_relset_1 C A B) (m1_subset_1 C (k1_zfmisc_1 (k2_zfmisc_1 A B))))))))))) => (H16 : (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.not (v1_xboole_0 (u1_cat_1 A))))))) => (H17 : (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.not (v1_xboole_0 (u2_cat_1 A))))))) => (H18 : (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u3_cat_1 A)) (logic.and (v1_funct_2 (u3_cat_1 A) (u2_cat_1 A) (u1_cat_1 A)) (m2_relset_1 (u3_cat_1 A) (u2_cat_1 A) (u1_cat_1 A)))))))) => (H19 : (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u4_cat_1 A)) (logic.and (v1_funct_2 (u4_cat_1 A) (u2_cat_1 A) (u1_cat_1 A)) (m2_relset_1 (u4_cat_1 A) (u2_cat_1 A) (u1_cat_1 A)))))))) => (H20 : (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u5_cat_1 A)) (m2_relset_1 (u5_cat_1 A) (k2_zfmisc_1 (u2_cat_1 A) (u2_cat_1 A)) (u2_cat_1 A))))))) => (H21 : (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u6_cat_1 A)) (logic.and (v1_funct_2 (u6_cat_1 A) (u1_cat_1 A) (u2_cat_1 A)) (m2_relset_1 (u6_cat_1 A) (u1_cat_1 A) (u2_cat_1 A)))))))) => (H22 : (logic.prf (logic.exists (A: logic.Term => (l1_cat_1 A)))) => (H23 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.exists (C: logic.Term => (m1_relset_1 C A B)))))))) => (H24 : (logic.prf (logic.forall (A: logic.Term => (logic.exists (B: logic.Term => (m1_subset_1 B A)))))) => (H25 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.exists (C: logic.Term => (m2_cat_1 C A B))))))))) => (H26 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.exists (C: logic.Term => (m2_relset_1 C A B)))))))) => (H27 : (logic.prf (logic.forall (A: logic.Term => (logic.not (v1_xboole_0 (k1_zfmisc_1 A)))))) => (H28 : (logic.prf (v1_xboole_0 (k1_xboole_0))) => (H29 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (logic.not (v1_xboole_0 A)) (logic.not (v1_xboole_0 B))) (logic.not (v1_xboole_0 (k2_zfmisc_1 A B))))))))) => (H30 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.forall (D: logic.Term => (logic.forall (E: logic.Term => (logic.forall (F: logic.Term => (logic.imply (logic.and (logic.not (v1_xboole_0 A)) (logic.and (logic.not (v1_xboole_0 B)) (logic.and (v1_funct_1 C) (logic.and (v1_funct_2 C B A) (logic.and (m1_relset_1 C B A) (logic.and (v1_funct_1 D) (logic.and (v1_funct_2 D B A) (logic.and (m1_relset_1 D B A) (logic.and (v1_funct_1 E) (logic.and (m1_relset_1 E (k2_zfmisc_1 B B) B) (logic.and (v1_funct_1 F) (logic.and (v1_funct_2 F A B) (m1_relset_1 F A B))))))))))))) (logic.forall (G: logic.Term => (logic.forall (H: logic.Term => (logic.forall (I: logic.Term => (logic.forall (J: logic.Term => (logic.forall (K: logic.Term => (logic.forall (L: logic.Term => (logic.imply (logic.equal (g1_cat_1 A B C D E F) (g1_cat_1 G H I J K L)) (logic.and (logic.equal A G) (logic.and (logic.equal B H) (logic.and (logic.equal C I) (logic.and (logic.equal D J) (logic.and (logic.equal E K) (logic.equal F L))))))))))))))))))))))))))))))))) => (H31 : (logic.prf (logic.forall (A: logic.Term => (logic.imply (logic.not (v1_xboole_0 A)) (logic.exists (B: logic.Term => (logic.and (m1_subset_1 B (k1_zfmisc_1 A)) (logic.not (v1_xboole_0 B))))))))) => (H32 : (logic.prf (logic.exists (A: logic.Term => (v1_xboole_0 A)))) => (H33 : (logic.prf (logic.forall (A: logic.Term => (logic.exists (B: logic.Term => (logic.and (m1_subset_1 B (k1_zfmisc_1 A)) (v1_xboole_0 B))))))) => (H34 : (logic.prf (logic.exists (A: logic.Term => (logic.not (v1_xboole_0 A))))) => (H35 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.equiv (m2_relset_1 C A B) (m1_relset_1 C A B))))))))) => (H36 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (r1_isocat_1 A A))))))) => (H37 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (r1_tarski A A)))))) => (H38 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.imply (r1_isocat_1 A B) (r1_isocat_1 B A)))))))) => (H39 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (r2_hidden A B) (m1_subset_1 A B))))))) => (H40 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (m1_subset_1 A B) (logic.or (v1_xboole_0 B) (r2_hidden A B)))))))) => (H41 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.equiv (m1_subset_1 A (k1_zfmisc_1 B)) (r1_tarski A B))))))) => (H42 : (logic.prf (logic.forall (A: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (l1_cat_1 A)) (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 B) (l1_cat_1 B)) (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 C) (l1_cat_1 C)) (v8_cat_1 (k17_isocat_2 A B C) (k12_nattra_1 A (k11_cat_2 B C)) (k11_cat_2 (k12_nattra_1 A B) (k12_nattra_1 A C))))))))))))) => (H43 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (logic.and (r2_hidden A B) (m1_subset_1 B (k1_zfmisc_1 C))) (m1_subset_1 A C))))))))) => (H44 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.not (logic.and (r2_hidden A B) (logic.and (m1_subset_1 B (k1_zfmisc_1 C)) (v1_xboole_0 C))))))))))) => (H45 : (logic.prf (logic.forall (A: logic.Term => (logic.imply (v1_xboole_0 A) (logic.equal A (k1_xboole_0)))))) => (H46 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.not (logic.and (r2_hidden A B) (v1_xboole_0 B)))))))) => (H47 : (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.not (logic.and (v1_xboole_0 A) (logic.and (logic.not (logic.equal A B)) (v1_xboole_0 B))))))))) => (v0:logic.Term => (H48 : (logic.prf (logic.and (v2_cat_1 v0) (l1_cat_1 v0))) => (H48 (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 B) (l1_cat_1 B)) (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 C) (l1_cat_1 C)) (logic.not (logic.not (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 B C)) (k11_cat_2 (k12_nattra_1 v0 B) (k12_nattra_1 v0 C))))))))))) (H49 : (logic.prf (v2_cat_1 v0)) => H50 : (logic.prf (l1_cat_1 v0)) => (v1:logic.Term => (H51 : (logic.prf (logic.and (v2_cat_1 v1) (l1_cat_1 v1))) => (H51 (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 C) (l1_cat_1 C)) (logic.not (logic.not (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 C)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 C)))))))) (H52 : (logic.prf (v2_cat_1 v1)) => H53 : (logic.prf (l1_cat_1 v1)) => (v2:logic.Term => (H54 : (logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) => (H54 (logic.not (logic.not (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))))) (H55 : (logic.prf (v2_cat_1 v2)) => H56 : (logic.prf (l1_cat_1 v2)) => (((((H3 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (P59 : logic.Prop => H60 : ((logic.prf (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) -> (logic.prf (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) -> logic.prf P59) => H60 ((((H6 v0) (k11_cat_2 v1 v2)) (P63 : logic.Prop => H64 : ((logic.prf (v2_cat_1 v0)) -> (logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 (k11_cat_2 v1 v2)) (l1_cat_1 (k11_cat_2 v1 v2))))) -> logic.prf P63) => H64 H49 (P65 : logic.Prop => H66 : ((logic.prf (l1_cat_1 v0)) -> (logic.prf (logic.and (v2_cat_1 (k11_cat_2 v1 v2)) (l1_cat_1 (k11_cat_2 v1 v2)))) -> logic.prf P65) => H66 H50 (P67 : logic.Prop => H68 : ((logic.prf (v2_cat_1 (k11_cat_2 v1 v2))) -> (logic.prf (l1_cat_1 (k11_cat_2 v1 v2))) -> logic.prf P67) => H68 ((((H5 v1) v2) (P71 : logic.Prop => H72 : ((logic.prf (v2_cat_1 v1)) -> (logic.prf (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> logic.prf P71) => H72 H52 (P73 : logic.Prop => H74 : ((logic.prf (l1_cat_1 v1)) -> (logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> logic.prf P73) => H74 H53 (P75 : logic.Prop => H76 : ((logic.prf (v2_cat_1 v2)) -> (logic.prf (l1_cat_1 v2)) -> logic.prf P75) => H76 H55 H56)))) (v2_cat_1 (k11_cat_2 v1 v2)) (H69 : (logic.prf (v2_cat_1 (k11_cat_2 v1 v2))) => H70 : (logic.prf (l1_cat_1 (k11_cat_2 v1 v2))) => H69)) ((((H5 v1) v2) (P79 : logic.Prop => H80 : ((logic.prf (v2_cat_1 v1)) -> (logic.prf (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> logic.prf P79) => H80 H52 (P81 : logic.Prop => H82 : ((logic.prf (l1_cat_1 v1)) -> (logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> logic.prf P81) => H82 H53 (P83 : logic.Prop => H84 : ((logic.prf (v2_cat_1 v2)) -> (logic.prf (l1_cat_1 v2)) -> logic.prf P83) => H84 H55 H56)))) (l1_cat_1 (k11_cat_2 v1 v2)) (H77 : (logic.prf (v2_cat_1 (k11_cat_2 v1 v2))) => H78 : (logic.prf (l1_cat_1 (k11_cat_2 v1 v2))) => H78)))))) (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (H61 : (logic.prf (v1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) => H62 : (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))))) => (H62 (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (H85 : (logic.prf (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) => H86 : (logic.prf (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) => H85)))) ((((H6 v0) (k11_cat_2 v1 v2)) (P89 : logic.Prop => H90 : ((logic.prf (v2_cat_1 v0)) -> (logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 (k11_cat_2 v1 v2)) (l1_cat_1 (k11_cat_2 v1 v2))))) -> logic.prf P89) => H90 H49 (P91 : logic.Prop => H92 : ((logic.prf (l1_cat_1 v0)) -> (logic.prf (logic.and (v2_cat_1 (k11_cat_2 v1 v2)) (l1_cat_1 (k11_cat_2 v1 v2)))) -> logic.prf P91) => H92 H50 (P93 : logic.Prop => H94 : ((logic.prf (v2_cat_1 (k11_cat_2 v1 v2))) -> (logic.prf (l1_cat_1 (k11_cat_2 v1 v2))) -> logic.prf P93) => H94 ((((H5 v1) v2) (P97 : logic.Prop => H98 : ((logic.prf (v2_cat_1 v1)) -> (logic.prf (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> logic.prf P97) => H98 H52 (P99 : logic.Prop => H100 : ((logic.prf (l1_cat_1 v1)) -> (logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> logic.prf P99) => H100 H53 (P101 : logic.Prop => H102 : ((logic.prf (v2_cat_1 v2)) -> (logic.prf (l1_cat_1 v2)) -> logic.prf P101) => H102 H55 H56)))) (v2_cat_1 (k11_cat_2 v1 v2)) (H95 : (logic.prf (v2_cat_1 (k11_cat_2 v1 v2))) => H96 : (logic.prf (l1_cat_1 (k11_cat_2 v1 v2))) => H95)) ((((H5 v1) v2) (P105 : logic.Prop => H106 : ((logic.prf (v2_cat_1 v1)) -> (logic.prf (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> logic.prf P105) => H106 H52 (P107 : logic.Prop => H108 : ((logic.prf (l1_cat_1 v1)) -> (logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> logic.prf P107) => H108 H53 (P109 : logic.Prop => H110 : ((logic.prf (v2_cat_1 v2)) -> (logic.prf (l1_cat_1 v2)) -> logic.prf P109) => H110 H55 H56)))) (l1_cat_1 (k11_cat_2 v1 v2)) (H103 : (logic.prf (v2_cat_1 (k11_cat_2 v1 v2))) => H104 : (logic.prf (l1_cat_1 (k11_cat_2 v1 v2))) => H104)))))) (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (H87 : (logic.prf (v1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) => H88 : (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))))) => (H88 (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (H111 : (logic.prf (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) => H112 : (logic.prf (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) => H112)))))) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (P113 : logic.Prop => H114 : ((logic.prf (v2_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) -> (logic.prf (l1_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) -> logic.prf P113) => H114 ((((H5 (k12_nattra_1 v0 v1)) (k12_nattra_1 v0 v2)) (P117 : logic.Prop => H118 : ((logic.prf (v2_cat_1 (k12_nattra_1 v0 v1))) -> (logic.prf (logic.and (l1_cat_1 (k12_nattra_1 v0 v1)) (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2))))) -> logic.prf P117) => H118 ((((H6 v0) v1) (P121 : logic.Prop => H122 : ((logic.prf (v2_cat_1 v0)) -> (logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v1) (l1_cat_1 v1)))) -> logic.prf P121) => H122 H49 (P123 : logic.Prop => H124 : ((logic.prf (l1_cat_1 v0)) -> (logic.prf (logic.and (v2_cat_1 v1) (l1_cat_1 v1))) -> logic.prf P123) => H124 H50 (P125 : logic.Prop => H126 : ((logic.prf (v2_cat_1 v1)) -> (logic.prf (l1_cat_1 v1)) -> logic.prf P125) => H126 H52 H53)))) (v2_cat_1 (k12_nattra_1 v0 v1)) (H119 : (logic.prf (v1_cat_1 (k12_nattra_1 v0 v1))) => H120 : (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v1)) (l1_cat_1 (k12_nattra_1 v0 v1)))) => (H120 (v2_cat_1 (k12_nattra_1 v0 v1)) (H127 : (logic.prf (v2_cat_1 (k12_nattra_1 v0 v1))) => H128 : (logic.prf (l1_cat_1 (k12_nattra_1 v0 v1))) => H127)))) (P129 : logic.Prop => H130 : ((logic.prf (l1_cat_1 (k12_nattra_1 v0 v1))) -> (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2)))) -> logic.prf P129) => H130 ((((H6 v0) v1) (P133 : logic.Prop => H134 : ((logic.prf (v2_cat_1 v0)) -> (logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v1) (l1_cat_1 v1)))) -> logic.prf P133) => H134 H49 (P135 : logic.Prop => H136 : ((logic.prf (l1_cat_1 v0)) -> (logic.prf (logic.and (v2_cat_1 v1) (l1_cat_1 v1))) -> logic.prf P135) => H136 H50 (P137 : logic.Prop => H138 : ((logic.prf (v2_cat_1 v1)) -> (logic.prf (l1_cat_1 v1)) -> logic.prf P137) => H138 H52 H53)))) (l1_cat_1 (k12_nattra_1 v0 v1)) (H131 : (logic.prf (v1_cat_1 (k12_nattra_1 v0 v1))) => H132 : (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v1)) (l1_cat_1 (k12_nattra_1 v0 v1)))) => (H132 (l1_cat_1 (k12_nattra_1 v0 v1)) (H139 : (logic.prf (v2_cat_1 (k12_nattra_1 v0 v1))) => H140 : (logic.prf (l1_cat_1 (k12_nattra_1 v0 v1))) => H140)))) (P141 : logic.Prop => H142 : ((logic.prf (v2_cat_1 (k12_nattra_1 v0 v2))) -> (logic.prf (l1_cat_1 (k12_nattra_1 v0 v2))) -> logic.prf P141) => H142 ((((H6 v0) v2) (P145 : logic.Prop => H146 : ((logic.prf (v2_cat_1 v0)) -> (logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> logic.prf P145) => H146 H49 (P147 : logic.Prop => H148 : ((logic.prf (l1_cat_1 v0)) -> (logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> logic.prf P147) => H148 H50 (P149 : logic.Prop => H150 : ((logic.prf (v2_cat_1 v2)) -> (logic.prf (l1_cat_1 v2)) -> logic.prf P149) => H150 H55 H56)))) (v2_cat_1 (k12_nattra_1 v0 v2)) (H143 : (logic.prf (v1_cat_1 (k12_nattra_1 v0 v2))) => H144 : (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2)))) => (H144 (v2_cat_1 (k12_nattra_1 v0 v2)) (H151 : (logic.prf (v2_cat_1 (k12_nattra_1 v0 v2))) => H152 : (logic.prf (l1_cat_1 (k12_nattra_1 v0 v2))) => H151)))) ((((H6 v0) v2) (P155 : logic.Prop => H156 : ((logic.prf (v2_cat_1 v0)) -> (logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> logic.prf P155) => H156 H49 (P157 : logic.Prop => H158 : ((logic.prf (l1_cat_1 v0)) -> (logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> logic.prf P157) => H158 H50 (P159 : logic.Prop => H160 : ((logic.prf (v2_cat_1 v2)) -> (logic.prf (l1_cat_1 v2)) -> logic.prf P159) => H160 H55 H56)))) (l1_cat_1 (k12_nattra_1 v0 v2)) (H153 : (logic.prf (v1_cat_1 (k12_nattra_1 v0 v2))) => H154 : (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2)))) => (H154 (l1_cat_1 (k12_nattra_1 v0 v2)) (H161 : (logic.prf (v2_cat_1 (k12_nattra_1 v0 v2))) => H162 : (logic.prf (l1_cat_1 (k12_nattra_1 v0 v2))) => H162)))))))) (v2_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (H115 : (logic.prf (v2_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) => H116 : (logic.prf (l1_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) => H115)) ((((H5 (k12_nattra_1 v0 v1)) (k12_nattra_1 v0 v2)) (P165 : logic.Prop => H166 : ((logic.prf (v2_cat_1 (k12_nattra_1 v0 v1))) -> (logic.prf (logic.and (l1_cat_1 (k12_nattra_1 v0 v1)) (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2))))) -> logic.prf P165) => H166 ((((H6 v0) v1) (P169 : logic.Prop => H170 : ((logic.prf (v2_cat_1 v0)) -> (logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v1) (l1_cat_1 v1)))) -> logic.prf P169) => H170 H49 (P171 : logic.Prop => H172 : ((logic.prf (l1_cat_1 v0)) -> (logic.prf (logic.and (v2_cat_1 v1) (l1_cat_1 v1))) -> logic.prf P171) => H172 H50 (P173 : logic.Prop => H174 : ((logic.prf (v2_cat_1 v1)) -> (logic.prf (l1_cat_1 v1)) -> logic.prf P173) => H174 H52 H53)))) (v2_cat_1 (k12_nattra_1 v0 v1)) (H167 : (logic.prf (v1_cat_1 (k12_nattra_1 v0 v1))) => H168 : (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v1)) (l1_cat_1 (k12_nattra_1 v0 v1)))) => (H168 (v2_cat_1 (k12_nattra_1 v0 v1)) (H175 : (logic.prf (v2_cat_1 (k12_nattra_1 v0 v1))) => H176 : (logic.prf (l1_cat_1 (k12_nattra_1 v0 v1))) => H175)))) (P177 : logic.Prop => H178 : ((logic.prf (l1_cat_1 (k12_nattra_1 v0 v1))) -> (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2)))) -> logic.prf P177) => H178 ((((H6 v0) v1) (P181 : logic.Prop => H182 : ((logic.prf (v2_cat_1 v0)) -> (logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v1) (l1_cat_1 v1)))) -> logic.prf P181) => H182 H49 (P183 : logic.Prop => H184 : ((logic.prf (l1_cat_1 v0)) -> (logic.prf (logic.and (v2_cat_1 v1) (l1_cat_1 v1))) -> logic.prf P183) => H184 H50 (P185 : logic.Prop => H186 : ((logic.prf (v2_cat_1 v1)) -> (logic.prf (l1_cat_1 v1)) -> logic.prf P185) => H186 H52 H53)))) (l1_cat_1 (k12_nattra_1 v0 v1)) (H179 : (logic.prf (v1_cat_1 (k12_nattra_1 v0 v1))) => H180 : (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v1)) (l1_cat_1 (k12_nattra_1 v0 v1)))) => (H180 (l1_cat_1 (k12_nattra_1 v0 v1)) (H187 : (logic.prf (v2_cat_1 (k12_nattra_1 v0 v1))) => H188 : (logic.prf (l1_cat_1 (k12_nattra_1 v0 v1))) => H188)))) (P189 : logic.Prop => H190 : ((logic.prf (v2_cat_1 (k12_nattra_1 v0 v2))) -> (logic.prf (l1_cat_1 (k12_nattra_1 v0 v2))) -> logic.prf P189) => H190 ((((H6 v0) v2) (P193 : logic.Prop => H194 : ((logic.prf (v2_cat_1 v0)) -> (logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> logic.prf P193) => H194 H49 (P195 : logic.Prop => H196 : ((logic.prf (l1_cat_1 v0)) -> (logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> logic.prf P195) => H196 H50 (P197 : logic.Prop => H198 : ((logic.prf (v2_cat_1 v2)) -> (logic.prf (l1_cat_1 v2)) -> logic.prf P197) => H198 H55 H56)))) (v2_cat_1 (k12_nattra_1 v0 v2)) (H191 : (logic.prf (v1_cat_1 (k12_nattra_1 v0 v2))) => H192 : (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2)))) => (H192 (v2_cat_1 (k12_nattra_1 v0 v2)) (H199 : (logic.prf (v2_cat_1 (k12_nattra_1 v0 v2))) => H200 : (logic.prf (l1_cat_1 (k12_nattra_1 v0 v2))) => H199)))) ((((H6 v0) v2) (P203 : logic.Prop => H204 : ((logic.prf (v2_cat_1 v0)) -> (logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> logic.prf P203) => H204 H49 (P205 : logic.Prop => H206 : ((logic.prf (l1_cat_1 v0)) -> (logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> logic.prf P205) => H206 H50 (P207 : logic.Prop => H208 : ((logic.prf (v2_cat_1 v2)) -> (logic.prf (l1_cat_1 v2)) -> logic.prf P207) => H208 H55 H56)))) (l1_cat_1 (k12_nattra_1 v0 v2)) (H201 : (logic.prf (v1_cat_1 (k12_nattra_1 v0 v2))) => H202 : (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2)))) => (H202 (l1_cat_1 (k12_nattra_1 v0 v2)) (H209 : (logic.prf (v2_cat_1 (k12_nattra_1 v0 v2))) => H210 : (logic.prf (l1_cat_1 (k12_nattra_1 v0 v2))) => H210)))))))) (l1_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (H163 : (logic.prf (v2_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) => H164 : (logic.prf (l1_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) => H164)))) (logic.not (logic.not (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))))) (H57 : (logic.prf (logic.imply (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (logic.exists (C: logic.Term => (logic.and (m2_cat_1 C (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (v8_cat_1 C (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))))))) => H58 : (logic.prf (logic.imply (logic.exists (C: logic.Term => (logic.and (m2_cat_1 C (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (v8_cat_1 C (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))))) (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))))) => (H211 : (logic.prf (logic.not (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))))) => (H211 (H58 (H57 ((H211 (H58 (P212:logic.Prop => H213: (C:logic.Term -> logic.prf (logic.and (m2_cat_1 C (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (v8_cat_1 C (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) -> logic.prf P212) => H213 (k17_isocat_2 v0 v1 v2) (P214 : logic.Prop => H215 : ((logic.prf (m2_cat_1 (k17_isocat_2 v0 v1 v2) (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) -> (logic.prf (v8_cat_1 (k17_isocat_2 v0 v1 v2) (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) -> logic.prf P214) => H215 ((((H7 v0) v1) v2) (P216 : logic.Prop => H217 : ((logic.prf (v2_cat_1 v0)) -> (logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v1) (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))))) -> logic.prf P216) => H217 H49 (P218 : logic.Prop => H219 : ((logic.prf (l1_cat_1 v0)) -> (logic.prf (logic.and (v2_cat_1 v1) (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2))))) -> logic.prf P218) => H219 H50 (P220 : logic.Prop => H221 : ((logic.prf (v2_cat_1 v1)) -> (logic.prf (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> logic.prf P220) => H221 H52 (P222 : logic.Prop => H223 : ((logic.prf (l1_cat_1 v1)) -> (logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> logic.prf P222) => H223 H53 (P224 : logic.Prop => H225 : ((logic.prf (v2_cat_1 v2)) -> (logic.prf (l1_cat_1 v2)) -> logic.prf P224) => H225 H55 H56)))))) ((((((H42 v0) (P226 : logic.Prop => H227 : ((logic.prf (v2_cat_1 v0)) -> (logic.prf (l1_cat_1 v0)) -> logic.prf P226) => H227 H49 H50)) v1) (P228 : logic.Prop => H229 : ((logic.prf (v2_cat_1 v1)) -> (logic.prf (l1_cat_1 v1)) -> logic.prf P228) => H229 H52 H53)) v2) (P230 : logic.Prop => H231 : ((logic.prf (v2_cat_1 v2)) -> (logic.prf (l1_cat_1 v2)) -> logic.prf P230) => H231 H55 H56)))))) (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).