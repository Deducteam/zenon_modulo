#NAME CAT032_431todk.
l1_cat_1 : logic.Term -> logic.Prop.
k11_cat_2 : logic.Term -> logic.Term -> logic.Term.
u6_cat_1 : logic.Term -> logic.Term.
m2_cat_1 : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
m2_relset_1 : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
r1_tarski : logic.Term -> logic.Term -> logic.Prop.
u5_cat_1 : logic.Term -> logic.Term.
v8_cat_1 : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
v1_cat_1 : logic.Term -> logic.Prop.
m1_subset_1 : logic.Term -> logic.Term -> logic.Prop.
r1_isocat_1 : logic.Term -> logic.Term -> logic.Prop.
v1_funct_1 : logic.Term -> logic.Prop.
u2_cat_1 : logic.Term -> logic.Term.
v1_funct_2 : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
k1_xboole_0 : logic.Term.
v1_relat_1 : logic.Term -> logic.Prop.
u1_cat_1 : logic.Term -> logic.Term.
r2_hidden : logic.Term -> logic.Term -> logic.Prop.
g1_cat_1 : logic.Term -> logic.Term -> logic.Term -> logic.Term -> logic.Term -> logic.Term -> logic.Term.
k12_nattra_1 : logic.Term -> logic.Term -> logic.Term.
k17_isocat_2 : logic.Term -> logic.Term -> logic.Term -> logic.Term.
k2_zfmisc_1 : logic.Term -> logic.Term -> logic.Term.
u3_cat_1 : logic.Term -> logic.Term.
v2_cat_1 : logic.Term -> logic.Prop.
m1_relset_1 : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
k1_zfmisc_1 : logic.Term -> logic.Term.
v1_xboole_0 : logic.Term -> logic.Prop.
u4_cat_1 : logic.Term -> logic.Term.
conjecture_proof : (logic.prf (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.imply (v1_cat_1 A) (logic.equal A (g1_cat_1 (u1_cat_1 A) (u2_cat_1 A) (u3_cat_1 A) (u4_cat_1 A) (u5_cat_1 A) (u6_cat_1 A))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (r2_hidden A B) (logic.not (r2_hidden B A))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (m1_subset_1 C (k1_zfmisc_1 (k2_zfmisc_1 A B))) (v1_relat_1 C)))))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (l1_cat_1 A)) (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 B) (l1_cat_1 B)) (logic.equiv (r1_isocat_1 A B) (logic.exists (C: logic.Term => (logic.and (m2_cat_1 C A B) (v8_cat_1 C A B))))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.forall (D: logic.Term => (logic.forall (E: logic.Term => (logic.forall (F: logic.Term => (logic.imply (logic.and (logic.not (v1_xboole_0 A)) (logic.and (logic.not (v1_xboole_0 B)) (logic.and (v1_funct_1 C) (logic.and (v1_funct_2 C B A) (logic.and (m1_relset_1 C B A) (logic.and (v1_funct_1 D) (logic.and (v1_funct_2 D B A) (logic.and (m1_relset_1 D B A) (logic.and (v1_funct_1 E) (logic.and (m1_relset_1 E (k2_zfmisc_1 B B) B) (logic.and (v1_funct_1 F) (logic.and (v1_funct_2 F A B) (m1_relset_1 F A B))))))))))))) (logic.and (v1_cat_1 (g1_cat_1 A B C D E F)) (l1_cat_1 (g1_cat_1 A B C D E F)))))))))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.and (v2_cat_1 (k11_cat_2 A B)) (l1_cat_1 (k11_cat_2 A B)))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.and (v1_cat_1 (k12_nattra_1 A B)) (logic.and (v2_cat_1 (k12_nattra_1 A B)) (l1_cat_1 (k12_nattra_1 A B))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (logic.and (l1_cat_1 B) (logic.and (v2_cat_1 C) (l1_cat_1 C)))))) (m2_cat_1 (k17_isocat_2 A B C) (k12_nattra_1 A (k11_cat_2 B C)) (k11_cat_2 (k12_nattra_1 A B) (k12_nattra_1 A C)))))))))) (logic.imply logic.True (logic.imply logic.True (logic.imply logic.True (logic.imply logic.True (logic.imply logic.True (logic.imply logic.True (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.forall (C: logic.Term => (logic.imply (m2_cat_1 C A B) (logic.and (v1_funct_1 C) (logic.and (v1_funct_2 C (u2_cat_1 A) (u2_cat_1 B)) (m2_relset_1 C (u2_cat_1 A) (u2_cat_1 B)))))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (m2_relset_1 C A B) (m1_subset_1 C (k1_zfmisc_1 (k2_zfmisc_1 A B)))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.not (v1_xboole_0 (u1_cat_1 A)))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.not (v1_xboole_0 (u2_cat_1 A)))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u3_cat_1 A)) (logic.and (v1_funct_2 (u3_cat_1 A) (u2_cat_1 A) (u1_cat_1 A)) (m2_relset_1 (u3_cat_1 A) (u2_cat_1 A) (u1_cat_1 A))))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u4_cat_1 A)) (logic.and (v1_funct_2 (u4_cat_1 A) (u2_cat_1 A) (u1_cat_1 A)) (m2_relset_1 (u4_cat_1 A) (u2_cat_1 A) (u1_cat_1 A))))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u5_cat_1 A)) (m2_relset_1 (u5_cat_1 A) (k2_zfmisc_1 (u2_cat_1 A) (u2_cat_1 A)) (u2_cat_1 A)))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u6_cat_1 A)) (logic.and (v1_funct_2 (u6_cat_1 A) (u1_cat_1 A) (u2_cat_1 A)) (m2_relset_1 (u6_cat_1 A) (u1_cat_1 A) (u2_cat_1 A))))))) (logic.imply (logic.exists (A: logic.Term => (l1_cat_1 A))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.exists (C: logic.Term => (m1_relset_1 C A B))))))) (logic.imply (logic.forall (A: logic.Term => (logic.exists (B: logic.Term => (m1_subset_1 B A))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.exists (C: logic.Term => (m2_cat_1 C A B)))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.exists (C: logic.Term => (m2_relset_1 C A B))))))) (logic.imply (logic.forall (A: logic.Term => (logic.not (v1_xboole_0 (k1_zfmisc_1 A))))) (logic.imply (v1_xboole_0 (k1_xboole_0)) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (logic.not (v1_xboole_0 A)) (logic.not (v1_xboole_0 B))) (logic.not (v1_xboole_0 (k2_zfmisc_1 A B)))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.forall (D: logic.Term => (logic.forall (E: logic.Term => (logic.forall (F: logic.Term => (logic.imply (logic.and (logic.not (v1_xboole_0 A)) (logic.and (logic.not (v1_xboole_0 B)) (logic.and (v1_funct_1 C) (logic.and (v1_funct_2 C B A) (logic.and (m1_relset_1 C B A) (logic.and (v1_funct_1 D) (logic.and (v1_funct_2 D B A) (logic.and (m1_relset_1 D B A) (logic.and (v1_funct_1 E) (logic.and (m1_relset_1 E (k2_zfmisc_1 B B) B) (logic.and (v1_funct_1 F) (logic.and (v1_funct_2 F A B) (m1_relset_1 F A B))))))))))))) (logic.forall (G: logic.Term => (logic.forall (H: logic.Term => (logic.forall (I: logic.Term => (logic.forall (J: logic.Term => (logic.forall (K: logic.Term => (logic.forall (L: logic.Term => (logic.imply (logic.equal (g1_cat_1 A B C D E F) (g1_cat_1 G H I J K L)) (logic.and (logic.equal A G) (logic.and (logic.equal B H) (logic.and (logic.equal C I) (logic.and (logic.equal D J) (logic.and (logic.equal E K) (logic.equal F L)))))))))))))))))))))))))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (logic.not (v1_xboole_0 A)) (logic.exists (B: logic.Term => (logic.and (m1_subset_1 B (k1_zfmisc_1 A)) (logic.not (v1_xboole_0 B)))))))) (logic.imply (logic.exists (A: logic.Term => (v1_xboole_0 A))) (logic.imply (logic.forall (A: logic.Term => (logic.exists (B: logic.Term => (logic.and (m1_subset_1 B (k1_zfmisc_1 A)) (v1_xboole_0 B)))))) (logic.imply (logic.exists (A: logic.Term => (logic.not (v1_xboole_0 A)))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.equiv (m2_relset_1 C A B) (m1_relset_1 C A B)))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (r1_isocat_1 A A)))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (r1_tarski A A))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.imply (r1_isocat_1 A B) (r1_isocat_1 B A))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (r2_hidden A B) (m1_subset_1 A B)))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (m1_subset_1 A B) (logic.or (v1_xboole_0 B) (r2_hidden A B))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.equiv (m1_subset_1 A (k1_zfmisc_1 B)) (r1_tarski A B)))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (l1_cat_1 A)) (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 B) (l1_cat_1 B)) (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 C) (l1_cat_1 C)) (v8_cat_1 (k17_isocat_2 A B C) (k12_nattra_1 A (k11_cat_2 B C)) (k11_cat_2 (k12_nattra_1 A B) (k12_nattra_1 A C)))))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (logic.and (r2_hidden A B) (m1_subset_1 B (k1_zfmisc_1 C))) (m1_subset_1 A C)))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.not (logic.and (r2_hidden A B) (logic.and (m1_subset_1 B (k1_zfmisc_1 C)) (v1_xboole_0 C)))))))))) (logic.imply (logic.forall (A: logic.Term => (logic.imply (v1_xboole_0 A) (logic.equal A (k1_xboole_0))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.not (logic.and (r2_hidden A B) (v1_xboole_0 B))))))) (logic.imply (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.not (logic.and (v1_xboole_0 A) (logic.and (logic.not (logic.equal A B)) (v1_xboole_0 B)))))))) (logic.forall (A: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (l1_cat_1 A)) (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 B) (l1_cat_1 B)) (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 C) (l1_cat_1 C)) (logic.not (logic.not (r1_isocat_1 (k12_nattra_1 A (k11_cat_2 B C)) (k11_cat_2 (k12_nattra_1 A B) (k12_nattra_1 A C))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) :=
H0: (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.imply (v1_cat_1 A) (logic.equal A (g1_cat_1 (u1_cat_1 A) (u2_cat_1 A) (u3_cat_1 A) (u4_cat_1 A) (u5_cat_1 A) (u6_cat_1 A)))))))) => (H1: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (r2_hidden A B) (logic.not (r2_hidden B A)))))))) => (H2: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (m1_subset_1 C (k1_zfmisc_1 (k2_zfmisc_1 A B))) (v1_relat_1 C))))))))) => (H3: (logic.prf (logic.forall (A: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (l1_cat_1 A)) (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 B) (l1_cat_1 B)) (logic.equiv (r1_isocat_1 A B) (logic.exists (C: logic.Term => (logic.and (m2_cat_1 C A B) (v8_cat_1 C A B)))))))))))) => (H4: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.forall (D: logic.Term => (logic.forall (E: logic.Term => (logic.forall (F: logic.Term => (logic.imply (logic.and (logic.not (v1_xboole_0 A)) (logic.and (logic.not (v1_xboole_0 B)) (logic.and (v1_funct_1 C) (logic.and (v1_funct_2 C B A) (logic.and (m1_relset_1 C B A) (logic.and (v1_funct_1 D) (logic.and (v1_funct_2 D B A) (logic.and (m1_relset_1 D B A) (logic.and (v1_funct_1 E) (logic.and (m1_relset_1 E (k2_zfmisc_1 B B) B) (logic.and (v1_funct_1 F) (logic.and (v1_funct_2 F A B) (m1_relset_1 F A B))))))))))))) (logic.and (v1_cat_1 (g1_cat_1 A B C D E F)) (l1_cat_1 (g1_cat_1 A B C D E F))))))))))))))))) => (H5: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.and (v2_cat_1 (k11_cat_2 A B)) (l1_cat_1 (k11_cat_2 A B))))))))) => (H6: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.and (v1_cat_1 (k12_nattra_1 A B)) (logic.and (v2_cat_1 (k12_nattra_1 A B)) (l1_cat_1 (k12_nattra_1 A B)))))))))) => (H7: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (logic.and (l1_cat_1 B) (logic.and (v2_cat_1 C) (l1_cat_1 C)))))) (m2_cat_1 (k17_isocat_2 A B C) (k12_nattra_1 A (k11_cat_2 B C)) (k11_cat_2 (k12_nattra_1 A B) (k12_nattra_1 A C))))))))))) => (H8: (logic.prf logic.True) => (H9: (logic.prf logic.True) => (H10: (logic.prf logic.True) => (H11: (logic.prf logic.True) => (H12: (logic.prf logic.True) => (H13: (logic.prf logic.True) => (H14: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.forall (C: logic.Term => (logic.imply (m2_cat_1 C A B) (logic.and (v1_funct_1 C) (logic.and (v1_funct_2 C (u2_cat_1 A) (u2_cat_1 B)) (m2_relset_1 C (u2_cat_1 A) (u2_cat_1 B))))))))))))) => (H15: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (m2_relset_1 C A B) (m1_subset_1 C (k1_zfmisc_1 (k2_zfmisc_1 A B))))))))))) => (H16: (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.not (v1_xboole_0 (u1_cat_1 A))))))) => (H17: (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.not (v1_xboole_0 (u2_cat_1 A))))))) => (H18: (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u3_cat_1 A)) (logic.and (v1_funct_2 (u3_cat_1 A) (u2_cat_1 A) (u1_cat_1 A)) (m2_relset_1 (u3_cat_1 A) (u2_cat_1 A) (u1_cat_1 A)))))))) => (H19: (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u4_cat_1 A)) (logic.and (v1_funct_2 (u4_cat_1 A) (u2_cat_1 A) (u1_cat_1 A)) (m2_relset_1 (u4_cat_1 A) (u2_cat_1 A) (u1_cat_1 A)))))))) => (H20: (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u5_cat_1 A)) (m2_relset_1 (u5_cat_1 A) (k2_zfmisc_1 (u2_cat_1 A) (u2_cat_1 A)) (u2_cat_1 A))))))) => (H21: (logic.prf (logic.forall (A: logic.Term => (logic.imply (l1_cat_1 A) (logic.and (v1_funct_1 (u6_cat_1 A)) (logic.and (v1_funct_2 (u6_cat_1 A) (u1_cat_1 A) (u2_cat_1 A)) (m2_relset_1 (u6_cat_1 A) (u1_cat_1 A) (u2_cat_1 A)))))))) => (H22: (logic.prf (logic.exists (A: logic.Term => (l1_cat_1 A)))) => (H23: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.exists (C: logic.Term => (m1_relset_1 C A B)))))))) => (H24: (logic.prf (logic.forall (A: logic.Term => (logic.exists (B: logic.Term => (m1_subset_1 B A)))))) => (H25: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.exists (C: logic.Term => (m2_cat_1 C A B))))))))) => (H26: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.exists (C: logic.Term => (m2_relset_1 C A B)))))))) => (H27: (logic.prf (logic.forall (A: logic.Term => (logic.not (v1_xboole_0 (k1_zfmisc_1 A)))))) => (H28: (logic.prf (v1_xboole_0 (k1_xboole_0))) => (H29: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (logic.not (v1_xboole_0 A)) (logic.not (v1_xboole_0 B))) (logic.not (v1_xboole_0 (k2_zfmisc_1 A B))))))))) => (H30: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.forall (D: logic.Term => (logic.forall (E: logic.Term => (logic.forall (F: logic.Term => (logic.imply (logic.and (logic.not (v1_xboole_0 A)) (logic.and (logic.not (v1_xboole_0 B)) (logic.and (v1_funct_1 C) (logic.and (v1_funct_2 C B A) (logic.and (m1_relset_1 C B A) (logic.and (v1_funct_1 D) (logic.and (v1_funct_2 D B A) (logic.and (m1_relset_1 D B A) (logic.and (v1_funct_1 E) (logic.and (m1_relset_1 E (k2_zfmisc_1 B B) B) (logic.and (v1_funct_1 F) (logic.and (v1_funct_2 F A B) (m1_relset_1 F A B))))))))))))) (logic.forall (G: logic.Term => (logic.forall (H: logic.Term => (logic.forall (I: logic.Term => (logic.forall (J: logic.Term => (logic.forall (K: logic.Term => (logic.forall (L: logic.Term => (logic.imply (logic.equal (g1_cat_1 A B C D E F) (g1_cat_1 G H I J K L)) (logic.and (logic.equal A G) (logic.and (logic.equal B H) (logic.and (logic.equal C I) (logic.and (logic.equal D J) (logic.and (logic.equal E K) (logic.equal F L))))))))))))))))))))))))))))))))) => (H31: (logic.prf (logic.forall (A: logic.Term => (logic.imply (logic.not (v1_xboole_0 A)) (logic.exists (B: logic.Term => (logic.and (m1_subset_1 B (k1_zfmisc_1 A)) (logic.not (v1_xboole_0 B))))))))) => (H32: (logic.prf (logic.exists (A: logic.Term => (v1_xboole_0 A)))) => (H33: (logic.prf (logic.forall (A: logic.Term => (logic.exists (B: logic.Term => (logic.and (m1_subset_1 B (k1_zfmisc_1 A)) (v1_xboole_0 B))))))) => (H34: (logic.prf (logic.exists (A: logic.Term => (logic.not (v1_xboole_0 A))))) => (H35: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.equiv (m2_relset_1 C A B) (m1_relset_1 C A B))))))))) => (H36: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (r1_isocat_1 A A))))))) => (H37: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (r1_tarski A A)))))) => (H38: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (logic.and (l1_cat_1 A) (logic.and (v2_cat_1 B) (l1_cat_1 B)))) (logic.imply (r1_isocat_1 A B) (r1_isocat_1 B A)))))))) => (H39: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (r2_hidden A B) (m1_subset_1 A B))))))) => (H40: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.imply (m1_subset_1 A B) (logic.or (v1_xboole_0 B) (r2_hidden A B)))))))) => (H41: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.equiv (m1_subset_1 A (k1_zfmisc_1 B)) (r1_tarski A B))))))) => (H42: (logic.prf (logic.forall (A: logic.Term => (logic.imply (logic.and (v2_cat_1 A) (l1_cat_1 A)) (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 B) (l1_cat_1 B)) (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 C) (l1_cat_1 C)) (v8_cat_1 (k17_isocat_2 A B C) (k12_nattra_1 A (k11_cat_2 B C)) (k11_cat_2 (k12_nattra_1 A B) (k12_nattra_1 A C))))))))))))) => (H43: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.imply (logic.and (r2_hidden A B) (m1_subset_1 B (k1_zfmisc_1 C))) (m1_subset_1 A C))))))))) => (H44: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.forall (C: logic.Term => (logic.not (logic.and (r2_hidden A B) (logic.and (m1_subset_1 B (k1_zfmisc_1 C)) (v1_xboole_0 C))))))))))) => (H45: (logic.prf (logic.forall (A: logic.Term => (logic.imply (v1_xboole_0 A) (logic.equal A (k1_xboole_0)))))) => (H46: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.not (logic.and (r2_hidden A B) (v1_xboole_0 B)))))))) => (H47: (logic.prf (logic.forall (A: logic.Term => (logic.forall (B: logic.Term => (logic.not (logic.and (v1_xboole_0 A) (logic.and (logic.not (logic.equal A B)) (v1_xboole_0 B))))))))) => (v0: logic.Term => (H48: (logic.prf (logic.and (v2_cat_1 v0) (l1_cat_1 v0))) => (H48 (logic.forall (B: logic.Term => (logic.imply (logic.and (v2_cat_1 B) (l1_cat_1 B)) (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 C) (l1_cat_1 C)) (logic.not (logic.not (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 B C)) (k11_cat_2 (k12_nattra_1 v0 B) (k12_nattra_1 v0 C))))))))))) (H49: (logic.prf (v2_cat_1 v0)) => (H50: (logic.prf (l1_cat_1 v0)) => (v1: logic.Term => (H51: (logic.prf (logic.and (v2_cat_1 v1) (l1_cat_1 v1))) => (H51 (logic.forall (C: logic.Term => (logic.imply (logic.and (v2_cat_1 C) (l1_cat_1 C)) (logic.not (logic.not (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 C)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 C)))))))) (H52: (logic.prf (v2_cat_1 v1)) => (H53: (logic.prf (l1_cat_1 v1)) => (v2: logic.Term => (H54: (logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) => (H54 (logic.not (logic.not (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))))) (H55: (logic.prf (v2_cat_1 v2)) => (H56: (logic.prf (l1_cat_1 v2)) => (((((H3 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (P57: logic.Prop => (H58: ((logic.prf (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) -> ((logic.prf (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) -> (logic.prf P57))) => (H58 ((((H6 v0) (k11_cat_2 v1 v2)) (P85: logic.Prop => (H86: ((logic.prf (v2_cat_1 v0)) -> ((logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 (k11_cat_2 v1 v2)) (l1_cat_1 (k11_cat_2 v1 v2))))) -> (logic.prf P85))) => (H86 H49 (P87: logic.Prop => (H88: ((logic.prf (l1_cat_1 v0)) -> ((logic.prf (logic.and (v2_cat_1 (k11_cat_2 v1 v2)) (l1_cat_1 (k11_cat_2 v1 v2)))) -> (logic.prf P87))) => (H88 H50 (P89: logic.Prop => (H90: ((logic.prf (v2_cat_1 (k11_cat_2 v1 v2))) -> ((logic.prf (l1_cat_1 (k11_cat_2 v1 v2))) -> (logic.prf P89))) => (H90 ((((H5 v1) v2) (P99: logic.Prop => (H100: ((logic.prf (v2_cat_1 v1)) -> ((logic.prf (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> (logic.prf P99))) => (H100 H52 (P101: logic.Prop => (H102: ((logic.prf (l1_cat_1 v1)) -> ((logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> (logic.prf P101))) => (H102 H53 (P103: logic.Prop => (H104: ((logic.prf (v2_cat_1 v2)) -> ((logic.prf (l1_cat_1 v2)) -> (logic.prf P103))) => (H104 H55 H56)))))))))) (v2_cat_1 (k11_cat_2 v1 v2)) (H105: (logic.prf (v2_cat_1 (k11_cat_2 v1 v2))) => (H106: (logic.prf (l1_cat_1 (k11_cat_2 v1 v2))) => H105))) ((((H5 v1) v2) (P91: logic.Prop => (H92: ((logic.prf (v2_cat_1 v1)) -> ((logic.prf (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> (logic.prf P91))) => (H92 H52 (P93: logic.Prop => (H94: ((logic.prf (l1_cat_1 v1)) -> ((logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> (logic.prf P93))) => (H94 H53 (P95: logic.Prop => (H96: ((logic.prf (v2_cat_1 v2)) -> ((logic.prf (l1_cat_1 v2)) -> (logic.prf P95))) => (H96 H55 H56)))))))))) (l1_cat_1 (k11_cat_2 v1 v2)) (H97: (logic.prf (v2_cat_1 (k11_cat_2 v1 v2))) => (H98: (logic.prf (l1_cat_1 (k11_cat_2 v1 v2))) => H98))))))))))))) (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (H107: (logic.prf (v1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) => (H108: (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))))) => (H108 (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (H109: (logic.prf (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) => (H110: (logic.prf (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) => H109)))))) ((((H6 v0) (k11_cat_2 v1 v2)) (P59: logic.Prop => (H60: ((logic.prf (v2_cat_1 v0)) -> ((logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 (k11_cat_2 v1 v2)) (l1_cat_1 (k11_cat_2 v1 v2))))) -> (logic.prf P59))) => (H60 H49 (P61: logic.Prop => (H62: ((logic.prf (l1_cat_1 v0)) -> ((logic.prf (logic.and (v2_cat_1 (k11_cat_2 v1 v2)) (l1_cat_1 (k11_cat_2 v1 v2)))) -> (logic.prf P61))) => (H62 H50 (P63: logic.Prop => (H64: ((logic.prf (v2_cat_1 (k11_cat_2 v1 v2))) -> ((logic.prf (l1_cat_1 (k11_cat_2 v1 v2))) -> (logic.prf P63))) => (H64 ((((H5 v1) v2) (P73: logic.Prop => (H74: ((logic.prf (v2_cat_1 v1)) -> ((logic.prf (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> (logic.prf P73))) => (H74 H52 (P75: logic.Prop => (H76: ((logic.prf (l1_cat_1 v1)) -> ((logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> (logic.prf P75))) => (H76 H53 (P77: logic.Prop => (H78: ((logic.prf (v2_cat_1 v2)) -> ((logic.prf (l1_cat_1 v2)) -> (logic.prf P77))) => (H78 H55 H56)))))))))) (v2_cat_1 (k11_cat_2 v1 v2)) (H79: (logic.prf (v2_cat_1 (k11_cat_2 v1 v2))) => (H80: (logic.prf (l1_cat_1 (k11_cat_2 v1 v2))) => H79))) ((((H5 v1) v2) (P65: logic.Prop => (H66: ((logic.prf (v2_cat_1 v1)) -> ((logic.prf (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> (logic.prf P65))) => (H66 H52 (P67: logic.Prop => (H68: ((logic.prf (l1_cat_1 v1)) -> ((logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> (logic.prf P67))) => (H68 H53 (P69: logic.Prop => (H70: ((logic.prf (v2_cat_1 v2)) -> ((logic.prf (l1_cat_1 v2)) -> (logic.prf P69))) => (H70 H55 H56)))))))))) (l1_cat_1 (k11_cat_2 v1 v2)) (H71: (logic.prf (v2_cat_1 (k11_cat_2 v1 v2))) => (H72: (logic.prf (l1_cat_1 (k11_cat_2 v1 v2))) => H72))))))))))))) (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (H81: (logic.prf (v1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) => (H82: (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))))) => (H82 (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2))) (H83: (logic.prf (v2_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) => (H84: (logic.prf (l1_cat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)))) => H84)))))))))) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (P111: logic.Prop => (H112: ((logic.prf (v2_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) -> ((logic.prf (l1_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) -> (logic.prf P111))) => (H112 ((((H5 (k12_nattra_1 v0 v1)) (k12_nattra_1 v0 v2)) (P161: logic.Prop => (H162: ((logic.prf (v2_cat_1 (k12_nattra_1 v0 v1))) -> ((logic.prf (logic.and (l1_cat_1 (k12_nattra_1 v0 v1)) (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2))))) -> (logic.prf P161))) => (H162 ((((H6 v0) v1) (P197: logic.Prop => (H198: ((logic.prf (v2_cat_1 v0)) -> ((logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v1) (l1_cat_1 v1)))) -> (logic.prf P197))) => (H198 H49 (P199: logic.Prop => (H200: ((logic.prf (l1_cat_1 v0)) -> ((logic.prf (logic.and (v2_cat_1 v1) (l1_cat_1 v1))) -> (logic.prf P199))) => (H200 H50 (P201: logic.Prop => (H202: ((logic.prf (v2_cat_1 v1)) -> ((logic.prf (l1_cat_1 v1)) -> (logic.prf P201))) => (H202 H52 H53)))))))))) (v2_cat_1 (k12_nattra_1 v0 v1)) (H203: (logic.prf (v1_cat_1 (k12_nattra_1 v0 v1))) => (H204: (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v1)) (l1_cat_1 (k12_nattra_1 v0 v1)))) => (H204 (v2_cat_1 (k12_nattra_1 v0 v1)) (H205: (logic.prf (v2_cat_1 (k12_nattra_1 v0 v1))) => (H206: (logic.prf (l1_cat_1 (k12_nattra_1 v0 v1))) => H205)))))) (P163: logic.Prop => (H164: ((logic.prf (l1_cat_1 (k12_nattra_1 v0 v1))) -> ((logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2)))) -> (logic.prf P163))) => (H164 ((((H6 v0) v1) (P187: logic.Prop => (H188: ((logic.prf (v2_cat_1 v0)) -> ((logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v1) (l1_cat_1 v1)))) -> (logic.prf P187))) => (H188 H49 (P189: logic.Prop => (H190: ((logic.prf (l1_cat_1 v0)) -> ((logic.prf (logic.and (v2_cat_1 v1) (l1_cat_1 v1))) -> (logic.prf P189))) => (H190 H50 (P191: logic.Prop => (H192: ((logic.prf (v2_cat_1 v1)) -> ((logic.prf (l1_cat_1 v1)) -> (logic.prf P191))) => (H192 H52 H53)))))))))) (l1_cat_1 (k12_nattra_1 v0 v1)) (H193: (logic.prf (v1_cat_1 (k12_nattra_1 v0 v1))) => (H194: (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v1)) (l1_cat_1 (k12_nattra_1 v0 v1)))) => (H194 (l1_cat_1 (k12_nattra_1 v0 v1)) (H195: (logic.prf (v2_cat_1 (k12_nattra_1 v0 v1))) => (H196: (logic.prf (l1_cat_1 (k12_nattra_1 v0 v1))) => H196)))))) (P165: logic.Prop => (H166: ((logic.prf (v2_cat_1 (k12_nattra_1 v0 v2))) -> ((logic.prf (l1_cat_1 (k12_nattra_1 v0 v2))) -> (logic.prf P165))) => (H166 ((((H6 v0) v2) (P177: logic.Prop => (H178: ((logic.prf (v2_cat_1 v0)) -> ((logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> (logic.prf P177))) => (H178 H49 (P179: logic.Prop => (H180: ((logic.prf (l1_cat_1 v0)) -> ((logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> (logic.prf P179))) => (H180 H50 (P181: logic.Prop => (H182: ((logic.prf (v2_cat_1 v2)) -> ((logic.prf (l1_cat_1 v2)) -> (logic.prf P181))) => (H182 H55 H56)))))))))) (v2_cat_1 (k12_nattra_1 v0 v2)) (H183: (logic.prf (v1_cat_1 (k12_nattra_1 v0 v2))) => (H184: (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2)))) => (H184 (v2_cat_1 (k12_nattra_1 v0 v2)) (H185: (logic.prf (v2_cat_1 (k12_nattra_1 v0 v2))) => (H186: (logic.prf (l1_cat_1 (k12_nattra_1 v0 v2))) => H185)))))) ((((H6 v0) v2) (P167: logic.Prop => (H168: ((logic.prf (v2_cat_1 v0)) -> ((logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> (logic.prf P167))) => (H168 H49 (P169: logic.Prop => (H170: ((logic.prf (l1_cat_1 v0)) -> ((logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> (logic.prf P169))) => (H170 H50 (P171: logic.Prop => (H172: ((logic.prf (v2_cat_1 v2)) -> ((logic.prf (l1_cat_1 v2)) -> (logic.prf P171))) => (H172 H55 H56)))))))))) (l1_cat_1 (k12_nattra_1 v0 v2)) (H173: (logic.prf (v1_cat_1 (k12_nattra_1 v0 v2))) => (H174: (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2)))) => (H174 (l1_cat_1 (k12_nattra_1 v0 v2)) (H175: (logic.prf (v2_cat_1 (k12_nattra_1 v0 v2))) => (H176: (logic.prf (l1_cat_1 (k12_nattra_1 v0 v2))) => H176)))))))))))))))) (v2_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (H207: (logic.prf (v2_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) => (H208: (logic.prf (l1_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) => H207))) ((((H5 (k12_nattra_1 v0 v1)) (k12_nattra_1 v0 v2)) (P113: logic.Prop => (H114: ((logic.prf (v2_cat_1 (k12_nattra_1 v0 v1))) -> ((logic.prf (logic.and (l1_cat_1 (k12_nattra_1 v0 v1)) (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2))))) -> (logic.prf P113))) => (H114 ((((H6 v0) v1) (P149: logic.Prop => (H150: ((logic.prf (v2_cat_1 v0)) -> ((logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v1) (l1_cat_1 v1)))) -> (logic.prf P149))) => (H150 H49 (P151: logic.Prop => (H152: ((logic.prf (l1_cat_1 v0)) -> ((logic.prf (logic.and (v2_cat_1 v1) (l1_cat_1 v1))) -> (logic.prf P151))) => (H152 H50 (P153: logic.Prop => (H154: ((logic.prf (v2_cat_1 v1)) -> ((logic.prf (l1_cat_1 v1)) -> (logic.prf P153))) => (H154 H52 H53)))))))))) (v2_cat_1 (k12_nattra_1 v0 v1)) (H155: (logic.prf (v1_cat_1 (k12_nattra_1 v0 v1))) => (H156: (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v1)) (l1_cat_1 (k12_nattra_1 v0 v1)))) => (H156 (v2_cat_1 (k12_nattra_1 v0 v1)) (H157: (logic.prf (v2_cat_1 (k12_nattra_1 v0 v1))) => (H158: (logic.prf (l1_cat_1 (k12_nattra_1 v0 v1))) => H157)))))) (P115: logic.Prop => (H116: ((logic.prf (l1_cat_1 (k12_nattra_1 v0 v1))) -> ((logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2)))) -> (logic.prf P115))) => (H116 ((((H6 v0) v1) (P139: logic.Prop => (H140: ((logic.prf (v2_cat_1 v0)) -> ((logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v1) (l1_cat_1 v1)))) -> (logic.prf P139))) => (H140 H49 (P141: logic.Prop => (H142: ((logic.prf (l1_cat_1 v0)) -> ((logic.prf (logic.and (v2_cat_1 v1) (l1_cat_1 v1))) -> (logic.prf P141))) => (H142 H50 (P143: logic.Prop => (H144: ((logic.prf (v2_cat_1 v1)) -> ((logic.prf (l1_cat_1 v1)) -> (logic.prf P143))) => (H144 H52 H53)))))))))) (l1_cat_1 (k12_nattra_1 v0 v1)) (H145: (logic.prf (v1_cat_1 (k12_nattra_1 v0 v1))) => (H146: (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v1)) (l1_cat_1 (k12_nattra_1 v0 v1)))) => (H146 (l1_cat_1 (k12_nattra_1 v0 v1)) (H147: (logic.prf (v2_cat_1 (k12_nattra_1 v0 v1))) => (H148: (logic.prf (l1_cat_1 (k12_nattra_1 v0 v1))) => H148)))))) (P117: logic.Prop => (H118: ((logic.prf (v2_cat_1 (k12_nattra_1 v0 v2))) -> ((logic.prf (l1_cat_1 (k12_nattra_1 v0 v2))) -> (logic.prf P117))) => (H118 ((((H6 v0) v2) (P129: logic.Prop => (H130: ((logic.prf (v2_cat_1 v0)) -> ((logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> (logic.prf P129))) => (H130 H49 (P131: logic.Prop => (H132: ((logic.prf (l1_cat_1 v0)) -> ((logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> (logic.prf P131))) => (H132 H50 (P133: logic.Prop => (H134: ((logic.prf (v2_cat_1 v2)) -> ((logic.prf (l1_cat_1 v2)) -> (logic.prf P133))) => (H134 H55 H56)))))))))) (v2_cat_1 (k12_nattra_1 v0 v2)) (H135: (logic.prf (v1_cat_1 (k12_nattra_1 v0 v2))) => (H136: (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2)))) => (H136 (v2_cat_1 (k12_nattra_1 v0 v2)) (H137: (logic.prf (v2_cat_1 (k12_nattra_1 v0 v2))) => (H138: (logic.prf (l1_cat_1 (k12_nattra_1 v0 v2))) => H137)))))) ((((H6 v0) v2) (P119: logic.Prop => (H120: ((logic.prf (v2_cat_1 v0)) -> ((logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> (logic.prf P119))) => (H120 H49 (P121: logic.Prop => (H122: ((logic.prf (l1_cat_1 v0)) -> ((logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> (logic.prf P121))) => (H122 H50 (P123: logic.Prop => (H124: ((logic.prf (v2_cat_1 v2)) -> ((logic.prf (l1_cat_1 v2)) -> (logic.prf P123))) => (H124 H55 H56)))))))))) (l1_cat_1 (k12_nattra_1 v0 v2)) (H125: (logic.prf (v1_cat_1 (k12_nattra_1 v0 v2))) => (H126: (logic.prf (logic.and (v2_cat_1 (k12_nattra_1 v0 v2)) (l1_cat_1 (k12_nattra_1 v0 v2)))) => (H126 (l1_cat_1 (k12_nattra_1 v0 v2)) (H127: (logic.prf (v2_cat_1 (k12_nattra_1 v0 v2))) => (H128: (logic.prf (l1_cat_1 (k12_nattra_1 v0 v2))) => H128)))))))))))))))) (l1_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (H159: (logic.prf (v2_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) => (H160: (logic.prf (l1_cat_1 (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) => H160))))))) (logic.not (logic.not (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))))) (H209: (logic.prf (logic.imply (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (logic.exists (C: logic.Term => (logic.and (m2_cat_1 C (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (v8_cat_1 C (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))))))) => (H210: (logic.prf (logic.imply (logic.exists (C: logic.Term => (logic.and (m2_cat_1 C (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (v8_cat_1 C (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))))) (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))))) => (H211: (logic.prf (logic.not (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))))) => (H211 (H210 (H209 ((H211 (H210 (P218: logic.Prop => (H219: (C: logic.Term -> ((logic.prf (logic.and (m2_cat_1 C (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))) (v8_cat_1 C (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))))) -> (logic.prf P218))) => (H219 (k17_isocat_2 v0 v1 v2) (P220: logic.Prop => (H221: ((logic.prf (m2_cat_1 (k17_isocat_2 v0 v1 v2) (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) -> ((logic.prf (v8_cat_1 (k17_isocat_2 v0 v1 v2) (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2)))) -> (logic.prf P220))) => (H221 ((((H7 v0) v1) v2) (P222: logic.Prop => (H223: ((logic.prf (v2_cat_1 v0)) -> ((logic.prf (logic.and (l1_cat_1 v0) (logic.and (v2_cat_1 v1) (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))))) -> (logic.prf P222))) => (H223 H49 (P224: logic.Prop => (H225: ((logic.prf (l1_cat_1 v0)) -> ((logic.prf (logic.and (v2_cat_1 v1) (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2))))) -> (logic.prf P224))) => (H225 H50 (P226: logic.Prop => (H227: ((logic.prf (v2_cat_1 v1)) -> ((logic.prf (logic.and (l1_cat_1 v1) (logic.and (v2_cat_1 v2) (l1_cat_1 v2)))) -> (logic.prf P226))) => (H227 H52 (P228: logic.Prop => (H229: ((logic.prf (l1_cat_1 v1)) -> ((logic.prf (logic.and (v2_cat_1 v2) (l1_cat_1 v2))) -> (logic.prf P228))) => (H229 H53 (P230: logic.Prop => (H231: ((logic.prf (v2_cat_1 v2)) -> ((logic.prf (l1_cat_1 v2)) -> (logic.prf P230))) => (H231 H55 H56)))))))))))))))) ((((((H42 v0) (P212: logic.Prop => (H213: ((logic.prf (v2_cat_1 v0)) -> ((logic.prf (l1_cat_1 v0)) -> (logic.prf P212))) => (H213 H49 H50)))) v1) (P214: logic.Prop => (H215: ((logic.prf (v2_cat_1 v1)) -> ((logic.prf (l1_cat_1 v1)) -> (logic.prf P214))) => (H215 H52 H53)))) v2) (P216: logic.Prop => (H217: ((logic.prf (v2_cat_1 v2)) -> ((logic.prf (l1_cat_1 v2)) -> (logic.prf P216))) => (H217 H55 H56)))))))))))) (r1_isocat_1 (k12_nattra_1 v0 (k11_cat_2 v1 v2)) (k11_cat_2 (k12_nattra_1 v0 v1) (k12_nattra_1 v0 v2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).