#NAME COM003_433todk.
good : logic.Term.
halts3 : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
algorithm : logic.Term -> logic.Prop.
program : logic.Term -> logic.Prop.
halts2 : logic.Term -> logic.Term -> logic.Prop.
bad : logic.Term.
decides : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
outputs : logic.Term -> logic.Term -> logic.Prop.
conjecture_proof : logic.prf (logic.imply (logic.imply (logic.exists (X: logic.Term => (logic.and (algorithm X) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides X Y Z))))))))) (logic.exists (W: logic.Term => (logic.and (program W) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides W Y Z)))))))))) (logic.imply (logic.forall (W: logic.Term => (logic.imply (logic.and (program W) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides W Y Z))))))) (logic.forall (Y: logic.Term => (logic.forall (Z: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.not (logic.not (halts2 Y Z)))) (logic.and (halts3 W Y Z) (outputs W (good)))) (logic.imply (logic.and (program Y) (logic.not (halts2 Y Z))) (logic.and (halts3 W Y Z) (outputs W (bad)))))))))))) (logic.imply (logic.forall (W: logic.Term => (logic.imply (logic.and (program W) (logic.forall (Y: logic.Term => (logic.forall (Z: logic.Term => (logic.and (logic.imply (logic.and (program Y) (halts2 Y Z)) (logic.and (halts3 W Y Z) (outputs W (good)))) (logic.imply (logic.and (program Y) (logic.not (halts2 Y Z))) (logic.and (halts3 W Y Z) (outputs W (bad)))))))))) (logic.exists (V: logic.Term => (logic.and (program V) (logic.forall (Y: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 W Y Y))) (outputs W (good)))) (logic.not (halts2 V Y))) (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 W Y Y))) (outputs W (bad)))) (logic.and (halts2 V Y) (outputs V (bad))))))))))))) (logic.not (logic.exists (X: logic.Term => (logic.and (algorithm X) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides X Y Z))))))))))))) :=
(H0 : logic.prf (logic.imply (logic.exists (X: logic.Term => (logic.and (algorithm X) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides X Y Z))))))))) (logic.exists (W: logic.Term => (logic.and (program W) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides W Y Z)))))))))) => (H1 : logic.prf (logic.forall (W: logic.Term => (logic.imply (logic.and (program W) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides W Y Z))))))) (logic.forall (Y: logic.Term => (logic.forall (Z: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.not (logic.not (halts2 Y Z)))) (logic.and (halts3 W Y Z) (outputs W (good)))) (logic.imply (logic.and (program Y) (logic.not (halts2 Y Z))) (logic.and (halts3 W Y Z) (outputs W (bad)))))))))))) => (H2 : logic.prf (logic.forall (W: logic.Term => (logic.imply (logic.and (program W) (logic.forall (Y: logic.Term => (logic.forall (Z: logic.Term => (logic.and (logic.imply (logic.and (program Y) (halts2 Y Z)) (logic.and (halts3 W Y Z) (outputs W (good)))) (logic.imply (logic.and (program Y) (logic.not (halts2 Y Z))) (logic.and (halts3 W Y Z) (outputs W (bad)))))))))) (logic.exists (V: logic.Term => (logic.and (program V) (logic.forall (Y: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 W Y Y))) (outputs W (good)))) (logic.not (halts2 V Y))) (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 W Y Y))) (outputs W (bad)))) (logic.and (halts2 V Y) (outputs V (bad))))))))))))) => (H3 : logic.prf (logic.exists (X: logic.Term => (logic.and (algorithm X) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides X Y Z))))))))) => ((H0 H3) logic.False (v0:logic.Term => H4:logic.prf (logic.and (program v0) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) => (H4 logic.False (H5 : logic.prf (program v0) => H6 : logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))) => (((((H1 v0) (P9 : logic.Prop => H10 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))) -> logic.prf P9) => H10 H5 H6)) v0) logic.anyterm) logic.False (H7 : logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 logic.anyterm)))) (logic.and (halts3 v0 v0 logic.anyterm) (outputs v0 (good)))) => H8 : logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 logic.anyterm))) (logic.and (halts3 v0 v0 logic.anyterm) (outputs v0 (bad)))) => ((H7 (P13 : logic.Prop => H14 : (logic.prf (program v0) -> logic.prf (logic.not (logic.not (halts2 v0 logic.anyterm))) -> logic.prf P13) => H14 H5 (H15 : logic.prf (logic.not (halts2 v0 logic.anyterm)) => ((H8 (P18 : logic.Prop => H19 : (logic.prf (program v0) -> logic.prf (logic.not (halts2 v0 logic.anyterm)) -> logic.prf P18) => H19 H5 (H20 : logic.prf (halts2 v0 logic.anyterm) => (H15 H20)))) logic.False (H16 : logic.prf (halts3 v0 v0 logic.anyterm) => H17 : logic.prf (outputs v0 (bad)) => (((H2 v0) (P22 : logic.Prop => H23 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.forall (Z: logic.Term => (logic.and (logic.imply (logic.and (program Y) (halts2 Y Z)) (logic.and (halts3 v0 Y Z) (outputs v0 (good)))) (logic.imply (logic.and (program Y) (logic.not (halts2 Y Z))) (logic.and (halts3 v0 Y Z) (outputs v0 (bad))))))))) -> logic.prf P22) => H23 H5 (v4:logic.Term => (v5:logic.Term => (((((H1 v0) (P26 : logic.Prop => H27 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))) -> logic.prf P26) => H27 H5 H6)) v4) v5) (logic.and (logic.imply (logic.and (program v4) (halts2 v4 v5)) (logic.and (halts3 v0 v4 v5) (outputs v0 (good)))) (logic.imply (logic.and (program v4) (logic.not (halts2 v4 v5))) (logic.and (halts3 v0 v4 v5) (outputs v0 (bad))))) (H24 : logic.prf (logic.imply (logic.and (program v4) (logic.not (logic.not (halts2 v4 v5)))) (logic.and (halts3 v0 v4 v5) (outputs v0 (good)))) => H25 : logic.prf (logic.imply (logic.and (program v4) (logic.not (halts2 v4 v5))) (logic.and (halts3 v0 v4 v5) (outputs v0 (bad)))) => (P28 : logic.Prop => H29 : (logic.prf (logic.imply (logic.and (program v4) (halts2 v4 v5)) (logic.and (halts3 v0 v4 v5) (outputs v0 (good)))) -> logic.prf (logic.imply (logic.and (program v4) (logic.not (halts2 v4 v5))) (logic.and (halts3 v0 v4 v5) (outputs v0 (bad)))) -> logic.prf P28) => H29 (H30 : logic.prf (logic.and (program v4) (halts2 v4 v5)) => ((H24 (H30 (logic.and (program v4) (logic.not (logic.not (halts2 v4 v5)))) (H33 : logic.prf (program v4) => H34 : logic.prf (halts2 v4 v5) => (P35 : logic.Prop => H36 : (logic.prf (program v4) -> logic.prf (logic.not (logic.not (halts2 v4 v5))) -> logic.prf P35) => H36 H33 (H37 : logic.prf (logic.not (halts2 v4 v5)) => (H37 H34)))))) (logic.and (halts3 v0 v4 v5) (outputs v0 (good))) (H31 : logic.prf (halts3 v0 v4 v5) => H32 : logic.prf (outputs v0 (good)) => (P38 : logic.Prop => H39 : (logic.prf (halts3 v0 v4 v5) -> logic.prf (outputs v0 (good)) -> logic.prf P38) => H39 H31 H32)))) (H40 : logic.prf (logic.and (program v4) (logic.not (halts2 v4 v5))) => ((H25 (H40 (logic.and (program v4) (logic.not (halts2 v4 v5))) (H43 : logic.prf (program v4) => H44 : logic.prf (logic.not (halts2 v4 v5)) => (P45 : logic.Prop => H46 : (logic.prf (program v4) -> logic.prf (logic.not (halts2 v4 v5)) -> logic.prf P45) => H46 H43 (H47 : logic.prf (halts2 v4 v5) => (H44 H47)))))) (logic.and (halts3 v0 v4 v5) (outputs v0 (bad))) (H41 : logic.prf (halts3 v0 v4 v5) => H42 : logic.prf (outputs v0 (bad)) => (P48 : logic.Prop => H49 : (logic.prf (halts3 v0 v4 v5) -> logic.prf (outputs v0 (bad)) -> logic.prf P48) => H49 H41 H42))))))))))) logic.False (v1:logic.Term => H21:logic.prf (logic.and (program v1) (logic.forall (Y: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (good)))) (logic.not (halts2 v1 Y))) (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (bad)))) (logic.and (halts2 v1 Y) (outputs v1 (bad)))))))) => (H21 logic.False (H50 : logic.prf (program v1) => H51 : logic.prf (logic.forall (Y: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (good)))) (logic.not (halts2 v1 Y))) (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (bad)))) (logic.and (halts2 v1 Y) (outputs v1 (bad))))))) => ((H51 v0) logic.False (H52 : logic.prf (logic.imply (logic.and (program v0) (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (good)))) (logic.not (halts2 v1 v0))) => H53 : logic.prf (logic.imply (logic.and (program v0) (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (bad)))) (logic.and (halts2 v1 v0) (outputs v1 (bad)))) => ((H53 (P56 : logic.Prop => H57 : (logic.prf (program v0) -> logic.prf (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (bad))) -> logic.prf P56) => H57 H5 (P58 : logic.Prop => H59 : (logic.prf (logic.not (logic.not (halts3 v0 v0 v0))) -> logic.prf (outputs v0 (bad)) -> logic.prf P58) => H59 (((((H1 v0) (P62 : logic.Prop => H63 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))) -> logic.prf P62) => H63 H5 H6)) v0) v0) (logic.not (logic.not (halts3 v0 v0 v0))) (H60 : logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 v0)))) (logic.and (halts3 v0 v0 v0) (outputs v0 (good)))) => H61 : logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 v0))) (logic.and (halts3 v0 v0 v0) (outputs v0 (bad)))) => (H64 : logic.prf (logic.not (halts3 v0 v0 v0)) => ((H60 (P67 : logic.Prop => H68 : (logic.prf (program v0) -> logic.prf (logic.not (logic.not (halts2 v0 v0))) -> logic.prf P67) => H68 H5 (H69 : logic.prf (logic.not (halts2 v0 v0)) => ((H61 (P72 : logic.Prop => H73 : (logic.prf (program v0) -> logic.prf (logic.not (halts2 v0 v0)) -> logic.prf P72) => H73 H5 (H74 : logic.prf (halts2 v0 v0) => (H69 H74)))) logic.False (H70 : logic.prf (halts3 v0 v0 v0) => H71 : logic.prf (outputs v0 (bad)) => (H64 H70)))))) logic.False (H65 : logic.prf (halts3 v0 v0 v0) => H66 : logic.prf (outputs v0 (good)) => (H64 H65)))))) H17))) logic.False (H54 : logic.prf (halts2 v1 v0) => H55 : logic.prf (outputs v1 (bad)) => ((H52 (P75 : logic.Prop => H76 : (logic.prf (program v0) -> logic.prf (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (good))) -> logic.prf P75) => H76 H5 (P77 : logic.Prop => H78 : (logic.prf (logic.not (logic.not (halts3 v0 v0 v0))) -> logic.prf (outputs v0 (good)) -> logic.prf P77) => H78 (((((H1 v0) (P81 : logic.Prop => H82 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))) -> logic.prf P81) => H82 H5 H6)) v0) v0) (logic.not (logic.not (halts3 v0 v0 v0))) (H79 : logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 v0)))) (logic.and (halts3 v0 v0 v0) (outputs v0 (good)))) => H80 : logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 v0))) (logic.and (halts3 v0 v0 v0) (outputs v0 (bad)))) => (H83 : logic.prf (logic.not (halts3 v0 v0 v0)) => ((H79 (P86 : logic.Prop => H87 : (logic.prf (program v0) -> logic.prf (logic.not (logic.not (halts2 v0 v0))) -> logic.prf P86) => H87 H5 (H88 : logic.prf (logic.not (halts2 v0 v0)) => ((H80 (P91 : logic.Prop => H92 : (logic.prf (program v0) -> logic.prf (logic.not (halts2 v0 v0)) -> logic.prf P91) => H92 H5 (H93 : logic.prf (halts2 v0 v0) => (H88 H93)))) logic.False (H89 : logic.prf (halts3 v0 v0 v0) => H90 : logic.prf (outputs v0 (bad)) => (H83 H89)))))) logic.False (H84 : logic.prf (halts3 v0 v0 v0) => H85 : logic.prf (outputs v0 (good)) => (H83 H84)))))) ((H53 (P96 : logic.Prop => H97 : (logic.prf (program v0) -> logic.prf (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (bad))) -> logic.prf P96) => H97 H5 (P98 : logic.Prop => H99 : (logic.prf (logic.not (logic.not (halts3 v0 v0 v0))) -> logic.prf (outputs v0 (bad)) -> logic.prf P98) => H99 (((((H1 v0) (P102 : logic.Prop => H103 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))) -> logic.prf P102) => H103 H5 H6)) v0) v0) (logic.not (logic.not (halts3 v0 v0 v0))) (H100 : logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 v0)))) (logic.and (halts3 v0 v0 v0) (outputs v0 (good)))) => H101 : logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 v0))) (logic.and (halts3 v0 v0 v0) (outputs v0 (bad)))) => (H104 : logic.prf (logic.not (halts3 v0 v0 v0)) => ((H100 (P107 : logic.Prop => H108 : (logic.prf (program v0) -> logic.prf (logic.not (logic.not (halts2 v0 v0))) -> logic.prf P107) => H108 H5 (H109 : logic.prf (logic.not (halts2 v0 v0)) => ((H101 (P112 : logic.Prop => H113 : (logic.prf (program v0) -> logic.prf (logic.not (halts2 v0 v0)) -> logic.prf P112) => H113 H5 (H114 : logic.prf (halts2 v0 v0) => (H109 H114)))) logic.False (H110 : logic.prf (halts3 v0 v0 v0) => H111 : logic.prf (outputs v0 (bad)) => (H104 H110)))))) logic.False (H105 : logic.prf (halts3 v0 v0 v0) => H106 : logic.prf (outputs v0 (good)) => (H104 H105)))))) H17))) (outputs v0 (good)) (H94 : logic.prf (halts2 v1 v0) => H95 : logic.prf (outputs v1 (bad)) => (((((H1 v0) (P117 : logic.Prop => H118 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))) -> logic.prf P117) => H118 H5 H6)) v1) v0) (outputs v0 (good)) (H115 : logic.prf (logic.imply (logic.and (program v1) (logic.not (logic.not (halts2 v1 v0)))) (logic.and (halts3 v0 v1 v0) (outputs v0 (good)))) => H116 : logic.prf (logic.imply (logic.and (program v1) (logic.not (halts2 v1 v0))) (logic.and (halts3 v0 v1 v0) (outputs v0 (bad)))) => ((H115 (P121 : logic.Prop => H122 : (logic.prf (program v1) -> logic.prf (logic.not (logic.not (halts2 v1 v0))) -> logic.prf P121) => H122 H50 (H123 : logic.prf (logic.not (halts2 v1 v0)) => (H123 H94)))) (outputs v0 (good)) (H119 : logic.prf (halts3 v0 v1 v0) => H120 : logic.prf (outputs v0 (good)) => H120))))))))) H54)))))))))))))) logic.False (H11 : logic.prf (halts3 v0 v0 logic.anyterm) => H12 : logic.prf (outputs v0 (good)) => (((H2 v0) (P125 : logic.Prop => H126 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.forall (Z: logic.Term => (logic.and (logic.imply (logic.and (program Y) (halts2 Y Z)) (logic.and (halts3 v0 Y Z) (outputs v0 (good)))) (logic.imply (logic.and (program Y) (logic.not (halts2 Y Z))) (logic.and (halts3 v0 Y Z) (outputs v0 (bad))))))))) -> logic.prf P125) => H126 H5 (v2:logic.Term => (v3:logic.Term => (((((H1 v0) (P129 : logic.Prop => H130 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))) -> logic.prf P129) => H130 H5 H6)) v2) v3) (logic.and (logic.imply (logic.and (program v2) (halts2 v2 v3)) (logic.and (halts3 v0 v2 v3) (outputs v0 (good)))) (logic.imply (logic.and (program v2) (logic.not (halts2 v2 v3))) (logic.and (halts3 v0 v2 v3) (outputs v0 (bad))))) (H127 : logic.prf (logic.imply (logic.and (program v2) (logic.not (logic.not (halts2 v2 v3)))) (logic.and (halts3 v0 v2 v3) (outputs v0 (good)))) => H128 : logic.prf (logic.imply (logic.and (program v2) (logic.not (halts2 v2 v3))) (logic.and (halts3 v0 v2 v3) (outputs v0 (bad)))) => (P131 : logic.Prop => H132 : (logic.prf (logic.imply (logic.and (program v2) (halts2 v2 v3)) (logic.and (halts3 v0 v2 v3) (outputs v0 (good)))) -> logic.prf (logic.imply (logic.and (program v2) (logic.not (halts2 v2 v3))) (logic.and (halts3 v0 v2 v3) (outputs v0 (bad)))) -> logic.prf P131) => H132 (H133 : logic.prf (logic.and (program v2) (halts2 v2 v3)) => ((H127 (H133 (logic.and (program v2) (logic.not (logic.not (halts2 v2 v3)))) (H136 : logic.prf (program v2) => H137 : logic.prf (halts2 v2 v3) => (P138 : logic.Prop => H139 : (logic.prf (program v2) -> logic.prf (logic.not (logic.not (halts2 v2 v3))) -> logic.prf P138) => H139 H136 (H140 : logic.prf (logic.not (halts2 v2 v3)) => (H140 H137)))))) (logic.and (halts3 v0 v2 v3) (outputs v0 (good))) (H134 : logic.prf (halts3 v0 v2 v3) => H135 : logic.prf (outputs v0 (good)) => (P141 : logic.Prop => H142 : (logic.prf (halts3 v0 v2 v3) -> logic.prf (outputs v0 (good)) -> logic.prf P141) => H142 H134 H135)))) (H143 : logic.prf (logic.and (program v2) (logic.not (halts2 v2 v3))) => ((H128 (H143 (logic.and (program v2) (logic.not (halts2 v2 v3))) (H146 : logic.prf (program v2) => H147 : logic.prf (logic.not (halts2 v2 v3)) => (P148 : logic.Prop => H149 : (logic.prf (program v2) -> logic.prf (logic.not (halts2 v2 v3)) -> logic.prf P148) => H149 H146 (H150 : logic.prf (halts2 v2 v3) => (H147 H150)))))) (logic.and (halts3 v0 v2 v3) (outputs v0 (bad))) (H144 : logic.prf (halts3 v0 v2 v3) => H145 : logic.prf (outputs v0 (bad)) => (P151 : logic.Prop => H152 : (logic.prf (halts3 v0 v2 v3) -> logic.prf (outputs v0 (bad)) -> logic.prf P151) => H152 H144 H145))))))))))) logic.False (v1:logic.Term => H124:logic.prf (logic.and (program v1) (logic.forall (Y: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (good)))) (logic.not (halts2 v1 Y))) (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (bad)))) (logic.and (halts2 v1 Y) (outputs v1 (bad)))))))) => (H124 logic.False (H153 : logic.prf (program v1) => H154 : logic.prf (logic.forall (Y: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (good)))) (logic.not (halts2 v1 Y))) (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (bad)))) (logic.and (halts2 v1 Y) (outputs v1 (bad))))))) => ((H154 v0) logic.False (H155 : logic.prf (logic.imply (logic.and (program v0) (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (good)))) (logic.not (halts2 v1 v0))) => H156 : logic.prf (logic.imply (logic.and (program v0) (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (bad)))) (logic.and (halts2 v1 v0) (outputs v1 (bad)))) => ((H156 (P159 : logic.Prop => H160 : (logic.prf (program v0) -> logic.prf (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (bad))) -> logic.prf P159) => H160 H5 (P161 : logic.Prop => H162 : (logic.prf (logic.not (logic.not (halts3 v0 v0 v0))) -> logic.prf (outputs v0 (bad)) -> logic.prf P161) => H162 (((((H1 v0) (P165 : logic.Prop => H166 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))) -> logic.prf P165) => H166 H5 H6)) v0) v0) (logic.not (logic.not (halts3 v0 v0 v0))) (H163 : logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 v0)))) (logic.and (halts3 v0 v0 v0) (outputs v0 (good)))) => H164 : logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 v0))) (logic.and (halts3 v0 v0 v0) (outputs v0 (bad)))) => (H167 : logic.prf (logic.not (halts3 v0 v0 v0)) => ((H163 (P170 : logic.Prop => H171 : (logic.prf (program v0) -> logic.prf (logic.not (logic.not (halts2 v0 v0))) -> logic.prf P170) => H171 H5 (H172 : logic.prf (logic.not (halts2 v0 v0)) => ((H164 (P175 : logic.Prop => H176 : (logic.prf (program v0) -> logic.prf (logic.not (halts2 v0 v0)) -> logic.prf P175) => H176 H5 (H177 : logic.prf (halts2 v0 v0) => (H172 H177)))) logic.False (H173 : logic.prf (halts3 v0 v0 v0) => H174 : logic.prf (outputs v0 (bad)) => (H167 H173)))))) logic.False (H168 : logic.prf (halts3 v0 v0 v0) => H169 : logic.prf (outputs v0 (good)) => (H167 H168)))))) (((((H1 v0) (P180 : logic.Prop => H181 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))) -> logic.prf P180) => H181 H5 H6)) v1) v0) (outputs v0 (bad)) (H178 : logic.prf (logic.imply (logic.and (program v1) (logic.not (logic.not (halts2 v1 v0)))) (logic.and (halts3 v0 v1 v0) (outputs v0 (good)))) => H179 : logic.prf (logic.imply (logic.and (program v1) (logic.not (halts2 v1 v0))) (logic.and (halts3 v0 v1 v0) (outputs v0 (bad)))) => ((H179 (P184 : logic.Prop => H185 : (logic.prf (program v1) -> logic.prf (logic.not (halts2 v1 v0)) -> logic.prf P184) => H185 H153 (H186 : logic.prf (halts2 v1 v0) => ((H155 (P187 : logic.Prop => H188 : (logic.prf (program v0) -> logic.prf (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (good))) -> logic.prf P187) => H188 H5 (P189 : logic.Prop => H190 : (logic.prf (logic.not (logic.not (halts3 v0 v0 v0))) -> logic.prf (outputs v0 (good)) -> logic.prf P189) => H190 (((((H1 v0) (P193 : logic.Prop => H194 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))) -> logic.prf P193) => H194 H5 H6)) v0) v0) (logic.not (logic.not (halts3 v0 v0 v0))) (H191 : logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 v0)))) (logic.and (halts3 v0 v0 v0) (outputs v0 (good)))) => H192 : logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 v0))) (logic.and (halts3 v0 v0 v0) (outputs v0 (bad)))) => (H195 : logic.prf (logic.not (halts3 v0 v0 v0)) => ((H191 (P198 : logic.Prop => H199 : (logic.prf (program v0) -> logic.prf (logic.not (logic.not (halts2 v0 v0))) -> logic.prf P198) => H199 H5 (H200 : logic.prf (logic.not (halts2 v0 v0)) => ((H192 (P203 : logic.Prop => H204 : (logic.prf (program v0) -> logic.prf (logic.not (halts2 v0 v0)) -> logic.prf P203) => H204 H5 (H205 : logic.prf (halts2 v0 v0) => (H200 H205)))) logic.False (H201 : logic.prf (halts3 v0 v0 v0) => H202 : logic.prf (outputs v0 (bad)) => (H195 H201)))))) logic.False (H196 : logic.prf (halts3 v0 v0 v0) => H197 : logic.prf (outputs v0 (good)) => (H195 H196)))))) H12))) H186)))) (outputs v0 (bad)) (H182 : logic.prf (halts3 v0 v1 v0) => H183 : logic.prf (outputs v0 (bad)) => H183))))))) logic.False (H157 : logic.prf (halts2 v1 v0) => H158 : logic.prf (outputs v1 (bad)) => ((H155 (P206 : logic.Prop => H207 : (logic.prf (program v0) -> logic.prf (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (good))) -> logic.prf P206) => H207 H5 (P208 : logic.Prop => H209 : (logic.prf (logic.not (logic.not (halts3 v0 v0 v0))) -> logic.prf (outputs v0 (good)) -> logic.prf P208) => H209 (((((H1 v0) (P212 : logic.Prop => H213 : (logic.prf (program v0) -> logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))) -> logic.prf P212) => H213 H5 H6)) v0) v0) (logic.not (logic.not (halts3 v0 v0 v0))) (H210 : logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 v0)))) (logic.and (halts3 v0 v0 v0) (outputs v0 (good)))) => H211 : logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 v0))) (logic.and (halts3 v0 v0 v0) (outputs v0 (bad)))) => (H214 : logic.prf (logic.not (halts3 v0 v0 v0)) => ((H210 (P217 : logic.Prop => H218 : (logic.prf (program v0) -> logic.prf (logic.not (logic.not (halts2 v0 v0))) -> logic.prf P217) => H218 H5 (H219 : logic.prf (logic.not (halts2 v0 v0)) => ((H211 (P222 : logic.Prop => H223 : (logic.prf (program v0) -> logic.prf (logic.not (halts2 v0 v0)) -> logic.prf P222) => H223 H5 (H224 : logic.prf (halts2 v0 v0) => (H219 H224)))) logic.False (H220 : logic.prf (halts3 v0 v0 v0) => H221 : logic.prf (outputs v0 (bad)) => (H214 H220)))))) logic.False (H215 : logic.prf (halts3 v0 v0 v0) => H216 : logic.prf (outputs v0 (good)) => (H214 H215)))))) H12))) H157))))))))))))))))))))).