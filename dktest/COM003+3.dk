#NAME COM003_433todk.
good : logic.Term.
halts3 : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
algorithm : logic.Term -> logic.Prop.
program : logic.Term -> logic.Prop.
halts2 : logic.Term -> logic.Term -> logic.Prop.
bad : logic.Term.
decides : logic.Term -> logic.Term -> logic.Term -> logic.Prop.
outputs : logic.Term -> logic.Term -> logic.Prop.
conjecture_proof : (logic.prf (logic.imply (logic.imply (logic.exists (X: logic.Term => (logic.and (algorithm X) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides X Y Z))))))))) (logic.exists (W: logic.Term => (logic.and (program W) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides W Y Z)))))))))) (logic.imply (logic.forall (W: logic.Term => (logic.imply (logic.and (program W) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides W Y Z))))))) (logic.forall (Y: logic.Term => (logic.forall (Z: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.not (logic.not (halts2 Y Z)))) (logic.and (halts3 W Y Z) (outputs W (good)))) (logic.imply (logic.and (program Y) (logic.not (halts2 Y Z))) (logic.and (halts3 W Y Z) (outputs W (bad)))))))))))) (logic.imply (logic.forall (W: logic.Term => (logic.imply (logic.and (program W) (logic.forall (Y: logic.Term => (logic.forall (Z: logic.Term => (logic.and (logic.imply (logic.and (program Y) (halts2 Y Z)) (logic.and (halts3 W Y Z) (outputs W (good)))) (logic.imply (logic.and (program Y) (logic.not (halts2 Y Z))) (logic.and (halts3 W Y Z) (outputs W (bad)))))))))) (logic.exists (V: logic.Term => (logic.and (program V) (logic.forall (Y: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 W Y Y))) (outputs W (good)))) (logic.not (halts2 V Y))) (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 W Y Y))) (outputs W (bad)))) (logic.and (halts2 V Y) (outputs V (bad))))))))))))) (logic.not (logic.exists (X: logic.Term => (logic.and (algorithm X) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides X Y Z)))))))))))))) :=
H0: (logic.prf (logic.imply (logic.exists (X: logic.Term => (logic.and (algorithm X) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides X Y Z))))))))) (logic.exists (W: logic.Term => (logic.and (program W) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides W Y Z))))))))))) => (H1: (logic.prf (logic.forall (W: logic.Term => (logic.imply (logic.and (program W) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides W Y Z))))))) (logic.forall (Y: logic.Term => (logic.forall (Z: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.not (logic.not (halts2 Y Z)))) (logic.and (halts3 W Y Z) (outputs W (good)))) (logic.imply (logic.and (program Y) (logic.not (halts2 Y Z))) (logic.and (halts3 W Y Z) (outputs W (bad))))))))))))) => (H2: (logic.prf (logic.forall (W: logic.Term => (logic.imply (logic.and (program W) (logic.forall (Y: logic.Term => (logic.forall (Z: logic.Term => (logic.and (logic.imply (logic.and (program Y) (halts2 Y Z)) (logic.and (halts3 W Y Z) (outputs W (good)))) (logic.imply (logic.and (program Y) (logic.not (halts2 Y Z))) (logic.and (halts3 W Y Z) (outputs W (bad)))))))))) (logic.exists (V: logic.Term => (logic.and (program V) (logic.forall (Y: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 W Y Y))) (outputs W (good)))) (logic.not (halts2 V Y))) (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 W Y Y))) (outputs W (bad)))) (logic.and (halts2 V Y) (outputs V (bad)))))))))))))) => (H3: (logic.prf (logic.exists (X: logic.Term => (logic.and (algorithm X) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides X Y Z)))))))))) => ((H0 H3) logic.False (v0: logic.Term => (H4: (logic.prf (logic.and (program v0) (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z)))))))) => (H4 logic.False (H5: (logic.prf (program v0)) => (H6: (logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) => (((((H1 v0) (P7: logic.Prop => (H8: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) -> (logic.prf P7))) => (H8 H5 H6)))) v0) logic.anyterm) logic.False (H9: (logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 logic.anyterm)))) (logic.and (halts3 v0 v0 logic.anyterm) (outputs v0 (good))))) => (H10: (logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 logic.anyterm))) (logic.and (halts3 v0 v0 logic.anyterm) (outputs v0 (bad))))) => ((H9 (P11: logic.Prop => (H12: ((logic.prf (program v0)) -> ((logic.prf (logic.not (logic.not (halts2 v0 logic.anyterm)))) -> (logic.prf P11))) => (H12 H5 (H13: (logic.prf (logic.not (halts2 v0 logic.anyterm))) => ((H10 (P14: logic.Prop => (H15: ((logic.prf (program v0)) -> ((logic.prf (logic.not (halts2 v0 logic.anyterm))) -> (logic.prf P14))) => (H15 H5 (H16: (logic.prf (halts2 v0 logic.anyterm)) => (H13 H16)))))) logic.False (H17: (logic.prf (halts3 v0 v0 logic.anyterm)) => (H18: (logic.prf (outputs v0 (bad))) => (((H2 v0) (P19: logic.Prop => (H20: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.forall (Z: logic.Term => (logic.and (logic.imply (logic.and (program Y) (halts2 Y Z)) (logic.and (halts3 v0 Y Z) (outputs v0 (good)))) (logic.imply (logic.and (program Y) (logic.not (halts2 Y Z))) (logic.and (halts3 v0 Y Z) (outputs v0 (bad)))))))))) -> (logic.prf P19))) => (H20 H5 (v4: logic.Term => (v5: logic.Term => (((((H1 v0) (P7: logic.Prop => (H8: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) -> (logic.prf P7))) => (H8 H5 H6)))) v4) v5) (logic.and (logic.imply (logic.and (program v4) (halts2 v4 v5)) (logic.and (halts3 v0 v4 v5) (outputs v0 (good)))) (logic.imply (logic.and (program v4) (logic.not (halts2 v4 v5))) (logic.and (halts3 v0 v4 v5) (outputs v0 (bad))))) (H21: (logic.prf (logic.imply (logic.and (program v4) (logic.not (logic.not (halts2 v4 v5)))) (logic.and (halts3 v0 v4 v5) (outputs v0 (good))))) => (H22: (logic.prf (logic.imply (logic.and (program v4) (logic.not (halts2 v4 v5))) (logic.and (halts3 v0 v4 v5) (outputs v0 (bad))))) => (P23: logic.Prop => (H24: ((logic.prf (logic.imply (logic.and (program v4) (halts2 v4 v5)) (logic.and (halts3 v0 v4 v5) (outputs v0 (good))))) -> ((logic.prf (logic.imply (logic.and (program v4) (logic.not (halts2 v4 v5))) (logic.and (halts3 v0 v4 v5) (outputs v0 (bad))))) -> (logic.prf P23))) => (H24 (H35: (logic.prf (logic.and (program v4) (halts2 v4 v5))) => ((H21 (H35 (logic.and (program v4) (logic.not (logic.not (halts2 v4 v5)))) (H36: (logic.prf (program v4)) => (H37: (logic.prf (halts2 v4 v5)) => (P38: logic.Prop => (H39: ((logic.prf (program v4)) -> ((logic.prf (logic.not (logic.not (halts2 v4 v5)))) -> (logic.prf P38))) => (H39 H36 (H40: (logic.prf (logic.not (halts2 v4 v5))) => (H40 H37))))))))) (logic.and (halts3 v0 v4 v5) (outputs v0 (good))) (H41: (logic.prf (halts3 v0 v4 v5)) => (H42: (logic.prf (outputs v0 (good))) => (P43: logic.Prop => (H44: ((logic.prf (halts3 v0 v4 v5)) -> ((logic.prf (outputs v0 (good))) -> (logic.prf P43))) => (H44 H41 H42))))))) (H25: (logic.prf (logic.and (program v4) (logic.not (halts2 v4 v5)))) => ((H22 (H25 (logic.and (program v4) (logic.not (halts2 v4 v5))) (H26: (logic.prf (program v4)) => (H27: (logic.prf (logic.not (halts2 v4 v5))) => (P28: logic.Prop => (H29: ((logic.prf (program v4)) -> ((logic.prf (logic.not (halts2 v4 v5))) -> (logic.prf P28))) => (H29 H26 (H30: (logic.prf (halts2 v4 v5)) => (H27 H30))))))))) (logic.and (halts3 v0 v4 v5) (outputs v0 (bad))) (H31: (logic.prf (halts3 v0 v4 v5)) => (H32: (logic.prf (outputs v0 (bad))) => (P33: logic.Prop => (H34: ((logic.prf (halts3 v0 v4 v5)) -> ((logic.prf (outputs v0 (bad))) -> (logic.prf P33))) => (H34 H31 H32))))))))))))))))))) logic.False (v1: logic.Term => (H45: (logic.prf (logic.and (program v1) (logic.forall (Y: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (good)))) (logic.not (halts2 v1 Y))) (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (bad)))) (logic.and (halts2 v1 Y) (outputs v1 (bad))))))))) => (H45 logic.False (H46: (logic.prf (program v1)) => (H47: (logic.prf (logic.forall (Y: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (good)))) (logic.not (halts2 v1 Y))) (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (bad)))) (logic.and (halts2 v1 Y) (outputs v1 (bad)))))))) => ((H47 v0) logic.False (H48: (logic.prf (logic.imply (logic.and (program v0) (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (good)))) (logic.not (halts2 v1 v0)))) => (H49: (logic.prf (logic.imply (logic.and (program v0) (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (bad)))) (logic.and (halts2 v1 v0) (outputs v1 (bad))))) => ((H49 (P93: logic.Prop => (H94: ((logic.prf (program v0)) -> ((logic.prf (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (bad)))) -> (logic.prf P93))) => (H94 H5 (P95: logic.Prop => (H96: ((logic.prf (logic.not (logic.not (halts3 v0 v0 v0)))) -> ((logic.prf (outputs v0 (bad))) -> (logic.prf P95))) => (H96 (((((H1 v0) (P7: logic.Prop => (H8: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) -> (logic.prf P7))) => (H8 H5 H6)))) v0) v0) (logic.not (logic.not (halts3 v0 v0 v0))) (H97: (logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 v0)))) (logic.and (halts3 v0 v0 v0) (outputs v0 (good))))) => (H98: (logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 v0))) (logic.and (halts3 v0 v0 v0) (outputs v0 (bad))))) => (H99: (logic.prf (logic.not (halts3 v0 v0 v0))) => ((H97 (P100: logic.Prop => (H101: ((logic.prf (program v0)) -> ((logic.prf (logic.not (logic.not (halts2 v0 v0)))) -> (logic.prf P100))) => (H101 H5 (H102: (logic.prf (logic.not (halts2 v0 v0))) => ((H98 (P103: logic.Prop => (H104: ((logic.prf (program v0)) -> ((logic.prf (logic.not (halts2 v0 v0))) -> (logic.prf P103))) => (H104 H5 (H105: (logic.prf (halts2 v0 v0)) => (H102 H105)))))) logic.False (H106: (logic.prf (halts3 v0 v0 v0)) => (H107: (logic.prf (outputs v0 (bad))) => (H99 H106))))))))) logic.False (H108: (logic.prf (halts3 v0 v0 v0)) => (H109: (logic.prf (outputs v0 (good))) => (H99 H108)))))))) H18))))))) logic.False (H110: (logic.prf (halts2 v1 v0)) => (H111: (logic.prf (outputs v1 (bad))) => ((H48 (P50: logic.Prop => (H51: ((logic.prf (program v0)) -> ((logic.prf (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (good)))) -> (logic.prf P50))) => (H51 H5 (P52: logic.Prop => (H53: ((logic.prf (logic.not (logic.not (halts3 v0 v0 v0)))) -> ((logic.prf (outputs v0 (good))) -> (logic.prf P52))) => (H53 (((((H1 v0) (P7: logic.Prop => (H8: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) -> (logic.prf P7))) => (H8 H5 H6)))) v0) v0) (logic.not (logic.not (halts3 v0 v0 v0))) (H80: (logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 v0)))) (logic.and (halts3 v0 v0 v0) (outputs v0 (good))))) => (H81: (logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 v0))) (logic.and (halts3 v0 v0 v0) (outputs v0 (bad))))) => (H82: (logic.prf (logic.not (halts3 v0 v0 v0))) => ((H80 (P83: logic.Prop => (H84: ((logic.prf (program v0)) -> ((logic.prf (logic.not (logic.not (halts2 v0 v0)))) -> (logic.prf P83))) => (H84 H5 (H85: (logic.prf (logic.not (halts2 v0 v0))) => ((H81 (P86: logic.Prop => (H87: ((logic.prf (program v0)) -> ((logic.prf (logic.not (halts2 v0 v0))) -> (logic.prf P86))) => (H87 H5 (H88: (logic.prf (halts2 v0 v0)) => (H85 H88)))))) logic.False (H89: (logic.prf (halts3 v0 v0 v0)) => (H90: (logic.prf (outputs v0 (bad))) => (H82 H89))))))))) logic.False (H91: (logic.prf (halts3 v0 v0 v0)) => (H92: (logic.prf (outputs v0 (good))) => (H82 H91)))))))) ((H49 (P54: logic.Prop => (H55: ((logic.prf (program v0)) -> ((logic.prf (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (bad)))) -> (logic.prf P54))) => (H55 H5 (P56: logic.Prop => (H57: ((logic.prf (logic.not (logic.not (halts3 v0 v0 v0)))) -> ((logic.prf (outputs v0 (bad))) -> (logic.prf P56))) => (H57 (((((H1 v0) (P7: logic.Prop => (H8: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) -> (logic.prf P7))) => (H8 H5 H6)))) v0) v0) (logic.not (logic.not (halts3 v0 v0 v0))) (H58: (logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 v0)))) (logic.and (halts3 v0 v0 v0) (outputs v0 (good))))) => (H59: (logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 v0))) (logic.and (halts3 v0 v0 v0) (outputs v0 (bad))))) => (H60: (logic.prf (logic.not (halts3 v0 v0 v0))) => ((H58 (P61: logic.Prop => (H62: ((logic.prf (program v0)) -> ((logic.prf (logic.not (logic.not (halts2 v0 v0)))) -> (logic.prf P61))) => (H62 H5 (H63: (logic.prf (logic.not (halts2 v0 v0))) => ((H59 (P64: logic.Prop => (H65: ((logic.prf (program v0)) -> ((logic.prf (logic.not (halts2 v0 v0))) -> (logic.prf P64))) => (H65 H5 (H66: (logic.prf (halts2 v0 v0)) => (H63 H66)))))) logic.False (H67: (logic.prf (halts3 v0 v0 v0)) => (H68: (logic.prf (outputs v0 (bad))) => (H60 H67))))))))) logic.False (H69: (logic.prf (halts3 v0 v0 v0)) => (H70: (logic.prf (outputs v0 (good))) => (H60 H69)))))))) H18))))))) (outputs v0 (good)) (H71: (logic.prf (halts2 v1 v0)) => (H72: (logic.prf (outputs v1 (bad))) => (((((H1 v0) (P7: logic.Prop => (H8: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) -> (logic.prf P7))) => (H8 H5 H6)))) v1) v0) (outputs v0 (good)) (H73: (logic.prf (logic.imply (logic.and (program v1) (logic.not (logic.not (halts2 v1 v0)))) (logic.and (halts3 v0 v1 v0) (outputs v0 (good))))) => (H74: (logic.prf (logic.imply (logic.and (program v1) (logic.not (halts2 v1 v0))) (logic.and (halts3 v0 v1 v0) (outputs v0 (bad))))) => ((H73 (P75: logic.Prop => (H76: ((logic.prf (program v1)) -> ((logic.prf (logic.not (logic.not (halts2 v1 v0)))) -> (logic.prf P75))) => (H76 H46 (H77: (logic.prf (logic.not (halts2 v1 v0))) => (H77 H71)))))) (outputs v0 (good)) (H78: (logic.prf (halts3 v0 v1 v0)) => (H79: (logic.prf (outputs v0 (good))) => H79)))))))))))))))) H110))))))))))))))))))))) logic.False (H112: (logic.prf (halts3 v0 v0 logic.anyterm)) => (H113: (logic.prf (outputs v0 (good))) => (((H2 v0) (P114: logic.Prop => (H115: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.forall (Z: logic.Term => (logic.and (logic.imply (logic.and (program Y) (halts2 Y Z)) (logic.and (halts3 v0 Y Z) (outputs v0 (good)))) (logic.imply (logic.and (program Y) (logic.not (halts2 Y Z))) (logic.and (halts3 v0 Y Z) (outputs v0 (bad)))))))))) -> (logic.prf P114))) => (H115 H5 (v2: logic.Term => (v3: logic.Term => (((((H1 v0) (P7: logic.Prop => (H8: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) -> (logic.prf P7))) => (H8 H5 H6)))) v2) v3) (logic.and (logic.imply (logic.and (program v2) (halts2 v2 v3)) (logic.and (halts3 v0 v2 v3) (outputs v0 (good)))) (logic.imply (logic.and (program v2) (logic.not (halts2 v2 v3))) (logic.and (halts3 v0 v2 v3) (outputs v0 (bad))))) (H116: (logic.prf (logic.imply (logic.and (program v2) (logic.not (logic.not (halts2 v2 v3)))) (logic.and (halts3 v0 v2 v3) (outputs v0 (good))))) => (H117: (logic.prf (logic.imply (logic.and (program v2) (logic.not (halts2 v2 v3))) (logic.and (halts3 v0 v2 v3) (outputs v0 (bad))))) => (P118: logic.Prop => (H119: ((logic.prf (logic.imply (logic.and (program v2) (halts2 v2 v3)) (logic.and (halts3 v0 v2 v3) (outputs v0 (good))))) -> ((logic.prf (logic.imply (logic.and (program v2) (logic.not (halts2 v2 v3))) (logic.and (halts3 v0 v2 v3) (outputs v0 (bad))))) -> (logic.prf P118))) => (H119 (H130: (logic.prf (logic.and (program v2) (halts2 v2 v3))) => ((H116 (H130 (logic.and (program v2) (logic.not (logic.not (halts2 v2 v3)))) (H131: (logic.prf (program v2)) => (H132: (logic.prf (halts2 v2 v3)) => (P133: logic.Prop => (H134: ((logic.prf (program v2)) -> ((logic.prf (logic.not (logic.not (halts2 v2 v3)))) -> (logic.prf P133))) => (H134 H131 (H135: (logic.prf (logic.not (halts2 v2 v3))) => (H135 H132))))))))) (logic.and (halts3 v0 v2 v3) (outputs v0 (good))) (H136: (logic.prf (halts3 v0 v2 v3)) => (H137: (logic.prf (outputs v0 (good))) => (P138: logic.Prop => (H139: ((logic.prf (halts3 v0 v2 v3)) -> ((logic.prf (outputs v0 (good))) -> (logic.prf P138))) => (H139 H136 H137))))))) (H120: (logic.prf (logic.and (program v2) (logic.not (halts2 v2 v3)))) => ((H117 (H120 (logic.and (program v2) (logic.not (halts2 v2 v3))) (H121: (logic.prf (program v2)) => (H122: (logic.prf (logic.not (halts2 v2 v3))) => (P123: logic.Prop => (H124: ((logic.prf (program v2)) -> ((logic.prf (logic.not (halts2 v2 v3))) -> (logic.prf P123))) => (H124 H121 (H125: (logic.prf (halts2 v2 v3)) => (H122 H125))))))))) (logic.and (halts3 v0 v2 v3) (outputs v0 (bad))) (H126: (logic.prf (halts3 v0 v2 v3)) => (H127: (logic.prf (outputs v0 (bad))) => (P128: logic.Prop => (H129: ((logic.prf (halts3 v0 v2 v3)) -> ((logic.prf (outputs v0 (bad))) -> (logic.prf P128))) => (H129 H126 H127))))))))))))))))))) logic.False (v1: logic.Term => (H140: (logic.prf (logic.and (program v1) (logic.forall (Y: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (good)))) (logic.not (halts2 v1 Y))) (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (bad)))) (logic.and (halts2 v1 Y) (outputs v1 (bad))))))))) => (H140 logic.False (H141: (logic.prf (program v1)) => (H142: (logic.prf (logic.forall (Y: logic.Term => (logic.and (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (good)))) (logic.not (halts2 v1 Y))) (logic.imply (logic.and (program Y) (logic.and (logic.not (logic.not (halts3 v0 Y Y))) (outputs v0 (bad)))) (logic.and (halts2 v1 Y) (outputs v1 (bad)))))))) => ((H142 v0) logic.False (H143: (logic.prf (logic.imply (logic.and (program v0) (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (good)))) (logic.not (halts2 v1 v0)))) => (H144: (logic.prf (logic.imply (logic.and (program v0) (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (bad)))) (logic.and (halts2 v1 v0) (outputs v1 (bad))))) => ((H144 (P162: logic.Prop => (H163: ((logic.prf (program v0)) -> ((logic.prf (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (bad)))) -> (logic.prf P162))) => (H163 H5 (P164: logic.Prop => (H165: ((logic.prf (logic.not (logic.not (halts3 v0 v0 v0)))) -> ((logic.prf (outputs v0 (bad))) -> (logic.prf P164))) => (H165 (((((H1 v0) (P7: logic.Prop => (H8: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) -> (logic.prf P7))) => (H8 H5 H6)))) v0) v0) (logic.not (logic.not (halts3 v0 v0 v0))) (H173: (logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 v0)))) (logic.and (halts3 v0 v0 v0) (outputs v0 (good))))) => (H174: (logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 v0))) (logic.and (halts3 v0 v0 v0) (outputs v0 (bad))))) => (H175: (logic.prf (logic.not (halts3 v0 v0 v0))) => ((H173 (P176: logic.Prop => (H177: ((logic.prf (program v0)) -> ((logic.prf (logic.not (logic.not (halts2 v0 v0)))) -> (logic.prf P176))) => (H177 H5 (H178: (logic.prf (logic.not (halts2 v0 v0))) => ((H174 (P179: logic.Prop => (H180: ((logic.prf (program v0)) -> ((logic.prf (logic.not (halts2 v0 v0))) -> (logic.prf P179))) => (H180 H5 (H181: (logic.prf (halts2 v0 v0)) => (H178 H181)))))) logic.False (H182: (logic.prf (halts3 v0 v0 v0)) => (H183: (logic.prf (outputs v0 (bad))) => (H175 H182))))))))) logic.False (H184: (logic.prf (halts3 v0 v0 v0)) => (H185: (logic.prf (outputs v0 (good))) => (H175 H184)))))))) (((((H1 v0) (P7: logic.Prop => (H8: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) -> (logic.prf P7))) => (H8 H5 H6)))) v1) v0) (outputs v0 (bad)) (H166: (logic.prf (logic.imply (logic.and (program v1) (logic.not (logic.not (halts2 v1 v0)))) (logic.and (halts3 v0 v1 v0) (outputs v0 (good))))) => (H167: (logic.prf (logic.imply (logic.and (program v1) (logic.not (halts2 v1 v0))) (logic.and (halts3 v0 v1 v0) (outputs v0 (bad))))) => ((H167 (P168: logic.Prop => (H169: ((logic.prf (program v1)) -> ((logic.prf (logic.not (halts2 v1 v0))) -> (logic.prf P168))) => (H169 H141 (H170: (logic.prf (halts2 v1 v0)) => ((H143 (P145: logic.Prop => (H146: ((logic.prf (program v0)) -> ((logic.prf (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (good)))) -> (logic.prf P145))) => (H146 H5 (P147: logic.Prop => (H148: ((logic.prf (logic.not (logic.not (halts3 v0 v0 v0)))) -> ((logic.prf (outputs v0 (good))) -> (logic.prf P147))) => (H148 (((((H1 v0) (P7: logic.Prop => (H8: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) -> (logic.prf P7))) => (H8 H5 H6)))) v0) v0) (logic.not (logic.not (halts3 v0 v0 v0))) (H149: (logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 v0)))) (logic.and (halts3 v0 v0 v0) (outputs v0 (good))))) => (H150: (logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 v0))) (logic.and (halts3 v0 v0 v0) (outputs v0 (bad))))) => (H151: (logic.prf (logic.not (halts3 v0 v0 v0))) => ((H149 (P152: logic.Prop => (H153: ((logic.prf (program v0)) -> ((logic.prf (logic.not (logic.not (halts2 v0 v0)))) -> (logic.prf P152))) => (H153 H5 (H154: (logic.prf (logic.not (halts2 v0 v0))) => ((H150 (P155: logic.Prop => (H156: ((logic.prf (program v0)) -> ((logic.prf (logic.not (halts2 v0 v0))) -> (logic.prf P155))) => (H156 H5 (H157: (logic.prf (halts2 v0 v0)) => (H154 H157)))))) logic.False (H158: (logic.prf (halts3 v0 v0 v0)) => (H159: (logic.prf (outputs v0 (bad))) => (H151 H158))))))))) logic.False (H160: (logic.prf (halts3 v0 v0 v0)) => (H161: (logic.prf (outputs v0 (good))) => (H151 H160)))))))) H113))))))) H170)))))) (outputs v0 (bad)) (H171: (logic.prf (halts3 v0 v1 v0)) => (H172: (logic.prf (outputs v0 (bad))) => H172))))))))))))) logic.False (H186: (logic.prf (halts2 v1 v0)) => (H187: (logic.prf (outputs v1 (bad))) => ((H143 (P145: logic.Prop => (H146: ((logic.prf (program v0)) -> ((logic.prf (logic.and (logic.not (logic.not (halts3 v0 v0 v0))) (outputs v0 (good)))) -> (logic.prf P145))) => (H146 H5 (P147: logic.Prop => (H148: ((logic.prf (logic.not (logic.not (halts3 v0 v0 v0)))) -> ((logic.prf (outputs v0 (good))) -> (logic.prf P147))) => (H148 (((((H1 v0) (P7: logic.Prop => (H8: ((logic.prf (program v0)) -> ((logic.prf (logic.forall (Y: logic.Term => (logic.imply (program Y) (logic.forall (Z: logic.Term => (decides v0 Y Z))))))) -> (logic.prf P7))) => (H8 H5 H6)))) v0) v0) (logic.not (logic.not (halts3 v0 v0 v0))) (H149: (logic.prf (logic.imply (logic.and (program v0) (logic.not (logic.not (halts2 v0 v0)))) (logic.and (halts3 v0 v0 v0) (outputs v0 (good))))) => (H150: (logic.prf (logic.imply (logic.and (program v0) (logic.not (halts2 v0 v0))) (logic.and (halts3 v0 v0 v0) (outputs v0 (bad))))) => (H151: (logic.prf (logic.not (halts3 v0 v0 v0))) => ((H149 (P152: logic.Prop => (H153: ((logic.prf (program v0)) -> ((logic.prf (logic.not (logic.not (halts2 v0 v0)))) -> (logic.prf P152))) => (H153 H5 (H154: (logic.prf (logic.not (halts2 v0 v0))) => ((H150 (P155: logic.Prop => (H156: ((logic.prf (program v0)) -> ((logic.prf (logic.not (halts2 v0 v0))) -> (logic.prf P155))) => (H156 H5 (H157: (logic.prf (halts2 v0 v0)) => (H154 H157)))))) logic.False (H158: (logic.prf (halts3 v0 v0 v0)) => (H159: (logic.prf (outputs v0 (bad))) => (H151 H158))))))))) logic.False (H160: (logic.prf (halts3 v0 v0 v0)) => (H161: (logic.prf (outputs v0 (good))) => (H151 H160)))))))) H113))))))) H186)))))))))))))))))))))))))))).