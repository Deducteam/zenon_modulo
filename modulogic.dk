#NAME zen.

(; Logic for Zenon Modulo ;)

def prop  : Type.
def type  : Type.
def proof : prop -> Type.
def term  : type -> Type.
def arrow : type -> type -> type.
iota  : type.

(; Symbols ;)

def True  : prop.
def False : prop.

def not : prop -> prop.
def and : prop -> prop -> prop.
def or  : prop -> prop -> prop.
def imp : prop -> prop -> prop.
def eqv : prop -> prop -> prop.

def forall : a : type -> (term a -> prop) -> prop.
def exists : a : type -> (term a -> prop) -> prop.

def foralltype : (type -> prop) -> prop.
def existstype : (type -> prop) -> prop.

def equal      : a : type -> term a -> term a -> prop.

(; Definition of Proofs of Symbols ;)

(; The Sequent Type ;)

def seq : Type.

(; LLproof Deduction Rules ;)

(; Rfalse ;)

def Rfalse : proof False -> seq.

(; Rnottrue ;)

def Rnottrue : proof (not True) -> seq.

(; Raxiom ;)

def Raxiom : p : prop -> proof p -> proof (not p) -> seq.

(; Rnoteq ;)

def Rnoteq : a : type -> t : term a -> proof (not (equal a t t)) -> seq.

(; Reqsym ;)

def Reqsym : a : type ->
             t : term a ->
             u : term a ->
             proof (equal a t u) ->
             proof (not (equal a u t)) ->
             seq.

(; Rcut ;)

def Rcut : p : prop ->
           (proof p -> seq) ->
           (proof (not p) -> seq) ->
           seq.

(; Rnotnot ;)

def Rnotnot : p : prop ->
              (proof p -> seq) ->
              proof (not (not p)) ->
              seq.

(; Rand ;)

def Rand : p : prop ->
           q : prop ->
           (proof p -> proof q -> seq) ->
           proof (and p q) ->
           seq.

(; Ror ;)

def Ror : p : prop ->
          q : prop ->
          (proof p -> seq) ->
          (proof q -> seq) ->
          proof (or p q) ->
          seq.

(; Rimply ;)

def Rimply : p : prop ->
             q : prop ->
             (proof (not p) -> seq) ->
             (proof q -> seq) ->
             proof (imp p q) ->
             seq.

(; Requiv ;)

def Requiv : p : prop ->
             q : prop ->
             (proof (not p) -> proof (not q) -> seq) ->
             (proof p -> proof q -> seq) ->
             proof (eqv p q) ->
             seq.

(; Rnotand ;)

def Rnotand : p : prop ->
              q : prop ->
              (proof (not p) -> seq) ->
              (proof (not q) -> seq) ->
              proof (not (and p q)) ->
              seq.

(; Rnotor ;)

def Rnotor : p : prop ->
             q : prop ->
             (proof (not p) -> proof (not q) -> seq) ->
             proof (not (or p q)) ->
             seq.

(; Rnotimply;)

def Rnotimply : p : prop ->
                q : prop ->
                (proof p -> proof (not q) -> seq) ->
                proof (not (imp p q)) ->
                seq.

(; Rnotequiv ;)

def Rnotequiv : p : prop ->
                q : prop ->
                (proof (not p) -> proof q -> seq) ->
                (proof p -> proof (not q) -> seq) ->
                proof (not (eqv p q)) ->
                seq.

(; Rex ;)

def Rex : a : type ->
          p : (term a -> prop) ->
          (t : term a -> proof (p t) -> seq) ->
          proof (exists a p) ->
          seq.

(; Rall ;)

def Rall : a : type ->
           p : (term a -> prop) ->
           t : term a ->
           (proof (p t) -> seq) ->
           proof (forall a p) ->
           seq.

(; Rnotex ;)

def Rnotex : a : type ->
             p : (term a -> prop) ->
             t : term a ->
             (proof (not (p t)) -> seq) ->
             proof (not (exists a p)) ->
             seq.

(; Rnotall ;)

def Rnotall : a : type ->
              p : (term a -> prop) ->
              (t : term a -> proof (not (p t)) -> seq) ->
              proof (not (forall a p)) ->
              seq.

(; Rextype ;)

def Rextype : p : (type -> prop) ->
              (a : type -> proof (p a) -> seq) ->
              proof (existstype p) ->
              seq.

(; Ralltype ;)

def Ralltype : p : (type -> prop) ->
               a : type ->
               (proof (p a) -> seq) ->
               proof (foralltype p) ->
               seq.

(; Rnotextype ;)

def Rnotextype : p : (type -> prop) ->
                 a : type ->
                 (proof (not (p a)) -> seq) ->
                 proof (not (existstype p)) ->
                 seq.

(; Rnotalltype ;)

def Rnotalltype :  p : (type -> prop) ->
                   (a : type -> proof (not (p a)) -> seq) ->
                   proof (not (foralltype p)) ->
                   seq.

(; Rsubst ;)

def Rsubst : a : type ->
             p : (term a -> prop) ->
             t1 : term a ->
             t2 : term a ->
             (proof (not (equal a t1 t2)) -> seq) ->
             (proof (p t2) -> seq) ->
             proof (p t1) ->
             seq.

def Rconglr : a : type ->
              p : (term a -> prop) ->
              t1 : term a ->
              t2 : term a ->
              (proof (p t2) -> seq) ->
              proof (p t1) ->
              proof (equal a t1 t2) ->
              seq.

def Rcongrl : a : type ->
              p : (term a -> prop) ->
              t1 : term a ->
              t2 : term a ->
              (proof (p t2) -> seq) ->
              proof (p t1) ->
              proof (equal a t2 t1) ->
              seq.

(; Proofs of these rules in the logic of Focalide ;)

[] type  --> cc.uT.
[] term  --> cc.eT.
[] arrow --> cc.Arrow.
[] prop  --> dk_logic.Prop.
[] proof --> dk_logic.eP.

[] True       --> dk_logic.True.
[] False      --> dk_logic.False.
[] not        --> dk_logic.not.
[] and        --> dk_logic.and.
[] or         --> dk_logic.or.
[] imp        --> dk_logic.imp.
[] eqv        --> dk_logic.eqv.
[] forall     --> dk_logic.forall.
[] exists     --> dk_logic.exists.
[] foralltype --> dk_logic.forall_type.
[] existstype --> dk_logic.exists_type.
[] equal      --> dk_logic.equal.

[] seq --> proof False.

(; Law of eXcluded Middle ;)

(; xmid       : p : prop -> ;)
(; 	     z : prop -> ;)
(; 	     (proof p -> proof z) -> ;)
(; 	     (proof (not p) -> proof z) -> ;)
(; 	     proof z. ;)

(; {nnpp (p : prop)} : proof (not (not p)) -> proof p := ;)
(;     H1 : proof (not (not p)) ;)
(;     => xmid p p ;)
(; 	    (H2 : proof p ;)
(; 	     => H2) ;)
(; 	    (H3 : proof (not p) ;)
(; 	     => H1 H3 p). ;)

(; (\; usefull lemmas to prove rules ;\) ;)

(; {true_intro} : proof True ;)
(;              := ;)
(;                p : prop ;)
(; 	       => x : proof p ;)
(; 	          => x. ;)

(; {lemme_contraposition (p : prop) ;)
(;                       (q : prop)} ;)
(; : (proof (imp p q) -> ;)
(;    proof (imp (not q) (not p))) ;)
(; := ;)
(;   H1 : proof (imp p q) ;)
(;   => H2 : proof (not q) ;)
(;      => H3 : proof p ;)
(; 	=> H2 (H1 H3). ;)

(; {lemme_equiv_1 (p : prop) ;)
(; 	       (q : prop) ;)
(; 	       (H5 : proof q -> proof p) ;)
(; 	       (H2 : proof p -> proof (not q)) ;)
(; 	       (HQ : proof q)} ;)
(; : proof (not q) ;)
(; := ;)
(;   H2 (H5 HQ). ;)

(; {lemme_equiv_2 (p : prop) ;)
(;  	       (q : prop) ;)
(; 	       (H5 : proof q -> proof p) ;)
(; 	       (H2 : proof p -> proof (not q))} ;)
(; : proof (not q) ;)
(; := ;)
(;   HQ : proof q ;)
(;   => lemme_equiv_1 p q H5 H2 HQ HQ. ;)

(; {lemme_equiv_3 (p : prop) ;)
(; 	       (q : prop) ;)
(; 	       (H5 : proof q -> proof p) ;)
(; 	       (H2 : proof p -> proof (not q)) ;)
(; 	       (H4 : proof p -> proof q)} ;)
(; : proof (not p) ;)
(; := ;)
(;   lemme_contraposition p q H4 (lemme_equiv_2 p q H5 H2). ;)

(; {lemme_equiv_4 (p : prop) ;)
(; 	       (q : prop) ;)
(; 	       (H5 : proof q -> proof p) ;)
(; 	       (H2 : proof p -> proof (not q)) ;)
(; 	       (H4 : proof p -> proof q) ;)
(; 	       (H1 : proof (not p) -> proof (not (not q)))} ;)
(; : proof (not (not q)) ;)
(; := ;)
(;   H1 (lemme_equiv_3 p q H5 H2 H4). ;)

(; {lemme_notor_1 (p : prop) ;)
(; 	       (q : prop)} ;)
(; : proof p -> proof (or p q) ;)
(; := ;)
(;   H1 : proof p ;)
(;   => z : prop ;)
(;      => H2 : (proof p -> proof z) ;)
(; 	=> H3 : (proof q -> proof z) ;)
(; 	   => H2 H1. ;)

(; {lemme_notor_2 (p : prop) ;)
(; 	       (q : prop)} ;)
(; : proof q -> proof (or p q) ;)
(; := ;)
(;   H1 : proof q ;)
(;   => z : prop ;)
(;      => H2 : (proof p -> proof z) ;)
(; 	=> H3 : (proof q -> proof z) ;)
(; 	   => H3 H1. ;)

(; {lemme_notor_3 (p : prop) ;)
(; 	       (q : prop) ;)
(; 	       (H2 : proof (not (or p q)))} ;)
(; : proof (not p) ;)
(; := ;)
(;   lemme_contraposition p (or p q) (lemme_notor_1 p q) H2. ;)

(; {lemme_notor_4 (p : prop) ;)
(; 	       (q : prop) ;)
(; 	       (H2 : proof (not (or p q)))} ;)
(; : proof (not q) ;)
(; := ;)
(;   lemme_contraposition q (or p q) (lemme_notor_2 p q) H2. ;)

(; {lemme_notimply_1 (p : prop) ;)
(; 	          (q : prop) ;)
(; 	          (H2 : proof (not (imp p q)))} ;)
(; : proof (not q) ;)
(; := ;)
(;   H3 : proof q ;)
(;   => H2 (H4 : proof p ;)
(; 	 => H3). ;)

(; {lemme_notimply_2 (p : prop) ;)
(; 	          (q : prop) ;)
(; 	          (H1 : proof p -> proof (not (not q))) ;)
(; 	          (H2 : proof (not (imp p q)))} ;)
(; : proof (not p) ;)
(; := ;)
(;   H3 : proof p ;)
(;   => (H1 H3) (lemme_notimply_1 p q H2). ;)

(; {lemme_notimply_3 (p : prop) ;)
(; 	          (q : prop) ;)
(; 	          (H3 : proof (not p))} ;)
(; : proof (imp p q) ;)
(; := ;)
(;   H4 : proof p ;)
(;   => H3 H4 q. ;)

(; {lemme_notequiv_1 (p : prop) ;)
(;                   (q : prop) ;)
(;                   (H2 : proof p -> proof (not (not q))) ;)
(;                   (H3 : proof (not (eqv p q)))} ;)
(; : proof (not p) ;)
(; := ;)
(;   HP : proof p ;)
(;   => H2 HP (HQ : proof q ;)
(;             => H3 (z : prop ;)
(;                    => H4 : (proof (imp p q) -> ;)
(;                             proof (imp q p) -> ;)
(;                             proof z) ;)
(;                       => H4 (__ : proof p => HQ) (__ : proof q => HP))). ;)

(; (\; Proofs of LLproof Rules ;\) ;)

(; [] Rfalse --> ;)
(;   x : proof False ;)
(;   => x. ;)

(; [] Rnottrue --> ;)
(;   H : proof (not True) ;)
(;   => H true_intro. ;)

(; [p : prop] Raxiom p --> ;)
(;   H : proof p ;)
(;   => CH : proof (not p) ;)
(;      => CH H. ;)

(; [a : type, t : term a] Rnoteq a t --> ;)
(;   H1 : proof (not (equal a t t)) ;)
(;   => H1 (z : (term a -> prop) ;)
(; 	 => (H2 : proof (z t) ;)
(; 	     => H2)). ;)

(; [a : type, t : term a, u : term a] Reqsym a t u --> ;)
(;   H1 : proof (equal a t u) ;)
(;   => H2 : proof (not (equal a u t)) ;)
(;      => H2 (z : (term a -> prop) ;)
(; 	    => H3 : proof (z u) ;)
(; 	       => H1 (x : term a ;)
(; 		      => (imp (z x) (z t))) ;)
(; 		     (H4 : proof (z t) ;)
(; 		      => H4) ;)
(; 		     H3). ;)

(; [p : prop] Rcut p --> ;)
(;   H1 : (proof p -> proof False) ;)
(;   => H2 : (proof (not p) -> proof False) ;)
(;      => H2 H1. ;)

(; [p : prop] Rnotnot p --> ;)
(;   H1 : (proof p -> proof False) ;)
(;   => H2 : proof (not (not p)) ;)
(;      => H2 H1. ;)

(; [p : prop, q : prop] Rand p q --> ;)
(;   H1 : (proof p -> proof q -> proof False) ;)
(;   => H2 : proof (and p q) ;)
(;      => H2 False H1. ;)

(; [p : prop, q : prop] Ror p q --> ;)
(;   H1 : (proof p -> proof False) ;)
(;   => H2 : (proof q -> proof False) ;)
(;      => H3 : proof (or p q) ;)
(; 	=> H3 False H1 H2. ;)

(; [p : prop, q : prop] Rimply p q --> ;)
(;   H1 : (proof (not p) -> proof False) ;)
(;   => H2 : (proof q -> proof False) ;)
(;      => H3 : proof (imp p q) ;)
(; 	=> H1 (lemme_contraposition p q H3 H2). ;)

(; [p : prop, q : prop] Requiv p q --> ;)
(;   H1 : (proof (not p) -> proof (not q) -> proof False) ;)
(;   => H2 : (proof p -> proof q -> proof False) ;)
(;      => H3 : proof (eqv p q) ;)
(; 	=> H3 False ;)
(;              (H4 : (proof p -> proof q) ;)
(; 	      => H5 : (proof q -> proof p) ;)
(; 		 => lemme_equiv_4 p q H5 H2 H4 H1 (lemme_equiv_2 p q H5 H2)). ;)

(; [p : prop, q : prop] Rnotand p q --> ;)
(;   H1 : (proof (not p) -> proof False) ;)
(;   => H2 : (proof (not q) -> proof False) ;)
(;      => H3 : proof (not (and p q)) ;)
(; 	=> H1 (H5 : proof p => ;)
(;                H2 (H6 : proof q => ;)
(;                    H3 (z : prop => ;)
(;                        (H4 : (proof p -> proof q -> proof z) => ;)
(;                         H4 H5 H6)))). ;)

(; [p : prop, q : prop] Rnotor p q --> ;)
(;   H1 : (proof (not p) -> proof (not q) -> proof False) ;)
(;   => H2 : proof (not (or p q)) ;)
(;      => H1 (lemme_notor_3 p q H2) (lemme_notor_4 p q H2). ;)

(; [p : prop, q : prop] Rnotimply p q --> ;)
(;   H1 : (proof p -> proof (not q) -> proof False) ;)
(;   => H2 : proof (not (imp p q)) ;)
(;      => H2 (lemme_notimply_3 p q (lemme_notimply_2 p q H1 H2)). ;)

(; [p : prop, q : prop] Rnotequiv p q --> ;)
(;   H1 : (proof (not p) -> proof (not q)) ;)
(;   => H2 : (proof p -> proof (not (not q))) ;)
(;      => H3 : proof (not (eqv p q)) ;)
(;         => (HNP : proof (not p) ;)
(;             => H3 (z : prop ;)
(;                    => H4 : (proof (imp p q) -> proof (imp q p) -> proof z) ;)
(;                       => H4 (HP : proof p => HNP HP q) ;)
(;                             (HQ : proof q => H1 HNP HQ p))) ;)
(;            (lemme_notequiv_1 p q H2 H3). ;)

(; [a : type, p : term a -> prop] Rex a p --> ;)
(;   H1 : (t : term a -> proof (p t) -> proof False) ;)
(;   => H2 : proof (exists a p) ;)
(;      => H2 False H1. ;)

(; [a : type, p : term a -> prop, t : term a] Rall a p t --> ;)
(;   H1 : (proof (p t) -> proof False) ;)
(;   => H2 : proof (forall a p) ;)
(;      => H1 (H2 t). ;)

(; [a : type, p : term a -> prop, t : term a] Rnotex a p t --> ;)
(;   H1 : (proof (not (p t)) -> proof False) ;)
(;   => H2 : proof (not (exists a p)) ;)
(;      => H1 (H4 : proof (p t) ;)
(;             => H2 (z : prop ;)
(; 		   => H3 : (x : term a -> proof (p x) -> proof z) ;)
(; 		      => H3 t H4)). ;)

(; [a : type, p : term a -> prop] Rnotall a p --> ;)
(;   H1 : (t : term a -> proof (not (p t)) -> proof False) ;)
(;   => H2 : proof (not (forall a p)) ;)
(;      => H2 (t : term a ;)
(; 	    => nnpp (p t) (H1 t)). ;)

(; [p : type -> prop] Rextype p --> ;)
(;   H1 : (a : type -> proof (p a) -> proof False) ;)
(;   => H2 : proof (existstype p) ;)
(;      => H2 False H1. ;)

(; [p : type -> prop, a : type] Ralltype p a --> ;)
(;   H1 : (proof (p a) -> proof False) ;)
(;   => H2 : proof (foralltype p) ;)
(;      => H1 (H2 a). ;)

(; [p : type -> prop, a : type] Rnotextype p a --> ;)
(;   H1 : (proof (not (p a)) -> proof False) ;)
(;   => H2 : proof (not (existstype p)) ;)
(;      => H1 (H4 : proof (p a) ;)
(;             => (H2 (z : prop ;)
(; 		    => H3 : (b : type -> proof (p b) -> proof z) ;)
(; 		       => H3 a H4))). ;)

(; [p : type -> prop] Rnotalltype p --> ;)
(;   H1 : (a : type -> proof (not (p a)) -> proof False) ;)
(;   => H2 : proof (not (foralltype p)) ;)
(;      => H2 (a : type ;)
(; 	    => nnpp (p a) (H1 a)). ;)

(; [a : type, p : term a -> prop, t1 : term a, t2 : term a] Rsubst a p t1 t2 --> ;)
(;   H1 : (proof (not (equal a t1 t2)) -> proof False) ;)
(;   => H2 : (proof (p t2) -> proof False) ;)
(;      => H3 : proof (p t1) ;)
(; 	=> H1 (H4 : proof (equal a t1 t2) ;)
(;                => H2 (H4 p H3)). ;)
