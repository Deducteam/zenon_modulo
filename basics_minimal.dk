(; Ceci est une version minimale écrite à la main du fichier
habituellement généré basics.dk. Ce fichier permet de tester Zenon
indépendamment de FoCaLiZe. ;)

#NAME basics.

Is_true := dk_logic.ebP.

bool__t := dk_bool.bool.
true := dk_bool.true.
false := dk_bool.false.

_amper__amper_ : cc.eT bool__t -> cc.eT bool__t -> cc.eT bool__t
               := dk_bool.and.

_bar__bar_ : cc.eT bool__t -> cc.eT bool__t -> cc.eT bool__t
           := dk_bool.or.

_tilda__tilda_ : cc.eT bool__t -> cc.eT bool__t := dk_bool.not.

_bar__lt__gt__bar_ : cc.eT bool__t -> cc.eT bool__t -> cc.eT bool__t
                   := dk_bool.xor.

prod := dk_tuple.prod.

pair (b : cc.uT)
     (a : cc.uT)
     (x : cc.eT a)
     (y : cc.eT b)
     : cc.eT (dk_tuple.prod a b) :=
  (dk_tuple.pair a b x y).

fst (b : cc.uT)
    (a : cc.uT)
    (x : cc.eT (dk_tuple.prod a b)) :
    cc.eT a :=
  dk_tuple.fst a b x.

snd (b : cc.uT)
    (a : cc.uT)
    (x : cc.eT (dk_tuple.prod a b)) :
    cc.eT b :=
  dk_tuple.snd a b x.

_equal_ : a : cc.uT -> cc.eT a -> cc.eT a -> cc.eT bool__t.

syntactic_equal := _equal_.

__beq_refl  : a : cc.uT ->
              x : cc.eT a ->
              dk_logic.eP (dk_logic.ebP (_equal_ a x x)) :=
              dk_builtins.magic_prove
                (dk_logic.forall_type
                  (a : cc.uT =>
                   dk_logic.forall a
                     (x : cc.eT (a) =>
                      dk_logic.ebP (_equal_ a x x)))).

__beq_symm  : a : cc.uT ->
              x : cc.eT a ->
              y : cc.eT a ->
              dk_logic.eP (dk_logic.ebP (_equal_ a x y)) ->
              dk_logic.eP (dk_logic.ebP (_equal_ a y x)) :=
              dk_builtins.magic_prove
                (dk_logic.forall_type
                  (a : cc.uT =>
                   dk_logic.forall a
                     (x : cc.eT a =>
                      dk_logic.forall a
                        (y : cc.eT a =>
                         dk_logic.imp (dk_logic.ebP (_equal_ a x y))
                                      (dk_logic.ebP (_equal_ a y x)))))).


__beq_trans  : a : cc.uT ->
               x : cc.eT a ->
               y : cc.eT a ->
               z : cc.eT a ->
               dk_logic.eP (dk_logic.ebP (_equal_ a x y)) ->
               dk_logic.eP (dk_logic.ebP (_equal_ a y z)) ->
               dk_logic.eP (dk_logic.ebP (_equal_ a x z)) :=
               dk_builtins.magic_prove
                 (dk_logic.forall_type
                   (a : cc.uT =>
                    dk_logic.forall a
                      (x : cc.eT (a) =>
                       dk_logic.forall a
                         (y : cc.eT a =>
                          dk_logic.forall a
                            (z : cc.eT a =>
                             dk_logic.imp (dk_logic.ebP (_equal_ a x y))
                                          (dk_logic.imp (dk_logic.ebP (_equal_ a y z))
                                                        (dk_logic.ebP (_equal_ a x z)))))))).

