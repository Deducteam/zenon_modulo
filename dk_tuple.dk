#NAME dk_tuple.

prod : cc.uT -> cc.uT -> cc.uT.
Prod : cc.uT -> cc.uT -> Type.
[ A : cc.uT, B : cc.uT ] Prod A B --> cc.eT (prod A B).

pair : A : cc.uT ->
       B : cc.uT ->
       cc.eT A ->
       cc.eT B ->
       Prod A B.

fst : A : cc.uT -> B : cc.uT -> Prod A B -> cc.eT A.
snd : A : cc.uT -> B : cc.uT -> Prod A B -> cc.eT B.

[A : cc.uT, B : cc.uT, a : cc.eT A, b : cc.eT B]
    fst A B (pair A B a b) --> a.
[A : cc.uT, B : cc.uT, a : cc.eT A, b : cc.eT B]
    snd A B (pair A B a b) --> b.

match__pair : A : cc.uT ->
              B : cc.uT ->
              C : cc.uT ->
              Prod A B ->
              (cc.eT A -> cc.eT B -> cc.eT C) ->
              cc.eT C ->
              cc.eT C.

[ A : cc.uT, B : cc.uT, C : cc.uT,
  a : cc.eT A, b : cc.eT B,
  f : cc.eT A -> cc.eT B -> cc.eT C,
  g : cc.eT C ]
    match__pair A B C (pair A B a b) f g --> f a b.

dprod : A : cc.uT -> (cc.eT A -> cc.uT) -> cc.uT.
Dprod : A : cc.uT -> (cc.eT A -> cc.uT) -> Type.
[ A : cc.uT, B : cc.eT A -> cc.uT ] Dprod A B --> cc.eT (dprod A B).

dpair : A : cc.uT ->
       B : (cc.eT A -> cc.uT) ->
       a : cc.eT A ->
       cc.eT (B a) ->
       Dprod A B.

dfst : A : cc.uT ->
       B : (cc.eT A -> cc.uT) ->
       Dprod A B ->
       cc.eT A.
dsnd : A : cc.uT ->
       B : (cc.eT A -> cc.uT) ->
       t : Dprod A B ->
       cc.eT (B (dfst A B t)).

[A : cc.uT, B : (cc.eT A -> cc.uT), a : cc.eT A, b : cc.eT (B a)]
    dfst A B (dpair A B a b) --> a.
[A : cc.uT, B : (cc.eT A -> cc.uT), a : cc.eT A, b : cc.eT (B a)]
    dsnd A B (dpair A B a b) --> b.
