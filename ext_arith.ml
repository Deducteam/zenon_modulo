
(* TODO:
 * - finish wrapper functions around simplex
*)

open Expr
open Node
open Mlproof
module S = Simplex.Make(struct type t = Expr.t let compare = Expr.compare end)

let get_type = function
    | Etrue | Efalse -> "$o"
    | e -> begin match priv_type e with
        | None -> Namespace.univ_name
        | Some s -> s
    end

(* Manipulation of expressions/formulas *)
exception NotaFormula

let lesseq a b = eapp ("$lesseq", [a; b])
let greatereq a b = eapp ("$greatereq", [a; b])
let minus_one e = eapp ("$difference", [e; eapp ("$int", [evar "1"])])
let plus_one e = eapp ("$sum", [e; eapp ("$int", [evar "1"])])

let const s = eapp ("$int", [evar s])
let sum a b = eapp ("$sum", [a; b])
let mul a b = eapp ("$product", [a; b])
let eeq a b = eapp ("$eq_$rat", [a; b])

let rec fadd_aux (c, x) = function
    | [] -> [(c, x)]
    | (c', y) :: r ->
            if equal x y then
                (Q.add c c', x) :: r
            else
                (c', y) :: (fadd_aux (c, x) r)

let fadd a b = List.fold_left (fun e c -> fadd_aux c e) a b
let fdiff a b = fadd a (List.map (fun (c, x) -> (Q.neg c, x)) b)
let fmul c a = List.map (fun (c', x) -> (Q.mul c c', x)) a

let normalize a b =
    let rec sanitize = function
        | [] -> []
        | (c, _) as a :: r -> if Q.equal Q.zero c then r else a :: (sanitize r)
    in
    let rec pop_const = function
        | [] -> (Q.zero, [])
        | (c, x) :: r ->
                if equal etrue x then
                    (Q.neg c), r
                else
                    let c', r' = pop_const r in
                    c', (c, x) :: r'
    in
    let f = fdiff a b in
    let c, e = pop_const f in
    c, (sanitize e)

let of_cexpr = function
    | Evar (s, _) -> Q.of_string s
    | _ -> raise NotaFormula

let rec of_nexpr = function
    | Eapp (("$int"|"$rat"), [v], _) -> [of_cexpr v, etrue]
    | Etau (_, ("$int"|"$rat"), _, _) as a -> [Q.one, a]
    | Eapp ("$sum", [a; b], _) -> fadd (of_nexpr a) (of_nexpr b)
    | Eapp ("$difference", [a; b], _) -> fdiff (of_nexpr a) (of_nexpr b)
    | Eapp ("product", [Eapp (("$int"|"$rat"), [v], _); a], _)
    | Eapp ("product", [a; Eapp (("$int"|"$rat"), [v], _)], _) ->
            fmul (of_cexpr v) (of_nexpr a)
    | _ -> raise NotaFormula

let of_bexpr = function
    | Eapp (("$lesseq"|"$greatereq"|"$eq_$int"|"$eq_$rat") as s, [a; b], _ ) ->
            let a', b' = of_nexpr a, of_nexpr b in
            let c, e = normalize a' b' in
            (e, s, c)
    | _ -> raise NotaFormula

let to_nexpr = function
    | [] -> const "0"
    | (c, x) :: r -> List.fold_left (fun e (c', x') -> sum e (mul (const (Q.to_string c')) x')) (mul (const (Q.to_string c)) x) r

let to_bexpr (e, s, c) = eapp (s, [to_nexpr e; const (Q.to_string c)])

let expr_norm e = to_bexpr (of_bexpr e)

(* Nodes generated by the extension *)

let mk_node_const e g = (* e is a trivially false comparison of constants *)
    Node {
        nconc = [e];
        nrule = Ext ("arith", "const", [e]);
        nprio = Prop;
        ngoal = g;
        nbranches = [| |];
    }

let mk_node_neq e g a b = (* e : a != b *)
    Node {
        nconc = [e];
        nrule = Ext ("arith", "neq", [a; b]);
        nprio = Prop;
        ngoal = g;
        nbranches = [| [expr_norm (lesseq a (minus_one b))]; [expr_norm (greatereq a (plus_one b))] |];
    }

let mk_node_var e1 e2 e g = (* e1 : v = expr, e2 : v {comp} const, e : expr {comp} const *)
    Node {
        nconc = [e];
        nrule = Ext ("arith", "var", [e1; e2]);
        nprio = Prop;
        ngoal = g;
        nbranches = [| [e1; e2] |];
    }

(* Helper around the simplex module *)
type simplex = {
    core : S.t;
    ignore : expr list;
    bindings : (expr * expr) list;
}

let simplex_empty = {
    core = S.empty;
    ignore = [];
    bindings = [];
}

let bounds_of_comp s c = match s with
    | "$lesseq" -> (Q.minus_inf, c)
    | "$greatereq" -> (c, Q.inf)
    | "$eq_$int" | "$eq_$rat" -> (c, c)
    | _ -> (Q.minus_inf, Q.inf)

let simplex_add t (e, s, c) = match e with
    | []  -> assert false
    | [(c', x)] ->
            let b = Q.div c (Q.abs c') in
            let (inf, upp) = bounds_of_comp s b in
            let (inf, upp) = if Q.sign c' <= -1 then (Q.neg upp, Q.neg inf) else (inf, upp) in
            { t with core = S.add_bounds t.core (x, inf, upp) }, []
    | _ ->
            let (inf, upp) = bounds_of_comp s c in
            let v = newvar () in
            let e1 = eeq v (to_nexpr e) in
            let e2 = eapp (s, [v; const (Q.to_string c)]) in
            { core = S.add_bounds (S.add_eq t.core (v, e)) (v, inf, upp);
              ignore = e1 :: e2 :: t.ignore;
              bindings = (v, e1) :: t.bindings;
            }, [mk_node_var e1 e2]

let simplex_solve s =
    false, []

(* Internal state *)
type state = {
    mutable solved : bool;
    stack : (expr * simplex * ((expr * (expr -> int -> Node.node_item)) list)) Stack.t;
}

let empty_state = {
    solved = false;
    stack = Stack.create ();
}

let st_solved st = st.solved <- true

let st_pop st =
    ignore (Stack.pop st.stack);
    st.solved <- false

let st_head st =
    try
        let _, r, _ = Stack.top st.stack in
        r
    with Stack.Empty -> simplex_empty

let st_push st x = Stack.push x st.stack

let st_is_head st e =
    try
        let e', _, _ = Stack.top st.stack in
        equal e e'
    with Stack.Empty -> false

(* Extension functions *)
exception Found of (expr -> int -> node_item)

let add_expr, remove_expr, to_do =
    let st = empty_state in
    let is_new e =
        try Stack.iter (fun (e', _, l) ->
            if (List.exists (fun (e', _) -> equal e e') l) then raise Exit) st.stack;
        true
        with Exit -> false
    in
    let add e = (* try and compute a solution *)
        if is_new e && not st.solved then begin
            try
                let (f, s, c) = of_bexpr e in
                let t = st_head st in
                if f <> [] && not (List.exists (equal e) t.ignore) then begin
                    let t', res = simplex_add t (f, s, c) in
                    let b, res' = simplex_solve t' in
                    let res'' = List.map (fun x -> (e, x)) (res @ res') in
                    st_push st (e, t', res'');
                    if b then st_solved st
                end
            with NotaFormula -> ()
        end
    and remove e = if st_is_head st e then st_pop st
    and to_do e =
        try
            Stack.iter (fun (e', _, l) -> try
                raise (Found (snd (List.find (fun (e', _) -> equal e e') l)))
            with Not_found -> ()) st.stack;
            raise Not_found
        with Found n -> n e
    in
    add, remove, to_do

let const_node e g = (* comparison of constants *)
    let (f, s, c) = of_bexpr e in
    assert (f = []);
    begin match s with
    | "$lesseq" when Q.gt Q.zero c -> [mk_node_const e g]
    | "$greatereq" when Q.lt Q.zero c -> [mk_node_const e g]
    | _ -> []
    end

let newnodes e g _ = match e with
    | Enot (Eapp ("$eq_num", [a; b], _), _) ->
            Type.print_expr Format.std_formatter e;
            [mk_node_neq e g a b]
    | Eapp (("$lesseq"|"$greatereq"|"$less"|"$greater") as s,
        [Eapp (("$int"|"$rat"), [v], _); Eapp (("$int"|"$rat"), [v'], _)], _) ->
            const_node e g
    | _ ->
            try [to_do e g] with Not_found -> []

let make_inst term g = assert false

let to_llproof f p t = t.(0)

let declare_context_coq fmt = ()

let p_rule_coq fmt r = ()

let predef () = []
;;

Extension.register {
  Extension.name = "arith";
  Extension.newnodes = newnodes;
  Extension.make_inst = make_inst;
  Extension.add_formula = add_expr;
  Extension.remove_formula = remove_expr;
  Extension.preprocess = (fun x -> x);
  Extension.add_phrase = (fun _ -> ());
  Extension.postprocess = (fun x -> x);
  Extension.to_llproof = to_llproof;
  Extension.declare_context_coq = declare_context_coq;
  Extension.p_rule_coq = p_rule_coq;
  Extension.predef = predef;
};;

